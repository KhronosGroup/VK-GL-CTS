#version 450
#extension GL_EXT_gpu_shader5 : require
layout(set = 1, binding = 0, std430) buffer AtomicBuffer { highp uint counter[4]; };

layout(local_size_x = 1) in;

struct Inputs
{
	highp int index0;
	highp int index1;
	highp int index2;
	highp int index3;
};
struct Outputs
{
	highp uint result0;
	highp uint result1;
	highp uint result2;
	highp uint result3;
};

layout(set = 0, binding = 0, std430) buffer InBuffer
{
	Inputs inputs[];
};
layout(set = 0, binding = 1, std430) buffer OutBuffer
{
	Outputs outputs[];
};

void main (void)
{
	uint invocationNdx = gl_NumWorkGroups.x*gl_NumWorkGroups.y*gl_WorkGroupID.z
	                   + gl_NumWorkGroups.x*gl_WorkGroupID.y + gl_WorkGroupID.x;
	int index0 = int(inputs[invocationNdx].index0);
	int index1 = int(inputs[invocationNdx].index1);
	int index2 = int(inputs[invocationNdx].index2);
	int index3 = int(inputs[invocationNdx].index3);
	uint result0;
	uint result1;
	uint result2;
	uint result3;

	result0 = atomicAdd(counter[index0], uint(1));
	result1 = atomicAdd(counter[index1], uint(1));
	result2 = atomicAdd(counter[index2], uint(1));
	result3 = atomicAdd(counter[index3], uint(1));

	outputs[invocationNdx].result0 = result0;
	outputs[invocationNdx].result1 = result1;
	outputs[invocationNdx].result2 = result2;
	outputs[invocationNdx].result3 = result3;
}
