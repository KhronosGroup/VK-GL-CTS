#!amber

# Copyright 2021 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


# A test for a coverage-gap found by the GraphicsFuzz project.

# Short description: A fragment shader that covers specific LLVM code paths

# The test passes because the shader always writes red.

# Optimized using spirv-opt with the following arguments:
# '-O'
# spirv-opt commit hash: a0370efd589be33d5d9a85cfde2f85841b3755af



SHADER vertex variant_vertex_shader PASSTHROUGH

# variant_fragment_shader is derived from the following GLSL:
# #version 320 es
# #define _int_0 _GLF_uniform_int_values[0]
# #define _int_1 _GLF_uniform_int_values[1]
#
# precision highp int;
# precision highp float;
#
# // Contents of _GLF_uniform_int_values: [0, 1]
# layout(set = 0, binding = 0) uniform buf0
# {
#     int _GLF_uniform_int_values[2];
# };
#
# layout(location = 0) out vec4 _GLF_color;
#
# void main()
# {
#     // Test resolution is 256 which makes fragment coordinate ANDed with 256 always zero.
#     int a = ((!(!((ivec2(gl_FragCoord.xy).y & 256) != 0))) ? 0 : ~0) | ((ivec2(gl_FragCoord.xy).y & 256) != 0 ? 0 : ~0);
#
#     // Always true.
#     if(a == ~ _int_0)
#     {
#         _GLF_color = vec4(_int_1, _int_0, _int_0, _int_1);
#     }
#     else
#     {
#         _GLF_color = vec4(_int_0);
#     }
# }
SHADER fragment variant_fragment_shader SPIRV-ASM TARGET_ENV spv1.0
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 10
; Bound: 72
; Schema: 0
               OpCapability Shader
          %1 = OpExtInstImport "GLSL.std.450"
               OpMemoryModel Logical GLSL450
               OpEntryPoint Fragment %4 "main" %12 %52
               OpExecutionMode %4 OriginUpperLeft
               OpSource ESSL 320
               OpName %4 "main"
               OpName %12 "gl_FragCoord"
               OpName %41 "buf0"
               OpMemberName %41 0 "_GLF_uniform_int_values"
               OpName %43 ""
               OpName %52 "_GLF_color"
               OpDecorate %12 BuiltIn FragCoord
               OpDecorate %40 ArrayStride 16
               OpMemberDecorate %41 0 Offset 0
               OpDecorate %41 Block
               OpDecorate %43 DescriptorSet 0
               OpDecorate %43 Binding 0
               OpDecorate %52 Location 0
          %2 = OpTypeVoid
          %3 = OpTypeFunction %2
          %6 = OpTypeInt 32 1
          %9 = OpTypeFloat 32
         %10 = OpTypeVector %9 4
         %11 = OpTypePointer Input %10
         %12 = OpVariable %11 Input
         %13 = OpTypeVector %9 2
         %16 = OpTypeVector %6 2
         %18 = OpTypeInt 32 0
         %21 = OpConstant %6 256
         %23 = OpConstant %6 0
         %24 = OpTypeBool
         %28 = OpConstant %6 -1
         %39 = OpConstant %18 2
         %40 = OpTypeArray %6 %39
         %41 = OpTypeStruct %40
         %42 = OpTypePointer Uniform %41
         %43 = OpVariable %42 Uniform
         %44 = OpTypePointer Uniform %6
         %51 = OpTypePointer Output %10
         %52 = OpVariable %51 Output
         %53 = OpConstant %6 1
          %4 = OpFunction %2 None %3
          %5 = OpLabel
         %14 = OpLoad %10 %12
         %15 = OpVectorShuffle %13 %14 %14 0 1
         %17 = OpConvertFToS %16 %15
         %20 = OpCompositeExtract %6 %17 1
         %22 = OpBitwiseAnd %6 %20 %21
         %25 = OpINotEqual %24 %22 %23
         %26 = OpLogicalNot %24 %25
         %27 = OpLogicalNot %24 %26
         %29 = OpSelect %6 %27 %23 %28
         %36 = OpSelect %6 %25 %23 %28
         %37 = OpBitwiseOr %6 %29 %36
         %45 = OpAccessChain %44 %43 %23 %23
         %46 = OpLoad %6 %45
         %47 = OpNot %6 %46
         %48 = OpIEqual %24 %37 %47
               OpSelectionMerge %50 None
               OpBranchConditional %48 %49 %67
         %49 = OpLabel
         %54 = OpAccessChain %44 %43 %23 %53
         %55 = OpLoad %6 %54
         %56 = OpConvertSToF %9 %55
         %59 = OpConvertSToF %9 %46
         %66 = OpCompositeConstruct %10 %56 %59 %59 %56
               OpStore %52 %66
               OpBranch %50
         %67 = OpLabel
         %70 = OpConvertSToF %9 %46
         %71 = OpCompositeConstruct %10 %70 %70 %70 %70
               OpStore %52 %71
               OpBranch %50
         %50 = OpLabel
               OpReturn
               OpFunctionEnd
END

# uniforms for variant

# _GLF_uniform_int_values
BUFFER variant__GLF_uniform_int_values DATA_TYPE int32[] STD140 DATA
 0 1
END

BUFFER variant_framebuffer FORMAT B8G8R8A8_UNORM

PIPELINE graphics variant_pipeline
  ATTACH variant_vertex_shader
  ATTACH variant_fragment_shader
  FRAMEBUFFER_SIZE 256 256
  BIND BUFFER variant_framebuffer AS color LOCATION 0
  BIND BUFFER variant__GLF_uniform_int_values AS uniform DESCRIPTOR_SET 0 BINDING 0
END
CLEAR_COLOR variant_pipeline 0 0 0 255

CLEAR variant_pipeline
RUN variant_pipeline DRAW_RECT POS 0 0 SIZE 256 256

EXPECT variant_framebuffer IDX 0 0 SIZE 256 256 EQ_RGBA 255 0 0 255
