#!amber

# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


# A test for a bug found by GraphicsFuzz.

# Short description: A fragment shader with two ifs and return/continue inside a for loop

# The test passes because the shader always writes the color red.

SHADER vertex variant_vertex_shader PASSTHROUGH

# variant_fragment_shader is derived from the following GLSL:
# #version 310 es
# precision highp float;
#
# layout(location = 0) out vec4 _GLF_color;
#
# void main()
# {
#  _GLF_color = vec4(1.0, 0.0, 0.0, 1.0);
#  for(
#      int i = 1;
#      i < 2;
#      ++i
#  )
#   {
#    if(gl_FragCoord.y < 0.0)
#     {
#      if(gl_FragCoord.x < 0.0)
#       {
#        _GLF_color = vec4(226.696, 1.0, 1.0, 1.0);
#       }
#      continue;
#     }
#    return;
#   }
# }
SHADER fragment variant_fragment_shader SPIRV-ASM TARGET_ENV spv1.0
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 7
; Bound: 48
; Schema: 0
               OpCapability Shader
          %1 = OpExtInstImport "GLSL.std.450"
               OpMemoryModel Logical GLSL450
               OpEntryPoint Fragment %4 "main" %9 %27
               OpExecutionMode %4 OriginUpperLeft
               OpSource ESSL 310
               OpName %4 "main"
               OpName %9 "_GLF_color"
               OpName %15 "i"
               OpName %27 "gl_FragCoord"
               OpDecorate %9 Location 0
               OpDecorate %15 RelaxedPrecision
               OpDecorate %22 RelaxedPrecision
               OpDecorate %27 BuiltIn FragCoord
               OpDecorate %46 RelaxedPrecision
               OpDecorate %47 RelaxedPrecision
          %2 = OpTypeVoid
          %3 = OpTypeFunction %2
          %6 = OpTypeFloat 32
          %7 = OpTypeVector %6 4
          %8 = OpTypePointer Output %7
          %9 = OpVariable %8 Output
         %10 = OpConstant %6 1
         %11 = OpConstant %6 0
         %12 = OpConstantComposite %7 %10 %11 %11 %10
         %13 = OpTypeInt 32 1
         %14 = OpTypePointer Function %13
         %16 = OpConstant %13 1
         %23 = OpConstant %13 2
         %24 = OpTypeBool
         %26 = OpTypePointer Input %7
         %27 = OpVariable %26 Input
         %28 = OpTypeInt 32 0
         %29 = OpConstant %28 1
         %30 = OpTypePointer Input %6
         %36 = OpConstant %28 0
         %42 = OpConstant %6 226.695999
         %43 = OpConstantComposite %7 %42 %10 %10 %10
          %4 = OpFunction %2 None %3
          %5 = OpLabel
         %15 = OpVariable %14 Function
               OpStore %9 %12
               OpStore %15 %16
               OpBranch %17
         %17 = OpLabel
               OpLoopMerge %19 %20 None
               OpBranch %21
         %21 = OpLabel
         %22 = OpLoad %13 %15
         %25 = OpSLessThan %24 %22 %23
               OpBranchConditional %25 %18 %19
         %18 = OpLabel
         %31 = OpAccessChain %30 %27 %29
         %32 = OpLoad %6 %31
         %33 = OpFOrdLessThan %24 %32 %11
               OpSelectionMerge %35 None
               OpBranchConditional %33 %34 %35
         %34 = OpLabel
         %37 = OpAccessChain %30 %27 %36
         %38 = OpLoad %6 %37
         %39 = OpFOrdLessThan %24 %38 %11
               OpSelectionMerge %41 None
               OpBranchConditional %39 %40 %41
         %40 = OpLabel
               OpStore %9 %43
               OpBranch %41
         %41 = OpLabel
               OpBranch %20
         %35 = OpLabel
               OpReturn
         %20 = OpLabel
         %46 = OpLoad %13 %15
         %47 = OpIAdd %13 %46 %16
               OpStore %15 %47
               OpBranch %17
         %19 = OpLabel
               OpReturn
               OpFunctionEnd
END

# uniforms for variant


BUFFER variant_framebuffer FORMAT B8G8R8A8_UNORM

PIPELINE graphics variant_pipeline
  ATTACH variant_vertex_shader
  ATTACH variant_fragment_shader
  FRAMEBUFFER_SIZE 256 256
  BIND BUFFER variant_framebuffer AS color LOCATION 0
END
CLEAR_COLOR variant_pipeline 0 0 0 255

CLEAR variant_pipeline
RUN variant_pipeline DRAW_RECT POS 0 0 SIZE 256 256

EXPECT variant_framebuffer IDX 0 0 SIZE 256 256 EQ_RGBA 255 0 0 255
