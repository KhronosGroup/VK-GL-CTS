#!amber

# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


# A test for a coverage-gap found by the GraphicsFuzz project.

# Short description: A fragment shader that covers a specific inst combine select code path

# The test passes because the shader always writes red.

SHADER vertex variant_vertex_shader PASSTHROUGH

# variant_fragment_shader is derived from the following GLSL:
# #version 310 es
# #define _int_0 _GLF_uniform_int_values[0]
# #define _int_1 _GLF_uniform_int_values[1]
#
# precision highp float;
#
# precision highp int;
#
# // Contents of _GLF_uniform_int_values: [0, 1]
# layout(set = 0, binding = 0) uniform buf0
# {
#     int _GLF_uniform_int_values[2];
# };
# layout(location = 0) out vec4 _GLF_color;
#
# void main()
# {
#     // a becomes 1.
#     int a = max(1, min(1, int(gl_FragCoord.x)));
#
#     if (a < 2)
#     {
#         _GLF_color = vec4(1, _int_0, _int_0, _int_1);
#     }
#     else
#     {
#         _GLF_color = vec4(_int_1);
#     }
# }
SHADER fragment variant_fragment_shader SPIRV-ASM TARGET_ENV spv1.0
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 10
; Bound: 53
; Schema: 0
               OpCapability Shader
          %1 = OpExtInstImport "GLSL.std.450"
               OpMemoryModel Logical GLSL450
               OpEntryPoint Fragment %4 "main" %13 %29
               OpExecutionMode %4 OriginUpperLeft
               OpSource ESSL 310
               OpName %4 "main"
               OpName %8 "a"
               OpName %13 "gl_FragCoord"
               OpName %29 "_GLF_color"
               OpName %33 "buf0"
               OpMemberName %33 0 "_GLF_uniform_int_values"
               OpName %35 ""
               OpDecorate %13 BuiltIn FragCoord
               OpDecorate %29 Location 0
               OpDecorate %32 ArrayStride 16
               OpMemberDecorate %33 0 Offset 0
               OpDecorate %33 Block
               OpDecorate %35 DescriptorSet 0
               OpDecorate %35 Binding 0
          %2 = OpTypeVoid
          %3 = OpTypeFunction %2
          %6 = OpTypeInt 32 1
          %7 = OpTypePointer Function %6
          %9 = OpConstant %6 1
         %10 = OpTypeFloat 32
         %11 = OpTypeVector %10 4
         %12 = OpTypePointer Input %11
         %13 = OpVariable %12 Input
         %14 = OpTypeInt 32 0
         %15 = OpConstant %14 0
         %16 = OpTypePointer Input %10
         %23 = OpConstant %6 2
         %24 = OpTypeBool
         %28 = OpTypePointer Output %11
         %29 = OpVariable %28 Output
         %30 = OpConstant %10 1
         %31 = OpConstant %14 2
         %32 = OpTypeArray %6 %31
         %33 = OpTypeStruct %32
         %34 = OpTypePointer Uniform %33
         %35 = OpVariable %34 Uniform
         %36 = OpConstant %6 0
         %37 = OpTypePointer Uniform %6
          %4 = OpFunction %2 None %3
          %5 = OpLabel
          %8 = OpVariable %7 Function
         %17 = OpAccessChain %16 %13 %15
         %18 = OpLoad %10 %17
         %19 = OpConvertFToS %6 %18
         %20 = OpExtInst %6 %1 SMin %9 %19
         %21 = OpExtInst %6 %1 SMax %9 %20
               OpStore %8 %21
         %22 = OpLoad %6 %8
         %25 = OpSLessThan %24 %22 %23
               OpSelectionMerge %27 None
               OpBranchConditional %25 %26 %48
         %26 = OpLabel
         %38 = OpAccessChain %37 %35 %36 %36
         %39 = OpLoad %6 %38
         %40 = OpConvertSToF %10 %39
         %41 = OpAccessChain %37 %35 %36 %36
         %42 = OpLoad %6 %41
         %43 = OpConvertSToF %10 %42
         %44 = OpAccessChain %37 %35 %36 %9
         %45 = OpLoad %6 %44
         %46 = OpConvertSToF %10 %45
         %47 = OpCompositeConstruct %11 %30 %40 %43 %46
               OpStore %29 %47
               OpBranch %27
         %48 = OpLabel
         %49 = OpAccessChain %37 %35 %36 %9
         %50 = OpLoad %6 %49
         %51 = OpConvertSToF %10 %50
         %52 = OpCompositeConstruct %11 %51 %51 %51 %51
               OpStore %29 %52
               OpBranch %27
         %27 = OpLabel
               OpReturn
               OpFunctionEnd
END

# uniforms for variant

# _GLF_uniform_int_values
BUFFER variant__GLF_uniform_int_values DATA_TYPE int32[] STD140 DATA
 0 1
END

BUFFER variant_framebuffer FORMAT B8G8R8A8_UNORM

PIPELINE graphics variant_pipeline
  ATTACH variant_vertex_shader
  ATTACH variant_fragment_shader
  FRAMEBUFFER_SIZE 256 256
  BIND BUFFER variant_framebuffer AS color LOCATION 0
  BIND BUFFER variant__GLF_uniform_int_values AS uniform DESCRIPTOR_SET 0 BINDING 0
END
CLEAR_COLOR variant_pipeline 0 0 0 255

CLEAR variant_pipeline
RUN variant_pipeline DRAW_RECT POS 0 0 SIZE 256 256

EXPECT variant_framebuffer IDX 0 0 SIZE 256 256 EQ_RGBA 255 0 0 255
