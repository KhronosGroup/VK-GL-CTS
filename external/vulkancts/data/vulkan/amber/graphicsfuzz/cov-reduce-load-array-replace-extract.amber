#!amber

# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


# A test for a coverage-gap found by GraphicsFuzz.

# Short description: A fragment shader that covers a specific load size reduction path.

# The test passes because shader always writes red.

# Optimized using spirv-opt with the following arguments:
# '-Os'
# spirv-opt commit hash: 9215c1b7df0029f27807e8c8d7ec80532ce90a87



SHADER vertex variant_vertex_shader PASSTHROUGH

# variant_fragment_shader is derived from the following GLSL:
# #version 310 es
# precision highp float;
#
# layout(location = 0) out vec4 _GLF_color;
# layout(set = 0, binding = 0) uniform buf0
# {
#     int zero;
# };
#
# struct S
# {
#     int x[1];
# };
#
# // Function returns 1 or 2.
# int func(S s, int a)
# {
#     _GLF_color = vec4(0);
#
#     if(s.x[zero] == a)
#         return 1;
#
#     return 2;
# }
#
# void main()
# {
#     S s; // Uninitialized. Contents don't matter.
#     int res = func(s, s.x[0]);
#     // Always true.
#     if (res == 1 || res == 2)
#         _GLF_color = vec4(1, 0, 0, 1);
#     else
#         _GLF_color = vec4(0);
# }
SHADER fragment variant_fragment_shader SPIRV-ASM TARGET_ENV spv1.0
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 8
; Bound: 97
; Schema: 0
               OpCapability Shader
          %1 = OpExtInstImport "GLSL.std.450"
               OpMemoryModel Logical GLSL450
               OpEntryPoint Fragment %4 "main" %21
               OpExecutionMode %4 OriginUpperLeft
               OpSource ESSL 310
               OpName %4 "main"
               OpName %21 "_GLF_color"
               OpName %25 "buf0"
               OpMemberName %25 0 "zero"
               OpName %27 ""
               OpDecorate %21 Location 0
               OpMemberDecorate %25 0 RelaxedPrecision
               OpMemberDecorate %25 0 Offset 0
               OpDecorate %25 Block
               OpDecorate %27 DescriptorSet 0
               OpDecorate %27 Binding 0
               OpDecorate %49 RelaxedPrecision
               OpDecorate %79 RelaxedPrecision
               OpDecorate %81 RelaxedPrecision
               OpDecorate %88 RelaxedPrecision
               OpDecorate %96 RelaxedPrecision
          %2 = OpTypeVoid
          %3 = OpTypeFunction %2
          %6 = OpTypeInt 32 1
          %7 = OpTypeInt 32 0
          %8 = OpConstant %7 1
          %9 = OpTypeArray %6 %8
         %12 = OpTypePointer Function %6
         %18 = OpTypeFloat 32
         %19 = OpTypeVector %18 4
         %20 = OpTypePointer Output %19
         %21 = OpVariable %20 Output
         %22 = OpConstant %18 0
         %23 = OpConstantComposite %19 %22 %22 %22 %22
         %24 = OpConstant %6 0
         %25 = OpTypeStruct %6
         %26 = OpTypePointer Uniform %25
         %27 = OpVariable %26 Uniform
         %28 = OpTypePointer Uniform %6
         %34 = OpTypeBool
         %38 = OpConstant %6 1
         %40 = OpConstant %6 2
         %58 = OpConstant %18 1
         %59 = OpConstantComposite %19 %58 %22 %22 %58
         %87 = OpTypePointer Function %9
          %4 = OpFunction %2 None %3
          %5 = OpLabel
         %88 = OpVariable %87 Function
         %89 = OpLoad %9 %88
         %49 = OpCompositeExtract %6 %89 0
               OpBranch %74
         %74 = OpLabel
               OpLoopMerge %75 %76 None
               OpBranch %77
         %77 = OpLabel
               OpStore %21 %23
         %78 = OpAccessChain %28 %27 %24
         %79 = OpLoad %6 %78
         %94 = OpAccessChain %12 %88 %79
         %81 = OpLoad %6 %94
         %83 = OpIEqual %34 %81 %49
               OpSelectionMerge %84 None
               OpBranchConditional %83 %85 %84
         %85 = OpLabel
               OpBranch %75
         %84 = OpLabel
               OpBranch %75
         %76 = OpLabel
               OpBranch %74
         %75 = OpLabel
         %96 = OpPhi %6 %38 %85 %40 %84
         %52 = OpIEqual %34 %96 %38
         %54 = OpIEqual %34 %96 %40
         %55 = OpLogicalOr %34 %52 %54
               OpSelectionMerge %57 None
               OpBranchConditional %55 %56 %60
         %60 = OpLabel
               OpStore %21 %23
               OpBranch %57
         %56 = OpLabel
               OpStore %21 %59
               OpBranch %57
         %57 = OpLabel
               OpReturn
               OpFunctionEnd
END

# uniforms for variant

# zero
BUFFER variant_zero DATA_TYPE int32 DATA
 0
END

BUFFER variant_framebuffer FORMAT B8G8R8A8_UNORM

PIPELINE graphics variant_pipeline
  ATTACH variant_vertex_shader
  ATTACH variant_fragment_shader
  FRAMEBUFFER_SIZE 256 256
  BIND BUFFER variant_framebuffer AS color LOCATION 0
  BIND BUFFER variant_zero AS uniform DESCRIPTOR_SET 0 BINDING 0
END
CLEAR_COLOR variant_pipeline 0 0 0 255

CLEAR variant_pipeline
RUN variant_pipeline DRAW_RECT POS 0 0 SIZE 256 256

EXPECT variant_framebuffer IDX 0 0 SIZE 256 256 EQ_RGBA 255 0 0 255
