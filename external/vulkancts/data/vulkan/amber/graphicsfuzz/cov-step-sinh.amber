#!amber

# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


# A test for a coverage-gap found by the GraphicsFuzz project.

# Short description: A fragment shader that covers a specific APFloat code path

# The test passes because the shader always writes red.

SHADER vertex variant_vertex_shader PASSTHROUGH

# variant_fragment_shader is derived from the following GLSL:
# #version 310 es
#
# precision highp int;
#
# precision highp float;
#
# layout(location = 0) out vec4 _GLF_color;
#
# void main()
# {
#     vec2 v1 = vec2(1.0, -1.0);
#
#     // v2 becomes [1.0, 0.0].
#     vec2 v2 = step(0.4, sinh(v1));
#     _GLF_color = vec4(v2.x, v2.y, v2.y, v2.x);
# }
SHADER fragment variant_fragment_shader SPIRV-ASM TARGET_ENV spv1.0
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 10
; Bound: 35
; Schema: 0
               OpCapability Shader
          %1 = OpExtInstImport "GLSL.std.450"
               OpMemoryModel Logical GLSL450
               OpEntryPoint Fragment %4 "main" %21
               OpExecutionMode %4 OriginUpperLeft
               OpSource ESSL 310
               OpName %4 "main"
               OpName %9 "v1"
               OpName %13 "v2"
               OpName %21 "_GLF_color"
               OpDecorate %21 Location 0
          %2 = OpTypeVoid
          %3 = OpTypeFunction %2
          %6 = OpTypeFloat 32
          %7 = OpTypeVector %6 2
          %8 = OpTypePointer Function %7
         %10 = OpConstant %6 1
         %11 = OpConstant %6 -1
         %12 = OpConstantComposite %7 %10 %11
         %14 = OpConstant %6 0.400000006
         %19 = OpTypeVector %6 4
         %20 = OpTypePointer Output %19
         %21 = OpVariable %20 Output
         %22 = OpTypeInt 32 0
         %23 = OpConstant %22 0
         %24 = OpTypePointer Function %6
         %27 = OpConstant %22 1
          %4 = OpFunction %2 None %3
          %5 = OpLabel
          %9 = OpVariable %8 Function
         %13 = OpVariable %8 Function
               OpStore %9 %12
         %15 = OpLoad %7 %9
         %16 = OpExtInst %7 %1 Sinh %15
         %17 = OpCompositeConstruct %7 %14 %14
         %18 = OpExtInst %7 %1 Step %17 %16
               OpStore %13 %18
         %25 = OpAccessChain %24 %13 %23
         %26 = OpLoad %6 %25
         %28 = OpAccessChain %24 %13 %27
         %29 = OpLoad %6 %28
         %30 = OpAccessChain %24 %13 %27
         %31 = OpLoad %6 %30
         %32 = OpAccessChain %24 %13 %23
         %33 = OpLoad %6 %32
         %34 = OpCompositeConstruct %19 %26 %29 %31 %33
               OpStore %21 %34
               OpReturn
               OpFunctionEnd
END


BUFFER variant_framebuffer FORMAT B8G8R8A8_UNORM

PIPELINE graphics variant_pipeline
  ATTACH variant_vertex_shader
  ATTACH variant_fragment_shader
  FRAMEBUFFER_SIZE 256 256
  BIND BUFFER variant_framebuffer AS color LOCATION 0
END
CLEAR_COLOR variant_pipeline 0 0 0 255

CLEAR variant_pipeline
RUN variant_pipeline DRAW_RECT POS 0 0 SIZE 256 256

EXPECT variant_framebuffer IDX 0 0 SIZE 256 256 EQ_RGBA 255 0 0 255
