#!amber

# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


# A test for a coverage-gap found by the GraphicsFuzz project.

# Short description: A fragment shader that covers a specific inst combine shifts code path

# The test passes because the shader always writes red.

SHADER vertex variant_vertex_shader PASSTHROUGH

# variant_fragment_shader is derived from the following GLSL:
# #version 310 es
# #define _int_1 _GLF_uniform_int_values[0]
# #define _int_5 _GLF_uniform_int_values[1]
# #define _int_0 _GLF_uniform_int_values[2]
# #define _float_0_0 _GLF_uniform_float_values[0]
#
# precision highp float;
#
# precision highp int;
#
# // Contents of _GLF_uniform_int_values: [1, 5, 0]
# layout(set = 0, binding = 0) uniform buf0
# {
#     int _GLF_uniform_int_values[3];
# };
#
# // Contents of _GLF_uniform_float_values: 0.0
# layout(set = 0, binding = 1) uniform buf1
# {
#     float _GLF_uniform_float_values[1];
# };
# layout(location = 0) out vec4 _GLF_color;
#
# void main()
# {
#     _GLF_color = vec4(_int_0);
#
#     // i becomes 4.
#     int i = 1 << ((gl_FragCoord.y >= _float_0_0) ? 2 : 1);
#
#     for (; (i != _int_1) && (i < _int_5); i++)
#     {
#         _GLF_color = vec4(_int_1, _int_0, _int_0, _int_1);
#     }
# }
SHADER fragment variant_fragment_shader SPIRV-ASM TARGET_ENV spv1.0
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 10
; Bound: 75
; Schema: 0
               OpCapability Shader
          %1 = OpExtInstImport "GLSL.std.450"
               OpMemoryModel Logical GLSL450
               OpEntryPoint Fragment %4 "main" %9 %28
               OpExecutionMode %4 OriginUpperLeft
               OpSource ESSL 310
               OpName %4 "main"
               OpName %9 "_GLF_color"
               OpName %14 "buf0"
               OpMemberName %14 0 "_GLF_uniform_int_values"
               OpName %16 ""
               OpName %25 "i"
               OpName %28 "gl_FragCoord"
               OpName %34 "buf1"
               OpMemberName %34 0 "_GLF_uniform_float_values"
               OpName %36 ""
               OpDecorate %9 Location 0
               OpDecorate %13 ArrayStride 16
               OpMemberDecorate %14 0 Offset 0
               OpDecorate %14 Block
               OpDecorate %16 DescriptorSet 0
               OpDecorate %16 Binding 0
               OpDecorate %28 BuiltIn FragCoord
               OpDecorate %33 ArrayStride 16
               OpMemberDecorate %34 0 Offset 0
               OpDecorate %34 Block
               OpDecorate %36 DescriptorSet 0
               OpDecorate %36 Binding 1
          %2 = OpTypeVoid
          %3 = OpTypeFunction %2
          %6 = OpTypeFloat 32
          %7 = OpTypeVector %6 4
          %8 = OpTypePointer Output %7
          %9 = OpVariable %8 Output
         %10 = OpTypeInt 32 1
         %11 = OpTypeInt 32 0
         %12 = OpConstant %11 3
         %13 = OpTypeArray %10 %12
         %14 = OpTypeStruct %13
         %15 = OpTypePointer Uniform %14
         %16 = OpVariable %15 Uniform
         %17 = OpConstant %10 0
         %18 = OpConstant %10 2
         %19 = OpTypePointer Uniform %10
         %24 = OpTypePointer Function %10
         %26 = OpConstant %10 1
         %27 = OpTypePointer Input %7
         %28 = OpVariable %27 Input
         %29 = OpConstant %11 1
         %30 = OpTypePointer Input %6
         %33 = OpTypeArray %6 %29
         %34 = OpTypeStruct %33
         %35 = OpTypePointer Uniform %34
         %36 = OpVariable %35 Uniform
         %37 = OpTypePointer Uniform %6
         %40 = OpTypeBool
          %4 = OpFunction %2 None %3
          %5 = OpLabel
         %25 = OpVariable %24 Function
         %20 = OpAccessChain %19 %16 %17 %18
         %21 = OpLoad %10 %20
         %22 = OpConvertSToF %6 %21
         %23 = OpCompositeConstruct %7 %22 %22 %22 %22
               OpStore %9 %23
         %31 = OpAccessChain %30 %28 %29
         %32 = OpLoad %6 %31
         %38 = OpAccessChain %37 %36 %17 %17
         %39 = OpLoad %6 %38
         %41 = OpFOrdGreaterThanEqual %40 %32 %39
         %42 = OpSelect %10 %41 %18 %26
         %43 = OpShiftLeftLogical %10 %26 %42
               OpStore %25 %43
               OpBranch %44
         %44 = OpLabel
               OpLoopMerge %46 %47 None
               OpBranch %48
         %48 = OpLabel
         %49 = OpLoad %10 %25
         %50 = OpAccessChain %19 %16 %17 %17
         %51 = OpLoad %10 %50
         %52 = OpINotEqual %40 %49 %51
               OpSelectionMerge %54 None
               OpBranchConditional %52 %53 %54
         %53 = OpLabel
         %55 = OpLoad %10 %25
         %56 = OpAccessChain %19 %16 %17 %26
         %57 = OpLoad %10 %56
         %58 = OpSLessThan %40 %55 %57
               OpBranch %54
         %54 = OpLabel
         %59 = OpPhi %40 %52 %48 %58 %53
               OpBranchConditional %59 %45 %46
         %45 = OpLabel
         %60 = OpAccessChain %19 %16 %17 %17
         %61 = OpLoad %10 %60
         %62 = OpConvertSToF %6 %61
         %63 = OpAccessChain %19 %16 %17 %18
         %64 = OpLoad %10 %63
         %65 = OpConvertSToF %6 %64
         %66 = OpAccessChain %19 %16 %17 %18
         %67 = OpLoad %10 %66
         %68 = OpConvertSToF %6 %67
         %69 = OpAccessChain %19 %16 %17 %17
         %70 = OpLoad %10 %69
         %71 = OpConvertSToF %6 %70
         %72 = OpCompositeConstruct %7 %62 %65 %68 %71
               OpStore %9 %72
               OpBranch %47
         %47 = OpLabel
         %73 = OpLoad %10 %25
         %74 = OpIAdd %10 %73 %26
               OpStore %25 %74
               OpBranch %44
         %46 = OpLabel
               OpReturn
               OpFunctionEnd
END

# uniforms for variant

# _GLF_uniform_float_values
BUFFER variant__GLF_uniform_float_values DATA_TYPE float[] STD140 DATA
 0.0
END
# _GLF_uniform_int_values
BUFFER variant__GLF_uniform_int_values DATA_TYPE int32[] STD140 DATA
 1 5 0
END

BUFFER variant_framebuffer FORMAT B8G8R8A8_UNORM

PIPELINE graphics variant_pipeline
  ATTACH variant_vertex_shader
  ATTACH variant_fragment_shader
  FRAMEBUFFER_SIZE 256 256
  BIND BUFFER variant_framebuffer AS color LOCATION 0
  BIND BUFFER variant__GLF_uniform_float_values AS uniform DESCRIPTOR_SET 0 BINDING 1
  BIND BUFFER variant__GLF_uniform_int_values AS uniform DESCRIPTOR_SET 0 BINDING 0
END
CLEAR_COLOR variant_pipeline 0 0 0 255

CLEAR variant_pipeline
RUN variant_pipeline DRAW_RECT POS 0 0 SIZE 256 256

EXPECT variant_framebuffer IDX 0 0 SIZE 256 256 EQ_RGBA 255 0 0 255
