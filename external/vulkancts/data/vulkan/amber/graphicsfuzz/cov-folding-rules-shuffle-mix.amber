#!amber

# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


# A test for a coverage-gap found by GraphicsFuzz.

# Short description: A fragment shader that covers a specific instruction folding path.

# The test passes because shader always writes red.

SHADER vertex variant_vertex_shader PASSTHROUGH

# variant_fragment_shader is derived from the following GLSL:
# #version 310 es
# precision highp float;
#
# layout(location = 0) out vec4 _GLF_color;
# layout(set = 0, binding = 0) uniform buf0
# {
#     vec2 threeandfour; // (3.0, 4.0)
# };
#
# void main()
# {
#     vec4 v = vec4(2, 3, 4, 5);
#     // mix returns (1.0, 6.0)
#     v.xy = mix(vec2(2, 6), vec2(1.0, threeandfour.y), bvec2(true, false));
#     if (v == vec4(1, 6, 4, 5))
#         _GLF_color = vec4(1, 0, 0, 1);
#     else
#         _GLF_color = vec4(0);
# }
SHADER fragment variant_fragment_shader SPIRV-ASM TARGET_ENV spv1.0
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 8
; Bound: 51
; Schema: 0
               OpCapability Shader
          %1 = OpExtInstImport "GLSL.std.450"
               OpMemoryModel Logical GLSL450
               OpEntryPoint Fragment %4 "main" %46
               OpExecutionMode %4 OriginUpperLeft
               OpSource ESSL 310
               OpName %4 "main"
               OpName %9 "v"
               OpName %19 "buf0"
               OpMemberName %19 0 "threeandfour"
               OpName %21 ""
               OpName %46 "_GLF_color"
               OpMemberDecorate %19 0 Offset 0
               OpDecorate %19 Block
               OpDecorate %21 DescriptorSet 0
               OpDecorate %21 Binding 0
               OpDecorate %46 Location 0
          %2 = OpTypeVoid
          %3 = OpTypeFunction %2
          %6 = OpTypeFloat 32
          %7 = OpTypeVector %6 4
          %8 = OpTypePointer Function %7
         %10 = OpConstant %6 2
         %11 = OpConstant %6 3
         %12 = OpConstant %6 4
         %13 = OpConstant %6 5
         %14 = OpConstantComposite %7 %10 %11 %12 %13
         %15 = OpTypeVector %6 2
         %16 = OpConstant %6 6
         %17 = OpConstantComposite %15 %10 %16
         %18 = OpConstant %6 1
         %19 = OpTypeStruct %15
         %20 = OpTypePointer Uniform %19
         %21 = OpVariable %20 Uniform
         %22 = OpTypeInt 32 1
         %23 = OpConstant %22 0
         %24 = OpTypeInt 32 0
         %25 = OpConstant %24 1
         %26 = OpTypePointer Uniform %6
         %30 = OpTypeBool
         %31 = OpTypeVector %30 2
         %32 = OpConstantTrue %30
         %33 = OpConstantFalse %30
         %34 = OpConstantComposite %31 %32 %33
         %39 = OpConstantComposite %7 %18 %16 %12 %13
         %40 = OpTypeVector %30 4
         %45 = OpTypePointer Output %7
         %46 = OpVariable %45 Output
         %47 = OpConstant %6 0
         %48 = OpConstantComposite %7 %18 %47 %47 %18
         %50 = OpConstantComposite %7 %47 %47 %47 %47
          %4 = OpFunction %2 None %3
          %5 = OpLabel
          %9 = OpVariable %8 Function
               OpStore %9 %14
         %27 = OpAccessChain %26 %21 %23 %25
         %28 = OpLoad %6 %27
         %29 = OpCompositeConstruct %15 %18 %28
         %35 = OpSelect %15 %34 %29 %17
         %36 = OpLoad %7 %9
         %37 = OpVectorShuffle %7 %36 %35 4 5 2 3
               OpStore %9 %37
         %38 = OpLoad %7 %9
         %41 = OpFOrdEqual %40 %38 %39
         %42 = OpAll %30 %41
               OpSelectionMerge %44 None
               OpBranchConditional %42 %43 %49
         %43 = OpLabel
               OpStore %46 %48
               OpBranch %44
         %49 = OpLabel
               OpStore %46 %50
               OpBranch %44
         %44 = OpLabel
               OpReturn
               OpFunctionEnd
END

# uniforms for variant

# threeandfour
BUFFER variant_threeandfour DATA_TYPE vec2<float> DATA
 3.0 4.0
END

BUFFER variant_framebuffer FORMAT B8G8R8A8_UNORM

PIPELINE graphics variant_pipeline
  ATTACH variant_vertex_shader
  ATTACH variant_fragment_shader
  FRAMEBUFFER_SIZE 256 256
  BIND BUFFER variant_framebuffer AS color LOCATION 0
  BIND BUFFER variant_threeandfour AS uniform DESCRIPTOR_SET 0 BINDING 0
END
CLEAR_COLOR variant_pipeline 0 0 0 255

CLEAR variant_pipeline
RUN variant_pipeline DRAW_RECT POS 0 0 SIZE 256 256

EXPECT variant_framebuffer IDX 0 0 SIZE 256 256 EQ_RGBA 255 0 0 255
