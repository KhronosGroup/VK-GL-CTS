#!amber

# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


# A test for a coverage-gap found by the GraphicsFuzz project.

# Short description: A fragment shader that covers specific NIR code paths

# The test passes because the shader always writes red.

SHADER vertex variant_vertex_shader PASSTHROUGH

# variant_fragment_shader is derived from the following GLSL:
# #version 320 es
# #define _int_0 _GLF_uniform_int_values[0]
# #define _int_10 _GLF_uniform_int_values[1]
# #define _int_1 _GLF_uniform_int_values[2]
# #define _int_2 _GLF_uniform_int_values[3]
#
# precision highp float;
# precision highp int;
#
# // Contents of _GLF_uniform_int_values: [0, 10, 1, 2]
# layout(set = 0, binding = 0) uniform buf0
# {
#     int _GLF_uniform_int_values[4];
# };
# layout(location = 0) out vec4 _GLF_color;
#
# void main()
# {
#     int a = _int_0;
#     int b = _int_10;
#     int c = _int_1;
#
#     // Loop iterates 10 times where a goes from 0 to 10
#     // during the loop, and c goes from 1 to 2 on the
#     // first iteration.
#     while (a < b)
#     {
#         a++;
#
#         // True for the first iteration.
#         if (c == _int_1)
#         {
#             c *= _int_2;
#         }
#         else if (true)
#         {
#             continue;
#         }
#     }
#
#     // Always true.
#     if (a == b && c == _int_2)
#     {
#         _GLF_color = vec4(_int_1, _int_0, _int_0, _int_1);
#     }
#     else
#     {
#         _GLF_color = vec4(_int_0);
#     }
# }
SHADER fragment variant_fragment_shader SPIRV-ASM TARGET_ENV spv1.0
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 10
; Bound: 88
; Schema: 0
               OpCapability Shader
          %1 = OpExtInstImport "GLSL.std.450"
               OpMemoryModel Logical GLSL450
               OpEntryPoint Fragment %4 "main" %69
               OpExecutionMode %4 OriginUpperLeft
               OpSource ESSL 320
               OpName %4 "main"
               OpName %8 "a"
               OpName %12 "buf0"
               OpMemberName %12 0 "_GLF_uniform_int_values"
               OpName %14 ""
               OpName %19 "b"
               OpName %23 "c"
               OpName %69 "_GLF_color"
               OpDecorate %11 ArrayStride 16
               OpMemberDecorate %12 0 Offset 0
               OpDecorate %12 Block
               OpDecorate %14 DescriptorSet 0
               OpDecorate %14 Binding 0
               OpDecorate %69 Location 0
          %2 = OpTypeVoid
          %3 = OpTypeFunction %2
          %6 = OpTypeInt 32 1
          %7 = OpTypePointer Function %6
          %9 = OpTypeInt 32 0
         %10 = OpConstant %9 4
         %11 = OpTypeArray %6 %10
         %12 = OpTypeStruct %11
         %13 = OpTypePointer Uniform %12
         %14 = OpVariable %13 Uniform
         %15 = OpConstant %6 0
         %16 = OpTypePointer Uniform %6
         %20 = OpConstant %6 1
         %24 = OpConstant %6 2
         %34 = OpTypeBool
         %44 = OpConstant %6 3
         %50 = OpConstantTrue %34
         %66 = OpTypeFloat 32
         %67 = OpTypeVector %66 4
         %68 = OpTypePointer Output %67
         %69 = OpVariable %68 Output
          %4 = OpFunction %2 None %3
          %5 = OpLabel
          %8 = OpVariable %7 Function
         %19 = OpVariable %7 Function
         %23 = OpVariable %7 Function
         %17 = OpAccessChain %16 %14 %15 %15
         %18 = OpLoad %6 %17
               OpStore %8 %18
         %21 = OpAccessChain %16 %14 %15 %20
         %22 = OpLoad %6 %21
               OpStore %19 %22
         %25 = OpAccessChain %16 %14 %15 %24
         %26 = OpLoad %6 %25
               OpStore %23 %26
               OpBranch %27
         %27 = OpLabel
               OpLoopMerge %29 %30 None
               OpBranch %31
         %31 = OpLabel
         %32 = OpLoad %6 %8
         %33 = OpLoad %6 %19
         %35 = OpSLessThan %34 %32 %33
               OpBranchConditional %35 %28 %29
         %28 = OpLabel
         %36 = OpLoad %6 %8
         %37 = OpIAdd %6 %36 %20
               OpStore %8 %37
         %38 = OpLoad %6 %23
         %39 = OpAccessChain %16 %14 %15 %24
         %40 = OpLoad %6 %39
         %41 = OpIEqual %34 %38 %40
               OpSelectionMerge %43 None
               OpBranchConditional %41 %42 %49
         %42 = OpLabel
         %45 = OpAccessChain %16 %14 %15 %44
         %46 = OpLoad %6 %45
         %47 = OpLoad %6 %23
         %48 = OpIMul %6 %47 %46
               OpStore %23 %48
               OpBranch %43
         %49 = OpLabel
               OpSelectionMerge %52 None
               OpBranchConditional %50 %51 %52
         %51 = OpLabel
               OpBranch %30
         %52 = OpLabel
               OpBranch %43
         %43 = OpLabel
               OpBranch %30
         %30 = OpLabel
               OpBranch %27
         %29 = OpLabel
         %54 = OpLoad %6 %8
         %55 = OpLoad %6 %19
         %56 = OpIEqual %34 %54 %55
               OpSelectionMerge %58 None
               OpBranchConditional %56 %57 %58
         %57 = OpLabel
         %59 = OpLoad %6 %23
         %60 = OpAccessChain %16 %14 %15 %44
         %61 = OpLoad %6 %60
         %62 = OpIEqual %34 %59 %61
               OpBranch %58
         %58 = OpLabel
         %63 = OpPhi %34 %56 %29 %62 %57
               OpSelectionMerge %65 None
               OpBranchConditional %63 %64 %83
         %64 = OpLabel
         %70 = OpAccessChain %16 %14 %15 %24
         %71 = OpLoad %6 %70
         %72 = OpConvertSToF %66 %71
         %73 = OpAccessChain %16 %14 %15 %15
         %74 = OpLoad %6 %73
         %75 = OpConvertSToF %66 %74
         %76 = OpAccessChain %16 %14 %15 %15
         %77 = OpLoad %6 %76
         %78 = OpConvertSToF %66 %77
         %79 = OpAccessChain %16 %14 %15 %24
         %80 = OpLoad %6 %79
         %81 = OpConvertSToF %66 %80
         %82 = OpCompositeConstruct %67 %72 %75 %78 %81
               OpStore %69 %82
               OpBranch %65
         %83 = OpLabel
         %84 = OpAccessChain %16 %14 %15 %15
         %85 = OpLoad %6 %84
         %86 = OpConvertSToF %66 %85
         %87 = OpCompositeConstruct %67 %86 %86 %86 %86
               OpStore %69 %87
               OpBranch %65
         %65 = OpLabel
               OpReturn
               OpFunctionEnd
END

# uniforms for variant

# _GLF_uniform_int_values
BUFFER variant__GLF_uniform_int_values DATA_TYPE int32[] STD140 DATA
 0 10 1 2
END

BUFFER variant_framebuffer FORMAT B8G8R8A8_UNORM

PIPELINE graphics variant_pipeline
  ATTACH variant_vertex_shader
  ATTACH variant_fragment_shader
  FRAMEBUFFER_SIZE 256 256
  BIND BUFFER variant_framebuffer AS color LOCATION 0
  BIND BUFFER variant__GLF_uniform_int_values AS uniform DESCRIPTOR_SET 0 BINDING 0
END
CLEAR_COLOR variant_pipeline 0 0 0 255

CLEAR variant_pipeline
RUN variant_pipeline DRAW_RECT POS 0 0 SIZE 256 256

EXPECT variant_framebuffer IDX 0 0 SIZE 256 256 EQ_RGBA 255 0 0 255
