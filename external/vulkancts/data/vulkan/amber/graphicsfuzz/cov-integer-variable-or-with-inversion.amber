#!amber

# Copyright 2022 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


# A test for a coverage-gap found by the GraphicsFuzz project.

# Short description: A fragment shader that covers specific LLVM code paths

# The test passes because the shader always writes red.

SHADER vertex variant_vertex_shader PASSTHROUGH

# variant_fragment_shader is derived from the following GLSL:
# #version 320 es
# #define _int_1 _GLF_uniform_int_values[0]
# #define _int_0 _GLF_uniform_int_values[1]
#
# precision highp float;
# precision highp int;
#
# // Contents of _GLF_uniform_int_values: [1, 0]
# layout(set = 0, binding = 0) uniform buf0
# {
#     int _GLF_uniform_int_values[2];
# };
#
# layout(location = 0) out vec4 _GLF_color;
#
# void main()
# {
#     int a = (int(gl_FragCoord.y) & 1) != 0 ? 0 : ~ 0;
#
#     // b becomes one: regardless of what a is, (a | ~a) always produces an integer with all bits on.
#     int b = _int_1 & (a | ~a);
#
#     // Always true.
#     if(b == _int_1)
#     {
#         _GLF_color = vec4(_int_1, _int_0, _int_0, _int_1);
#     }
#     else
#     {
#         _GLF_color = vec4(_int_0);
#     }
# }
SHADER fragment variant_fragment_shader SPIRV-ASM TARGET_ENV spv1.0
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 10
; Bound: 66
; Schema: 0
               OpCapability Shader
          %1 = OpExtInstImport "GLSL.std.450"
               OpMemoryModel Logical GLSL450
               OpEntryPoint Fragment %4 "main" %12 %47
               OpExecutionMode %4 OriginUpperLeft
               OpSource ESSL 320
               OpName %4 "main"
               OpName %8 "a"
               OpName %12 "gl_FragCoord"
               OpName %26 "b"
               OpName %29 "buf0"
               OpMemberName %29 0 "_GLF_uniform_int_values"
               OpName %31 ""
               OpName %47 "_GLF_color"
               OpDecorate %12 BuiltIn FragCoord
               OpDecorate %28 ArrayStride 16
               OpMemberDecorate %29 0 Offset 0
               OpDecorate %29 Block
               OpDecorate %31 DescriptorSet 0
               OpDecorate %31 Binding 0
               OpDecorate %47 Location 0
          %2 = OpTypeVoid
          %3 = OpTypeFunction %2
          %6 = OpTypeInt 32 1
          %7 = OpTypePointer Function %6
          %9 = OpTypeFloat 32
         %10 = OpTypeVector %9 4
         %11 = OpTypePointer Input %10
         %12 = OpVariable %11 Input
         %13 = OpTypeInt 32 0
         %14 = OpConstant %13 1
         %15 = OpTypePointer Input %9
         %19 = OpConstant %6 1
         %21 = OpConstant %6 0
         %22 = OpTypeBool
         %24 = OpConstant %6 -1
         %27 = OpConstant %13 2
         %28 = OpTypeArray %6 %27
         %29 = OpTypeStruct %28
         %30 = OpTypePointer Uniform %29
         %31 = OpVariable %30 Uniform
         %32 = OpTypePointer Uniform %6
         %46 = OpTypePointer Output %10
         %47 = OpVariable %46 Output
          %4 = OpFunction %2 None %3
          %5 = OpLabel
          %8 = OpVariable %7 Function
         %26 = OpVariable %7 Function
         %16 = OpAccessChain %15 %12 %14
         %17 = OpLoad %9 %16
         %18 = OpConvertFToS %6 %17
         %20 = OpBitwiseAnd %6 %18 %19
         %23 = OpINotEqual %22 %20 %21
         %25 = OpSelect %6 %23 %21 %24
               OpStore %8 %25
         %33 = OpAccessChain %32 %31 %21 %21
         %34 = OpLoad %6 %33
         %35 = OpLoad %6 %8
         %36 = OpLoad %6 %8
         %37 = OpNot %6 %36
         %38 = OpBitwiseOr %6 %35 %37
         %39 = OpBitwiseAnd %6 %34 %38
               OpStore %26 %39
         %40 = OpLoad %6 %26
         %41 = OpAccessChain %32 %31 %21 %21
         %42 = OpLoad %6 %41
         %43 = OpIEqual %22 %40 %42
               OpSelectionMerge %45 None
               OpBranchConditional %43 %44 %61
         %44 = OpLabel
         %48 = OpAccessChain %32 %31 %21 %21
         %49 = OpLoad %6 %48
         %50 = OpConvertSToF %9 %49
         %51 = OpAccessChain %32 %31 %21 %19
         %52 = OpLoad %6 %51
         %53 = OpConvertSToF %9 %52
         %54 = OpAccessChain %32 %31 %21 %19
         %55 = OpLoad %6 %54
         %56 = OpConvertSToF %9 %55
         %57 = OpAccessChain %32 %31 %21 %21
         %58 = OpLoad %6 %57
         %59 = OpConvertSToF %9 %58
         %60 = OpCompositeConstruct %10 %50 %53 %56 %59
               OpStore %47 %60
               OpBranch %45
         %61 = OpLabel
         %62 = OpAccessChain %32 %31 %21 %19
         %63 = OpLoad %6 %62
         %64 = OpConvertSToF %9 %63
         %65 = OpCompositeConstruct %10 %64 %64 %64 %64
               OpStore %47 %65
               OpBranch %45
         %45 = OpLabel
               OpReturn
               OpFunctionEnd
END

# uniforms for variant

# _GLF_uniform_int_values
BUFFER variant__GLF_uniform_int_values DATA_TYPE int32[] STD140 DATA
 1 0
END

BUFFER variant_framebuffer FORMAT B8G8R8A8_UNORM

PIPELINE graphics variant_pipeline
  ATTACH variant_vertex_shader
  ATTACH variant_fragment_shader
  FRAMEBUFFER_SIZE 32 32
  BIND BUFFER variant_framebuffer AS color LOCATION 0
  BIND BUFFER variant__GLF_uniform_int_values AS uniform DESCRIPTOR_SET 0 BINDING 0
END
CLEAR_COLOR variant_pipeline 0 0 0 255

CLEAR variant_pipeline
RUN variant_pipeline DRAW_RECT POS 0 0 SIZE 32 32

EXPECT variant_framebuffer IDX 0 0 SIZE 32 32 EQ_RGBA 255 0 0 255
