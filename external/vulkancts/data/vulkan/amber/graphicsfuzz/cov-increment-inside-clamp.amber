#!amber

# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


# A test for a coverage-gap found by GraphicsFuzz.

# Short description: A fragment shader that covers specific value tracking and simplification paths

# The test passes because the shader always writes red.

SHADER vertex variant_vertex_shader PASSTHROUGH

# variant_fragment_shader is derived from the following GLSL:
# #version 310 es
# precision highp float;
# precision highp int;
#
# layout(location = 0) out vec4 _GLF_color;
# layout(set = 0, binding = 0) uniform buf0
# {
#     int one;
# };
#
# void main()
# {
#     int a[3];
#     a[0] = 1;
#     a[1] = 2;
#     a[2] = 3;
#
#     int b = 0;
#     int c = a[one];
#
#     // Always true.
#     if(c > 1)
#     {
#         // This will be overwritten later.
#         _GLF_color = vec4(0, 1, 1, 0);
#         ++b;
#     }
#
#     // Increments a[2] to 4.
#     a[clamp(++b, 0, 2)]++;
#
#     if (a[2] == 4)
#         _GLF_color = vec4(1, 0, 0, 1);
#     else
#         _GLF_color = vec4(0);
# }
SHADER fragment variant_fragment_shader SPIRV-ASM TARGET_ENV spv1.0
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 8
; Bound: 59
; Schema: 0
               OpCapability Shader
          %1 = OpExtInstImport "GLSL.std.450"
               OpMemoryModel Logical GLSL450
               OpEntryPoint Fragment %4 "main" %38
               OpExecutionMode %4 OriginUpperLeft
               OpSource ESSL 310
               OpName %4 "main"
               OpName %11 "a"
               OpName %20 "b"
               OpName %21 "c"
               OpName %22 "buf0"
               OpMemberName %22 0 "one"
               OpName %24 ""
               OpName %38 "_GLF_color"
               OpMemberDecorate %22 0 Offset 0
               OpDecorate %22 Block
               OpDecorate %24 DescriptorSet 0
               OpDecorate %24 Binding 0
               OpDecorate %38 Location 0
          %2 = OpTypeVoid
          %3 = OpTypeFunction %2
          %6 = OpTypeInt 32 1
          %7 = OpTypeInt 32 0
          %8 = OpConstant %7 3
          %9 = OpTypeArray %6 %8
         %10 = OpTypePointer Function %9
         %12 = OpConstant %6 0
         %13 = OpConstant %6 1
         %14 = OpTypePointer Function %6
         %16 = OpConstant %6 2
         %18 = OpConstant %6 3
         %22 = OpTypeStruct %6
         %23 = OpTypePointer Uniform %22
         %24 = OpVariable %23 Uniform
         %25 = OpTypePointer Uniform %6
         %31 = OpTypeBool
         %35 = OpTypeFloat 32
         %36 = OpTypeVector %35 4
         %37 = OpTypePointer Output %36
         %38 = OpVariable %37 Output
         %39 = OpConstant %35 0
         %40 = OpConstant %35 1
         %41 = OpConstantComposite %36 %39 %40 %40 %39
         %52 = OpConstant %6 4
         %56 = OpConstantComposite %36 %40 %39 %39 %40
         %58 = OpConstantComposite %36 %39 %39 %39 %39
          %4 = OpFunction %2 None %3
          %5 = OpLabel
         %11 = OpVariable %10 Function
         %20 = OpVariable %14 Function
         %21 = OpVariable %14 Function
         %15 = OpAccessChain %14 %11 %12
               OpStore %15 %13
         %17 = OpAccessChain %14 %11 %13
               OpStore %17 %16
         %19 = OpAccessChain %14 %11 %16
               OpStore %19 %18
               OpStore %20 %12
         %26 = OpAccessChain %25 %24 %12
         %27 = OpLoad %6 %26
         %28 = OpAccessChain %14 %11 %27
         %29 = OpLoad %6 %28
               OpStore %21 %29
         %30 = OpLoad %6 %21
         %32 = OpSGreaterThan %31 %30 %13
               OpSelectionMerge %34 None
               OpBranchConditional %32 %33 %34
         %33 = OpLabel
               OpStore %38 %41
         %42 = OpLoad %6 %20
         %43 = OpIAdd %6 %42 %13
               OpStore %20 %43
               OpBranch %34
         %34 = OpLabel
         %44 = OpLoad %6 %20
         %45 = OpIAdd %6 %44 %13
               OpStore %20 %45
         %46 = OpExtInst %6 %1 SClamp %45 %12 %16
         %47 = OpAccessChain %14 %11 %46
         %48 = OpLoad %6 %47
         %49 = OpIAdd %6 %48 %13
               OpStore %47 %49
         %50 = OpAccessChain %14 %11 %16
         %51 = OpLoad %6 %50
         %53 = OpIEqual %31 %51 %52
               OpSelectionMerge %55 None
               OpBranchConditional %53 %54 %57
         %54 = OpLabel
               OpStore %38 %56
               OpBranch %55
         %57 = OpLabel
               OpStore %38 %58
               OpBranch %55
         %55 = OpLabel
               OpReturn
               OpFunctionEnd
END

# uniforms for variant

# one
BUFFER variant_one DATA_TYPE int32 DATA
 1
END

BUFFER variant_framebuffer FORMAT B8G8R8A8_UNORM

PIPELINE graphics variant_pipeline
  ATTACH variant_vertex_shader
  ATTACH variant_fragment_shader
  FRAMEBUFFER_SIZE 256 256
  BIND BUFFER variant_framebuffer AS color LOCATION 0
  BIND BUFFER variant_one AS uniform DESCRIPTOR_SET 0 BINDING 0
END
CLEAR_COLOR variant_pipeline 0 0 0 255

CLEAR variant_pipeline
RUN variant_pipeline DRAW_RECT POS 0 0 SIZE 256 256

EXPECT variant_framebuffer IDX 0 0 SIZE 256 256 EQ_RGBA 255 0 0 255
