#!amber

# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


# A test for a coverage-gap found by GraphicsFuzz.

# Short description: A fragment shader that covers a specific propagate array copy path.

# The test passes because shader always writes red.

SHADER vertex variant_vertex_shader PASSTHROUGH

# variant_fragment_shader is derived from the following GLSL:
# #version 310 es
# precision highp float;
#
# layout(location = 0) out vec4 _GLF_color;
#
# layout(set = 0, binding = 0) uniform buf0
# {
#     int zero;
# };
#
# struct Array {
#     int values[2];
# };
#
# void main()
# {
#     Array a;
#     a.values[zero] = 1;
#     Array b = a;
#     float one = 0.0;
#     // If condition is always true
#     if(b.values[zero] == 1)
#         one = 1.0;
#     _GLF_color = vec4(one, 0, 0, 1);
# }
SHADER fragment variant_fragment_shader SPIRV-ASM TARGET_ENV spv1.0
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 8
; Bound: 43
; Schema: 0
               OpCapability Shader
          %1 = OpExtInstImport "GLSL.std.450"
               OpMemoryModel Logical GLSL450
               OpEntryPoint Fragment %4 "main" %40
               OpExecutionMode %4 OriginUpperLeft
               OpSource ESSL 310
               OpName %4 "main"
               OpName %10 "Array"
               OpMemberName %10 0 "values"
               OpName %12 "a"
               OpName %14 "buf0"
               OpMemberName %14 0 "zero"
               OpName %16 ""
               OpName %23 "b"
               OpName %27 "one"
               OpName %40 "_GLF_color"
               OpMemberDecorate %10 0 RelaxedPrecision
               OpMemberDecorate %14 0 RelaxedPrecision
               OpMemberDecorate %14 0 Offset 0
               OpDecorate %14 Block
               OpDecorate %16 DescriptorSet 0
               OpDecorate %16 Binding 0
               OpDecorate %19 RelaxedPrecision
               OpDecorate %30 RelaxedPrecision
               OpDecorate %32 RelaxedPrecision
               OpDecorate %40 Location 0
          %2 = OpTypeVoid
          %3 = OpTypeFunction %2
          %6 = OpTypeInt 32 1
          %7 = OpTypeInt 32 0
          %8 = OpConstant %7 2
          %9 = OpTypeArray %6 %8
         %10 = OpTypeStruct %9
         %11 = OpTypePointer Function %10
         %13 = OpConstant %6 0
         %14 = OpTypeStruct %6
         %15 = OpTypePointer Uniform %14
         %16 = OpVariable %15 Uniform
         %17 = OpTypePointer Uniform %6
         %20 = OpConstant %6 1
         %21 = OpTypePointer Function %6
         %25 = OpTypeFloat 32
         %26 = OpTypePointer Function %25
         %28 = OpConstant %25 0
         %33 = OpTypeBool
         %37 = OpConstant %25 1
         %38 = OpTypeVector %25 4
         %39 = OpTypePointer Output %38
         %40 = OpVariable %39 Output
          %4 = OpFunction %2 None %3
          %5 = OpLabel
         %12 = OpVariable %11 Function
         %23 = OpVariable %11 Function
         %27 = OpVariable %26 Function
         %18 = OpAccessChain %17 %16 %13
         %19 = OpLoad %6 %18
         %22 = OpAccessChain %21 %12 %13 %19
               OpStore %22 %20
         %24 = OpLoad %10 %12
               OpStore %23 %24
               OpStore %27 %28
         %29 = OpAccessChain %17 %16 %13
         %30 = OpLoad %6 %29
         %31 = OpAccessChain %21 %23 %13 %30
         %32 = OpLoad %6 %31
         %34 = OpIEqual %33 %32 %20
               OpSelectionMerge %36 None
               OpBranchConditional %34 %35 %36
         %35 = OpLabel
               OpStore %27 %37
               OpBranch %36
         %36 = OpLabel
         %41 = OpLoad %25 %27
         %42 = OpCompositeConstruct %38 %41 %28 %28 %37
               OpStore %40 %42
               OpReturn
               OpFunctionEnd
END

# uniforms for variant

# zero
BUFFER variant_zero DATA_TYPE int32 DATA
 0
END

BUFFER variant_framebuffer FORMAT B8G8R8A8_UNORM

PIPELINE graphics variant_pipeline
  ATTACH variant_vertex_shader
  ATTACH variant_fragment_shader
  FRAMEBUFFER_SIZE 256 256
  BIND BUFFER variant_framebuffer AS color LOCATION 0
  BIND BUFFER variant_zero AS uniform DESCRIPTOR_SET 0 BINDING 0
END
CLEAR_COLOR variant_pipeline 0 0 0 255

CLEAR variant_pipeline
RUN variant_pipeline DRAW_RECT POS 0 0 SIZE 256 256

EXPECT variant_framebuffer IDX 0 0 SIZE 256 256 EQ_RGBA 255 0 0 255
