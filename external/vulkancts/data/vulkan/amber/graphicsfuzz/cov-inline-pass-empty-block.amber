#!amber

# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


# A test for a coverage-gap found by GraphicsFuzz.

# Short description: A fragment shader that covers a specific inlining optimization path.

# The test passes because shader always writes red.

# Optimized using spirv-opt with the following arguments:
# '--reduce-load-size'
# '--convert-local-access-chains'
# '--eliminate-local-single-store'
# '--simplify-instructions'
# '--combine-access-chains'
# '--eliminate-dead-branches'
# '--merge-blocks'
# '--convert-local-access-chains'
# '--convert-local-access-chains'
# spirv-opt commit hash: 9215c1b7df0029f27807e8c8d7ec80532ce90a87



SHADER vertex variant_vertex_shader PASSTHROUGH

# variant_fragment_shader is derived from the following GLSL:
# #version 310 es
# precision highp float;
#
# layout(location = 0) out vec4 _GLF_color;
#
# vec4 func()
# {
#     float x = 1.0;
#
#     // Always false.
#     if (gl_FragCoord.x < 0.0)
#         x = 0.5;
#
#     return vec4(x, 0, 0, 1);
# }
#
# void main()
# {
#     _GLF_color = vec4(0);
#
#     do
#     {
#         _GLF_color = func();
#     }
#     while (false);
# }
SHADER fragment variant_fragment_shader SPIRV-ASM TARGET_ENV spv1.0
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 8
; Bound: 40
; Schema: 0
               OpCapability Shader
          %1 = OpExtInstImport "GLSL.std.450"
               OpMemoryModel Logical GLSL450
               OpEntryPoint Fragment %4 "main" %15 %32
               OpExecutionMode %4 OriginUpperLeft
               OpSource ESSL 310
               OpName %4 "main"
               OpName %9 "func("
               OpName %12 "x"
               OpName %15 "gl_FragCoord"
               OpName %32 "_GLF_color"
               OpDecorate %15 BuiltIn FragCoord
               OpDecorate %32 Location 0
          %2 = OpTypeVoid
          %3 = OpTypeFunction %2
          %6 = OpTypeFloat 32
          %7 = OpTypeVector %6 4
          %8 = OpTypeFunction %7
         %11 = OpTypePointer Function %6
         %13 = OpConstant %6 1
         %14 = OpTypePointer Input %7
         %15 = OpVariable %14 Input
         %16 = OpTypeInt 32 0
         %17 = OpConstant %16 0
         %18 = OpTypePointer Input %6
         %21 = OpConstant %6 0
         %22 = OpTypeBool
         %26 = OpConstant %6 0.5
         %31 = OpTypePointer Output %7
         %32 = OpVariable %31 Output
         %33 = OpConstantComposite %7 %21 %21 %21 %21
         %39 = OpConstantFalse %22
          %4 = OpFunction %2 None %3
          %5 = OpLabel
               OpStore %32 %33
               OpBranch %34
         %34 = OpLabel
         %38 = OpFunctionCall %7 %9
               OpStore %32 %38
               OpLoopMerge %36 %34 None
               OpBranchConditional %39 %34 %36
         %36 = OpLabel
               OpReturn
               OpFunctionEnd
          %9 = OpFunction %7 None %8
         %10 = OpLabel
         %12 = OpVariable %11 Function
               OpStore %12 %13
         %19 = OpAccessChain %18 %15 %17
         %20 = OpLoad %6 %19
         %23 = OpFOrdLessThan %22 %20 %21
               OpSelectionMerge %25 None
               OpBranchConditional %23 %24 %25
         %24 = OpLabel
               OpStore %12 %26
               OpBranch %25
         %25 = OpLabel
         %27 = OpLoad %6 %12
         %28 = OpCompositeConstruct %7 %27 %21 %21 %13
               OpReturnValue %28
               OpFunctionEnd
END


BUFFER variant_framebuffer FORMAT B8G8R8A8_UNORM

PIPELINE graphics variant_pipeline
  ATTACH variant_vertex_shader
  ATTACH variant_fragment_shader
  FRAMEBUFFER_SIZE 256 256
  BIND BUFFER variant_framebuffer AS color LOCATION 0
END
CLEAR_COLOR variant_pipeline 0 0 0 255

CLEAR variant_pipeline
RUN variant_pipeline DRAW_RECT POS 0 0 SIZE 256 256

EXPECT variant_framebuffer IDX 0 0 SIZE 256 256 EQ_RGBA 255 0 0 255
