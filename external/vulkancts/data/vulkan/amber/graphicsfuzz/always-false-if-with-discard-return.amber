#!amber

# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

DEVICE_EXTENSION VK_KHR_shader_terminate_invocation

# A test for a bug found by GraphicsFuzz.

# Short description: A fragment shader with discard keyword and a return

# The test passes because main always writes the color red; the discard statement is unreachable.

SHADER vertex variant_vertex_shader PASSTHROUGH

# variant_fragment_shader is derived from the following GLSL:
# #version 310 es
# precision highp float;
#
# layout(location = 0) out vec4 _GLF_color;
# layout(set = 0, binding = 0) uniform buf0
# {
#     vec2 injectionSwitch;
# };
#
# vec3 drawShape()
# {
#     discard;
#     return vec3(1.0);
# }
# vec3 computePoint()
# {
#     drawShape();
#     return vec3(1.0);
# }
# void main()
# {
#     if (injectionSwitch.x > injectionSwitch.y) // always false
#     {
#         drawShape();
#         computePoint();
#     }
#
#     _GLF_color = vec4(1.0, 0.0, 0.0, 1.0);
# }
SHADER fragment variant_fragment_shader SPIRV-ASM TARGET_ENV spv1.0
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 7
; Bound: 46
; Schema: 0
               OpCapability Shader
               OpExtension "SPV_KHR_terminate_invocation"
          %1 = OpExtInstImport "GLSL.std.450"
               OpMemoryModel Logical GLSL450
               OpEntryPoint Fragment %4 "main" %43
               OpExecutionMode %4 OriginUpperLeft
               OpSource ESSL 310
               OpName %4 "main"
               OpName %9 "drawShape("
               OpName %11 "computePoint("
               OpName %22 "buf0"
               OpMemberName %22 0 "injectionSwitch"
               OpName %24 ""
               OpName %43 "_GLF_color"
               OpMemberDecorate %22 0 Offset 0
               OpDecorate %22 Block
               OpDecorate %24 DescriptorSet 0
               OpDecorate %24 Binding 0
               OpDecorate %43 Location 0
          %2 = OpTypeVoid
          %3 = OpTypeFunction %2
          %6 = OpTypeFloat 32
          %7 = OpTypeVector %6 3
          %8 = OpTypeFunction %7
         %14 = OpConstant %6 1
         %15 = OpConstantComposite %7 %14 %14 %14
         %21 = OpTypeVector %6 2
         %22 = OpTypeStruct %21
         %23 = OpTypePointer Uniform %22
         %24 = OpVariable %23 Uniform
         %25 = OpTypeInt 32 1
         %26 = OpConstant %25 0
         %27 = OpTypeInt 32 0
         %28 = OpConstant %27 0
         %29 = OpTypePointer Uniform %6
         %32 = OpConstant %27 1
         %35 = OpTypeBool
         %41 = OpTypeVector %6 4
         %42 = OpTypePointer Output %41
         %43 = OpVariable %42 Output
         %44 = OpConstant %6 0
         %45 = OpConstantComposite %41 %14 %44 %44 %14
          %4 = OpFunction %2 None %3
          %5 = OpLabel
         %30 = OpAccessChain %29 %24 %26 %28
         %31 = OpLoad %6 %30
         %33 = OpAccessChain %29 %24 %26 %32
         %34 = OpLoad %6 %33
         %36 = OpFOrdGreaterThan %35 %31 %34
               OpSelectionMerge %38 None
               OpBranchConditional %36 %37 %38
         %37 = OpLabel
         %39 = OpFunctionCall %7 %9
         %40 = OpFunctionCall %7 %11
               OpBranch %38
         %38 = OpLabel
               OpStore %43 %45
               OpReturn
               OpFunctionEnd
          %9 = OpFunction %7 None %8
         %10 = OpLabel
               OpTerminateInvocation
               OpFunctionEnd
         %11 = OpFunction %7 None %8
         %12 = OpLabel
         %18 = OpFunctionCall %7 %9
               OpReturnValue %15
               OpFunctionEnd
END

# uniforms for variant

# injectionSwitch
BUFFER variant_injectionSwitch DATA_TYPE vec2<float> DATA
 0.0 1.0
END

BUFFER variant_framebuffer FORMAT B8G8R8A8_UNORM

PIPELINE graphics variant_pipeline
  ATTACH variant_vertex_shader
  ATTACH variant_fragment_shader
  FRAMEBUFFER_SIZE 256 256
  BIND BUFFER variant_framebuffer AS color LOCATION 0
  BIND BUFFER variant_injectionSwitch AS uniform DESCRIPTOR_SET 0 BINDING 0
END
CLEAR_COLOR variant_pipeline 0 0 0 255

CLEAR variant_pipeline
RUN variant_pipeline DRAW_RECT POS 0 0 SIZE 256 256

EXPECT variant_framebuffer IDX 0 0 SIZE 256 256 EQ_RGBA 255 0 0 255
