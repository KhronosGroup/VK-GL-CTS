#!amber

# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


# A test for a coverage-gap found by GraphicsFuzz.

# Short description: A fragment shader that covers a specific const folding rule path.

# The test passes because shader always writes red.

SHADER vertex variant_vertex_shader PASSTHROUGH

# variant_fragment_shader is derived from the following GLSL:
# #version 310 es
# precision highp float;
#
# layout(location = 0) out vec4 _GLF_color;
#
# void main()
# {
#     // If condition is always false.
#     if (
#         clamp(
#             vec4(3000.0, 1.0, 8.0, 4.0),
#             vec4(2.0, 3.0, determinant(mat2(2.0, 0.0, 0.0, 2.0)), 5.0), // min = (2, 3, 4, 5)
#             vec4(6.0)                                                   // max = (6, 6, 6, 6)
#             ) != vec4(6, 3, 6, 5)
#        )
#         _GLF_color = vec4(0);
#     else
#         _GLF_color = vec4(1, 0, 0, 1);
# }
SHADER fragment variant_fragment_shader SPIRV-ASM TARGET_ENV spv1.0
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 8
; Bound: 39
; Schema: 0
               OpCapability Shader
          %1 = OpExtInstImport "GLSL.std.450"
               OpMemoryModel Logical GLSL450
               OpEntryPoint Fragment %4 "main" %35
               OpExecutionMode %4 OriginUpperLeft
               OpSource ESSL 310
               OpName %4 "main"
               OpName %35 "_GLF_color"
               OpDecorate %35 Location 0
          %2 = OpTypeVoid
          %3 = OpTypeFunction %2
          %6 = OpTypeFloat 32
          %7 = OpTypeVector %6 4
          %8 = OpConstant %6 3000
          %9 = OpConstant %6 1
         %10 = OpConstant %6 8
         %11 = OpConstant %6 4
         %12 = OpConstantComposite %7 %8 %9 %10 %11
         %13 = OpConstant %6 2
         %14 = OpConstant %6 3
         %15 = OpTypeVector %6 2
         %16 = OpTypeMatrix %15 2
         %17 = OpConstant %6 0
         %18 = OpConstantComposite %15 %13 %17
         %19 = OpConstantComposite %15 %17 %13
         %20 = OpConstantComposite %16 %18 %19
         %22 = OpConstant %6 5
         %24 = OpConstant %6 6
         %25 = OpConstantComposite %7 %24 %24 %24 %24
         %27 = OpConstantComposite %7 %24 %14 %24 %22
         %28 = OpTypeBool
         %29 = OpTypeVector %28 4
         %34 = OpTypePointer Output %7
         %35 = OpVariable %34 Output
         %36 = OpConstantComposite %7 %17 %17 %17 %17
         %38 = OpConstantComposite %7 %9 %17 %17 %9
          %4 = OpFunction %2 None %3
          %5 = OpLabel
         %21 = OpExtInst %6 %1 Determinant %20
         %23 = OpCompositeConstruct %7 %13 %14 %21 %22
         %26 = OpExtInst %7 %1 FClamp %12 %23 %25
         %30 = OpFOrdNotEqual %29 %26 %27
         %31 = OpAny %28 %30
               OpSelectionMerge %33 None
               OpBranchConditional %31 %32 %37
         %32 = OpLabel
               OpStore %35 %36
               OpBranch %33
         %37 = OpLabel
               OpStore %35 %38
               OpBranch %33
         %33 = OpLabel
               OpReturn
               OpFunctionEnd
END


BUFFER variant_framebuffer FORMAT B8G8R8A8_UNORM

PIPELINE graphics variant_pipeline
  ATTACH variant_vertex_shader
  ATTACH variant_fragment_shader
  FRAMEBUFFER_SIZE 256 256
  BIND BUFFER variant_framebuffer AS color LOCATION 0
END
CLEAR_COLOR variant_pipeline 0 0 0 255

CLEAR variant_pipeline
RUN variant_pipeline DRAW_RECT POS 0 0 SIZE 256 256

EXPECT variant_framebuffer IDX 0 0 SIZE 256 256 EQ_RGBA 255 0 0 255
