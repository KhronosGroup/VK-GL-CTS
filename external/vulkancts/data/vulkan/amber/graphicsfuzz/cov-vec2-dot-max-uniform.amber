#!amber

# Copyright 2022 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


# A test for a coverage-gap found by the GraphicsFuzz project.

# Short description: A fragment shader that covers specific LLVM code paths

# The test passes because the shader always writes red.

# Optimized using spirv-opt with the following arguments:
# '--eliminate-local-single-store'
# '--convert-local-access-chains'
# '--if-conversion'
# '--eliminate-local-single-block'
# '--simplify-instructions'
# '--inline-entry-points-exhaustive'
# '--private-to-local'
# '--convert-local-access-chains'
# '--eliminate-dead-branches'
# '--merge-return'
# '--combine-access-chains'
# '--reduce-load-size'
# '--reduce-load-size'
# '--combine-access-chains'
# '--vector-dce'
# '--eliminate-dead-branches'
# '--redundancy-elimination'
# '--inline-entry-points-exhaustive'
# '--eliminate-dead-branches'
# '--merge-blocks'
# '--eliminate-dead-branches'
# '--eliminate-local-single-block'
# '--inline-entry-points-exhaustive'
# '--if-conversion'
# spirv-opt commit hash: a0370efd589be33d5d9a85cfde2f85841b3755af



SHADER vertex variant_vertex_shader PASSTHROUGH

# variant_fragment_shader is derived from the following GLSL:
# #version 320 es
# #define _int_3 _GLF_uniform_int_values[0]
# #define _int_1 _GLF_uniform_int_values[1]
# #define _int_0 _GLF_uniform_int_values[2]
#
# precision highp float;
# precision highp int;
#
# // Contents of _GLF_uniform_int_values: [3, 1, 0]
# layout(set = 0, binding = 0) uniform buf0 {
#     int _GLF_uniform_int_values[3];
# };
# layout(location = 0) out vec4 _GLF_color;
#
# void main()
# {
#     // f = (0, 1) * max((1, 1), (2, 3)) = (0, 1) * (2, 3) = 0 * 2 + 1 * 3 = 3
#     float f = dot(vec2(0, 1), max(vec2(_int_1, 1), vec2(2, 3)));
#
#     // Always true.
#     if(int(f) == _int_3)
#     {
#         _GLF_color = vec4(_int_1, _int_0, _int_0, _int_1);
#     }
#     else
#     {
#         _GLF_color = vec4(0);
#     }
# }
SHADER fragment variant_fragment_shader SPIRV-ASM TARGET_ENV spv1.0
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 10
; Bound: 60
; Schema: 0
               OpCapability Shader
          %1 = OpExtInstImport "GLSL.std.450"
               OpMemoryModel Logical GLSL450
               OpEntryPoint Fragment %4 "main" %42
               OpExecutionMode %4 OriginUpperLeft
               OpSource ESSL 320
               OpName %4 "main"
               OpName %8 "f"
               OpName %17 "buf0"
               OpMemberName %17 0 "_GLF_uniform_int_values"
               OpName %19 ""
               OpName %42 "_GLF_color"
               OpDecorate %16 ArrayStride 16
               OpMemberDecorate %17 0 Offset 0
               OpDecorate %17 Block
               OpDecorate %19 DescriptorSet 0
               OpDecorate %19 Binding 0
               OpDecorate %42 Location 0
          %2 = OpTypeVoid
          %3 = OpTypeFunction %2
          %6 = OpTypeFloat 32
          %7 = OpTypePointer Function %6
          %9 = OpTypeVector %6 2
         %10 = OpConstant %6 0
         %11 = OpConstant %6 1
         %12 = OpConstantComposite %9 %10 %11
         %13 = OpTypeInt 32 1
         %14 = OpTypeInt 32 0
         %15 = OpConstant %14 3
         %16 = OpTypeArray %13 %15
         %17 = OpTypeStruct %16
         %18 = OpTypePointer Uniform %17
         %19 = OpVariable %18 Uniform
         %20 = OpConstant %13 0
         %21 = OpConstant %13 1
         %22 = OpTypePointer Uniform %13
         %27 = OpConstant %6 2
         %28 = OpConstant %6 3
         %29 = OpConstantComposite %9 %27 %28
         %36 = OpTypeBool
         %40 = OpTypeVector %6 4
         %41 = OpTypePointer Output %40
         %42 = OpVariable %41 Output
         %46 = OpConstant %13 2
         %58 = OpConstantComposite %40 %10 %10 %10 %10
         %59 = OpUndef %6
          %4 = OpFunction %2 None %3
          %5 = OpLabel
          %8 = OpVariable %7 Function
         %23 = OpAccessChain %22 %19 %20 %21
         %24 = OpLoad %13 %23
         %26 = OpCompositeConstruct %9 %59 %11
         %30 = OpExtInst %9 %1 FMax %26 %29
         %31 = OpCompositeExtract %6 %30 1
               OpStore %8 %31
         %33 = OpConvertFToS %13 %31
         %34 = OpAccessChain %22 %19 %20 %20
         %35 = OpLoad %13 %34
         %37 = OpIEqual %36 %33 %35
               OpSelectionMerge %39 None
               OpBranchConditional %37 %38 %57
         %38 = OpLabel
         %45 = OpConvertSToF %6 %24
         %47 = OpAccessChain %22 %19 %20 %46
         %48 = OpLoad %13 %47
         %49 = OpConvertSToF %6 %48
         %56 = OpCompositeConstruct %40 %45 %49 %49 %45
               OpStore %42 %56
               OpBranch %39
         %57 = OpLabel
               OpStore %42 %58
               OpBranch %39
         %39 = OpLabel
               OpReturn
               OpFunctionEnd
END

# uniforms for variant

# _GLF_uniform_int_values
BUFFER variant__GLF_uniform_int_values DATA_TYPE int32[] STD140 DATA
 3 1 0
END

BUFFER variant_framebuffer FORMAT B8G8R8A8_UNORM

PIPELINE graphics variant_pipeline
  ATTACH variant_vertex_shader
  ATTACH variant_fragment_shader
  FRAMEBUFFER_SIZE 32 32
  BIND BUFFER variant_framebuffer AS color LOCATION 0
  BIND BUFFER variant__GLF_uniform_int_values AS uniform DESCRIPTOR_SET 0 BINDING 0
END
CLEAR_COLOR variant_pipeline 0 0 0 255

CLEAR variant_pipeline
RUN variant_pipeline DRAW_RECT POS 0 0 SIZE 32 32

EXPECT variant_framebuffer IDX 0 0 SIZE 32 32 EQ_RGBA 255 0 0 255
