#!amber

# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

DEVICE_EXTENSION VK_KHR_shader_terminate_invocation

# A test for a coverage-gap found by the GraphicsFuzz project.

# Short description: A fragment shader that covers specific NIR code paths

# The test passes because the shader always writes red.

# Optimized using spirv-opt with the following arguments:
# '--eliminate-dead-branches'
# '--eliminate-local-multi-store'
# '--eliminate-local-single-store'
# '--simplify-instructions'
# '--eliminate-dead-branches'
# '--copy-propagate-arrays'
# '--copy-propagate-arrays'
# '--eliminate-dead-inserts'
# '--vector-dce'
# '--vector-dce'
# '--inline-entry-points-exhaustive'
# '--eliminate-local-single-store'
# '--eliminate-local-single-store'
# '--simplify-instructions'
# '--eliminate-local-single-block'
# '--ccp'
# '--private-to-local'
# '--scalar-replacement=100'
# '--eliminate-local-single-block'
# '--private-to-local'
# '--scalar-replacement=100'
# '--simplify-instructions'
# '--eliminate-dead-branches'
# '--merge-blocks'
# spirv-opt commit hash: a0370efd589be33d5d9a85cfde2f85841b3755af



SHADER vertex variant_vertex_shader PASSTHROUGH

# variant_fragment_shader is derived from the following GLSL:
# #version 320 es
# #define _float_1_0 _GLF_uniform_float_values[0]
# #define _float_2_0 _GLF_uniform_float_values[1]
#
# precision highp float;
# precision highp int;
#
# // Contents of _GLF_uniform_float_values: [1.0, 2.0]
# layout(set = 0, binding = 0) uniform buf0
# {
#     float _GLF_uniform_float_values[2];
# };
#
# layout(location = 0) out vec4 _GLF_color;
#
# // Contents of zero: 0.0
# layout(set = 0, binding = 1) uniform buf1
# {
#     float zero;
# };
#
# void main()
# {
#     vec2 v0 = vec2(_float_1_0);
#     vec4 v1 = vec4(v0.x);
#
#     // Always true.
#     if(zero != _float_1_0)
#     {
#         // Always false.
#         if(zero == _float_2_0)
#         {
#             return;
#         }
#         v1.yz -= _float_1_0;
#     }
#     else
#     {
#         discard;
#     }
#
#     _GLF_color = v1;
# }
SHADER fragment variant_fragment_shader SPIRV-ASM TARGET_ENV spv1.0
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 10
; Bound: 62
; Schema: 0
               OpCapability Shader
               OpExtension "SPV_KHR_terminate_invocation"
          %1 = OpExtInstImport "GLSL.std.450"
               OpMemoryModel Logical GLSL450
               OpEntryPoint Fragment %4 "main" %61
               OpExecutionMode %4 OriginUpperLeft
               OpSource ESSL 320
               OpName %4 "main"
               OpName %9 "v0"
               OpName %13 "buf0"
               OpMemberName %13 0 "_GLF_uniform_float_values"
               OpName %15 ""
               OpName %24 "v1"
               OpName %30 "buf1"
               OpMemberName %30 0 "zero"
               OpName %32 ""
               OpName %61 "_GLF_color"
               OpDecorate %12 ArrayStride 16
               OpMemberDecorate %13 0 Offset 0
               OpDecorate %13 Block
               OpDecorate %15 DescriptorSet 0
               OpDecorate %15 Binding 0
               OpMemberDecorate %30 0 Offset 0
               OpDecorate %30 Block
               OpDecorate %32 DescriptorSet 0
               OpDecorate %32 Binding 1
               OpDecorate %61 Location 0
          %2 = OpTypeVoid
          %3 = OpTypeFunction %2
          %6 = OpTypeFloat 32
          %7 = OpTypeVector %6 2
          %8 = OpTypePointer Function %7
         %10 = OpTypeInt 32 0
         %11 = OpConstant %10 2
         %12 = OpTypeArray %6 %11
         %13 = OpTypeStruct %12
         %14 = OpTypePointer Uniform %13
         %15 = OpVariable %14 Uniform
         %16 = OpTypeInt 32 1
         %17 = OpConstant %16 0
         %18 = OpTypePointer Uniform %6
         %22 = OpTypeVector %6 4
         %23 = OpTypePointer Function %22
         %25 = OpConstant %10 0
         %26 = OpTypePointer Function %6
         %30 = OpTypeStruct %6
         %31 = OpTypePointer Uniform %30
         %32 = OpVariable %31 Uniform
         %37 = OpTypeBool
         %43 = OpConstant %16 1
         %60 = OpTypePointer Output %22
         %61 = OpVariable %60 Output
          %4 = OpFunction %2 None %3
          %5 = OpLabel
          %9 = OpVariable %8 Function
         %24 = OpVariable %23 Function
         %19 = OpAccessChain %18 %15 %17 %17
         %20 = OpLoad %6 %19
         %21 = OpCompositeConstruct %7 %20 %20
               OpStore %9 %21
         %27 = OpAccessChain %26 %9 %25
         %28 = OpLoad %6 %27
         %29 = OpCompositeConstruct %22 %28 %28 %28 %28
               OpStore %24 %29
         %33 = OpAccessChain %18 %32 %17
         %34 = OpLoad %6 %33
         %35 = OpAccessChain %18 %15 %17 %17
         %36 = OpLoad %6 %35
         %38 = OpFUnordNotEqual %37 %34 %36
               OpSelectionMerge %40 None
               OpBranchConditional %38 %39 %58
         %39 = OpLabel
         %41 = OpAccessChain %18 %32 %17
         %42 = OpLoad %6 %41
         %44 = OpAccessChain %18 %15 %17 %43
         %45 = OpLoad %6 %44
         %46 = OpFOrdEqual %37 %42 %45
               OpSelectionMerge %48 None
               OpBranchConditional %46 %47 %48
         %47 = OpLabel
               OpReturn
         %48 = OpLabel
         %50 = OpAccessChain %18 %15 %17 %17
         %51 = OpLoad %6 %50
         %53 = OpVectorShuffle %7 %29 %29 1 2
         %54 = OpCompositeConstruct %7 %51 %51
         %55 = OpFSub %7 %53 %54
         %57 = OpVectorShuffle %22 %29 %55 0 4 5 3
               OpStore %24 %57
               OpBranch %40
         %58 = OpLabel
               OpTerminateInvocation
         %40 = OpLabel
               OpStore %61 %57
               OpReturn
               OpFunctionEnd
END

# uniforms for variant

# zero
BUFFER variant_zero DATA_TYPE float STD140 DATA
 0.0
END
# _GLF_uniform_float_values
BUFFER variant__GLF_uniform_float_values DATA_TYPE float[] STD140 DATA
 1.0 2.0
END

BUFFER variant_framebuffer FORMAT B8G8R8A8_UNORM

PIPELINE graphics variant_pipeline
  ATTACH variant_vertex_shader
  ATTACH variant_fragment_shader
  FRAMEBUFFER_SIZE 256 256
  BIND BUFFER variant_framebuffer AS color LOCATION 0
  BIND BUFFER variant_zero AS uniform DESCRIPTOR_SET 0 BINDING 1
  BIND BUFFER variant__GLF_uniform_float_values AS uniform DESCRIPTOR_SET 0 BINDING 0
END
CLEAR_COLOR variant_pipeline 0 0 0 255

CLEAR variant_pipeline
RUN variant_pipeline DRAW_RECT POS 0 0 SIZE 256 256

EXPECT variant_framebuffer IDX 0 0 SIZE 256 256 EQ_RGBA 255 0 0 255
