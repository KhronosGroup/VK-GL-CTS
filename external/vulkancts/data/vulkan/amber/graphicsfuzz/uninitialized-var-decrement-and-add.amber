#!amber

# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


# A test for a bug found by GraphicsFuzz.

# Short description: A fragment shader that uses an uninitialized variable

# The test passes because the shader always writes the color red.
# The update to _GLF_color.x has no effect on visible pixels.

SHADER vertex variant_vertex_shader PASSTHROUGH

# variant_fragment_shader is derived from the following GLSL:
# #version 310 es
# precision highp float;
#
# layout(location = 0) out vec4 _GLF_color;
#
# void main()
# {
#     _GLF_color = vec4(1.0, 0.0, 0.0, 1.0);
#
#     uint foo;
#
#     // For visible pixels, this is equivalent to: _GLF_color.x = _GLF_color.x;
#     _GLF_color.x = gl_FragCoord.x > -1.0 ? _GLF_color.x : float(178493u + (--foo));
# }
SHADER fragment variant_fragment_shader SPIRV-ASM TARGET_ENV spv1.0
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 7
; Bound: 42
; Schema: 0
               OpCapability Shader
          %1 = OpExtInstImport "GLSL.std.450"
               OpMemoryModel Logical GLSL450
               OpEntryPoint Fragment %4 "main" %9 %14
               OpExecutionMode %4 OriginUpperLeft
               OpSource ESSL 310
               OpName %4 "main"
               OpName %9 "_GLF_color"
               OpName %14 "gl_FragCoord"
               OpName %33 "foo"
               OpDecorate %9 Location 0
               OpDecorate %14 BuiltIn FragCoord
               OpDecorate %33 RelaxedPrecision
               OpDecorate %34 RelaxedPrecision
               OpDecorate %37 RelaxedPrecision
               OpDecorate %38 RelaxedPrecision
          %2 = OpTypeVoid
          %3 = OpTypeFunction %2
          %6 = OpTypeFloat 32
          %7 = OpTypeVector %6 4
          %8 = OpTypePointer Output %7
          %9 = OpVariable %8 Output
         %10 = OpConstant %6 1
         %11 = OpConstant %6 0
         %12 = OpConstantComposite %7 %10 %11 %11 %10
         %13 = OpTypePointer Input %7
         %14 = OpVariable %13 Input
         %15 = OpTypeInt 32 0
         %16 = OpConstant %15 0
         %17 = OpTypePointer Input %6
         %20 = OpConstant %6 -1
         %21 = OpTypeBool
         %23 = OpTypePointer Function %6
         %27 = OpTypePointer Output %6
         %31 = OpConstant %15 178493
         %32 = OpTypePointer Function %15
         %35 = OpTypeInt 32 1
         %36 = OpConstant %35 1
          %4 = OpFunction %2 None %3
          %5 = OpLabel
         %24 = OpVariable %23 Function
         %33 = OpVariable %32 Function
               OpStore %9 %12
         %18 = OpAccessChain %17 %14 %16
         %19 = OpLoad %6 %18
         %22 = OpFOrdGreaterThan %21 %19 %20
               OpSelectionMerge %26 None
               OpBranchConditional %22 %25 %30
         %25 = OpLabel
         %28 = OpAccessChain %27 %9 %16
         %29 = OpLoad %6 %28
               OpStore %24 %29
               OpBranch %26
         %30 = OpLabel
         %34 = OpLoad %15 %33
         %37 = OpISub %15 %34 %36
               OpStore %33 %37
         %38 = OpIAdd %15 %31 %37
         %39 = OpConvertUToF %6 %38
               OpStore %24 %39
               OpBranch %26
         %26 = OpLabel
         %40 = OpLoad %6 %24
         %41 = OpAccessChain %27 %9 %16
               OpStore %41 %40
               OpReturn
               OpFunctionEnd
END

# uniforms for variant


BUFFER variant_framebuffer FORMAT B8G8R8A8_UNORM

PIPELINE graphics variant_pipeline
  ATTACH variant_vertex_shader
  ATTACH variant_fragment_shader
  FRAMEBUFFER_SIZE 256 256
  BIND BUFFER variant_framebuffer AS color LOCATION 0
END
CLEAR_COLOR variant_pipeline 0 0 0 255

CLEAR variant_pipeline
RUN variant_pipeline DRAW_RECT POS 0 0 SIZE 256 256

EXPECT variant_framebuffer IDX 0 0 SIZE 256 256 EQ_RGBA 255 0 0 255
