#!amber

# Copyright 2022 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


# A test for a coverage-gap found by the GraphicsFuzz project.

# Short description: A fragment shader that covers specific LLVM code paths

# The test passes because the shader always writes red.

# Optimized using spirv-opt with the following arguments:
# '--copy-propagate-arrays'
# '--eliminate-local-multi-store'
# '--if-conversion'
# '--if-conversion'
# '--combine-access-chains'
# '--redundancy-elimination'
# '--eliminate-dead-branches'
# '--eliminate-dead-branches'
# '--merge-blocks'
# spirv-opt commit hash: a0370efd589be33d5d9a85cfde2f85841b3755af



SHADER vertex variant_vertex_shader PASSTHROUGH

# variant_fragment_shader is derived from the following GLSL:
# #version 320 es
# #define _int_1 _GLF_uniform_int_values[0]
# #define _int_0 _GLF_uniform_int_values[1]
#
# precision highp float;
# precision highp int;
#
# // Contents of _GLF_uniform_int_values: [1, 0]
# layout(set = 0, binding = 0) uniform buf0
# {
#     int _GLF_uniform_int_values[2];
# };
#
# const int _GLF_global_loop_bound = 10;
# int _GLF_global_loop_count = 0;
#
# layout(location = 0) out vec4 _GLF_color;
#
# int func()
# {
#     int a = 1;
#     int i = 1;
#
#     // Iterated once.
#     while(_GLF_global_loop_count < _GLF_global_loop_bound)
#     {
#         _GLF_global_loop_count++;
#
#         // Iterated nine times. 2 * a has no effect.
#         for( i = _int_1; _GLF_global_loop_count < _GLF_global_loop_bound; 2 * a)
#         {
#             _GLF_global_loop_count++;
#             i++;
#         }
#     }
#
#     // Returns 10.
#     return i;
# }
#
# void main()
# {
#     // Always true.
#     if(func() == 10)
#     {
#         _GLF_color = vec4(_int_1, _int_0, _int_0, _int_1);
#     }
#     else
#     {
#         _GLF_color = vec4(_int_0);
#     }
# }
SHADER fragment variant_fragment_shader SPIRV-ASM TARGET_ENV spv1.0
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 10
; Bound: 84
; Schema: 0
               OpCapability Shader
          %1 = OpExtInstImport "GLSL.std.450"
               OpMemoryModel Logical GLSL450
               OpEntryPoint Fragment %4 "main" %61
               OpExecutionMode %4 OriginUpperLeft
               OpSource ESSL 320
               OpName %4 "main"
               OpName %8 "func("
               OpName %11 "_GLF_global_loop_count"
               OpName %14 "a"
               OpName %16 "i"
               OpName %31 "buf0"
               OpMemberName %31 0 "_GLF_uniform_int_values"
               OpName %33 ""
               OpName %61 "_GLF_color"
               OpDecorate %30 ArrayStride 16
               OpMemberDecorate %31 0 Offset 0
               OpDecorate %31 Block
               OpDecorate %33 DescriptorSet 0
               OpDecorate %33 Binding 0
               OpDecorate %61 Location 0
          %2 = OpTypeVoid
          %3 = OpTypeFunction %2
          %6 = OpTypeInt 32 1
          %7 = OpTypeFunction %6
         %10 = OpTypePointer Private %6
         %11 = OpVariable %10 Private
         %12 = OpConstant %6 0
         %13 = OpTypePointer Function %6
         %15 = OpConstant %6 1
         %23 = OpConstant %6 10
         %24 = OpTypeBool
         %28 = OpTypeInt 32 0
         %29 = OpConstant %28 2
         %30 = OpTypeArray %6 %29
         %31 = OpTypeStruct %30
         %32 = OpTypePointer Uniform %31
         %33 = OpVariable %32 Uniform
         %34 = OpTypePointer Uniform %6
         %48 = OpConstant %6 2
         %58 = OpTypeFloat 32
         %59 = OpTypeVector %58 4
         %60 = OpTypePointer Output %59
         %61 = OpVariable %60 Output
          %4 = OpFunction %2 None %3
          %5 = OpLabel
               OpStore %11 %12
         %54 = OpFunctionCall %6 %8
         %55 = OpIEqual %24 %54 %23
               OpSelectionMerge %57 None
               OpBranchConditional %55 %56 %75
         %56 = OpLabel
         %62 = OpAccessChain %34 %33 %12 %12
         %63 = OpLoad %6 %62
         %64 = OpConvertSToF %58 %63
         %65 = OpAccessChain %34 %33 %12 %15
         %66 = OpLoad %6 %65
         %67 = OpConvertSToF %58 %66
         %74 = OpCompositeConstruct %59 %64 %67 %67 %64
               OpStore %61 %74
               OpBranch %57
         %75 = OpLabel
         %76 = OpAccessChain %34 %33 %12 %15
         %77 = OpLoad %6 %76
         %78 = OpConvertSToF %58 %77
         %79 = OpCompositeConstruct %59 %78 %78 %78 %78
               OpStore %61 %79
               OpBranch %57
         %57 = OpLabel
               OpReturn
               OpFunctionEnd
          %8 = OpFunction %6 None %7
          %9 = OpLabel
         %14 = OpVariable %13 Function
         %16 = OpVariable %13 Function
               OpStore %14 %15
               OpStore %16 %15
               OpBranch %17
         %17 = OpLabel
         %80 = OpPhi %6 %15 %9 %81 %20
         %83 = OpPhi %6 %15 %9 %83 %20
         %22 = OpLoad %6 %11
         %25 = OpSLessThan %24 %22 %23
               OpLoopMerge %19 %20 None
               OpBranchConditional %25 %18 %19
         %18 = OpLabel
         %26 = OpLoad %6 %11
         %27 = OpIAdd %6 %26 %15
               OpStore %11 %27
         %35 = OpAccessChain %34 %33 %12 %12
         %36 = OpLoad %6 %35
               OpStore %16 %36
               OpBranch %37
         %37 = OpLabel
         %81 = OpPhi %6 %36 %18 %47 %38
         %42 = OpLoad %6 %11
         %43 = OpSLessThan %24 %42 %23
               OpLoopMerge %39 %38 None
               OpBranchConditional %43 %38 %39
         %38 = OpLabel
         %44 = OpLoad %6 %11
         %45 = OpIAdd %6 %44 %15
               OpStore %11 %45
         %47 = OpIAdd %6 %81 %15
               OpStore %16 %47
         %50 = OpIMul %6 %48 %83
               OpBranch %37
         %39 = OpLabel
               OpBranch %20
         %20 = OpLabel
               OpBranch %17
         %19 = OpLabel
               OpReturnValue %80
               OpFunctionEnd
END

# uniforms for variant

# _GLF_uniform_int_values
BUFFER variant__GLF_uniform_int_values DATA_TYPE int32[] STD140 DATA
 1 0
END

BUFFER variant_framebuffer FORMAT B8G8R8A8_UNORM

PIPELINE graphics variant_pipeline
  ATTACH variant_vertex_shader
  ATTACH variant_fragment_shader
  FRAMEBUFFER_SIZE 32 32
  BIND BUFFER variant_framebuffer AS color LOCATION 0
  BIND BUFFER variant__GLF_uniform_int_values AS uniform DESCRIPTOR_SET 0 BINDING 0
END
CLEAR_COLOR variant_pipeline 0 0 0 255

CLEAR variant_pipeline
RUN variant_pipeline DRAW_RECT POS 0 0 SIZE 32 32

EXPECT variant_framebuffer IDX 0 0 SIZE 32 32 EQ_RGBA 255 0 0 255
