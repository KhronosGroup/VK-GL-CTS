#!amber

# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


# A test for a coverage-gap found by GraphicsFuzz.

# Short description: A fragment shader that covers a specific instruction folding path.

# The test passes because shader always writes red.

SHADER vertex variant_vertex_shader PASSTHROUGH

# variant_fragment_shader is derived from the following GLSL:
# #version 310 es
# precision highp float;
#
# layout(location = 0) out vec4 _GLF_color;
# layout(set = 0, binding = 0) uniform buf0
# {
#     vec2 zeroOne;
# };
#
# void main()
# {
#     // Since zeroOne is (0, 1) the results will be (2, 5).
#     vec2 v = mix(vec2(2, 3), vec2(4, 5), zeroOne);
#     float d = distance(v, vec2(2, 5));
#
#     if (d < 0.1)
#         _GLF_color = vec4(v.x - 1.0, v.y - 5.0, 0, 1);
#     else
#         _GLF_color = vec4(0);
# }
SHADER fragment variant_fragment_shader SPIRV-ASM TARGET_ENV spv1.0
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 8
; Bound: 53
; Schema: 0
               OpCapability Shader
          %1 = OpExtInstImport "GLSL.std.450"
               OpMemoryModel Logical GLSL450
               OpEntryPoint Fragment %4 "main" %38
               OpExecutionMode %4 OriginUpperLeft
               OpSource ESSL 310
               OpName %4 "main"
               OpName %9 "v"
               OpName %16 "buf0"
               OpMemberName %16 0 "zeroOne"
               OpName %18 ""
               OpName %26 "d"
               OpName %38 "_GLF_color"
               OpMemberDecorate %16 0 Offset 0
               OpDecorate %16 Block
               OpDecorate %18 DescriptorSet 0
               OpDecorate %18 Binding 0
               OpDecorate %38 Location 0
          %2 = OpTypeVoid
          %3 = OpTypeFunction %2
          %6 = OpTypeFloat 32
          %7 = OpTypeVector %6 2
          %8 = OpTypePointer Function %7
         %10 = OpConstant %6 2
         %11 = OpConstant %6 3
         %12 = OpConstantComposite %7 %10 %11
         %13 = OpConstant %6 4
         %14 = OpConstant %6 5
         %15 = OpConstantComposite %7 %13 %14
         %16 = OpTypeStruct %7
         %17 = OpTypePointer Uniform %16
         %18 = OpVariable %17 Uniform
         %19 = OpTypeInt 32 1
         %20 = OpConstant %19 0
         %21 = OpTypePointer Uniform %7
         %25 = OpTypePointer Function %6
         %28 = OpConstantComposite %7 %10 %14
         %31 = OpConstant %6 0.100000001
         %32 = OpTypeBool
         %36 = OpTypeVector %6 4
         %37 = OpTypePointer Output %36
         %38 = OpVariable %37 Output
         %39 = OpTypeInt 32 0
         %40 = OpConstant %39 0
         %43 = OpConstant %6 1
         %45 = OpConstant %39 1
         %49 = OpConstant %6 0
         %52 = OpConstantComposite %36 %49 %49 %49 %49
          %4 = OpFunction %2 None %3
          %5 = OpLabel
          %9 = OpVariable %8 Function
         %26 = OpVariable %25 Function
         %22 = OpAccessChain %21 %18 %20
         %23 = OpLoad %7 %22
         %24 = OpExtInst %7 %1 FMix %12 %15 %23
               OpStore %9 %24
         %27 = OpLoad %7 %9
         %29 = OpExtInst %6 %1 Distance %27 %28
               OpStore %26 %29
         %30 = OpLoad %6 %26
         %33 = OpFOrdLessThan %32 %30 %31
               OpSelectionMerge %35 None
               OpBranchConditional %33 %34 %51
         %34 = OpLabel
         %41 = OpAccessChain %25 %9 %40
         %42 = OpLoad %6 %41
         %44 = OpFSub %6 %42 %43
         %46 = OpAccessChain %25 %9 %45
         %47 = OpLoad %6 %46
         %48 = OpFSub %6 %47 %14
         %50 = OpCompositeConstruct %36 %44 %48 %49 %43
               OpStore %38 %50
               OpBranch %35
         %51 = OpLabel
               OpStore %38 %52
               OpBranch %35
         %35 = OpLabel
               OpReturn
               OpFunctionEnd
END

# uniforms for variant

# zeroOne
BUFFER variant_zeroOne DATA_TYPE vec2<float> DATA
 0.0 1.0
END

BUFFER variant_framebuffer FORMAT B8G8R8A8_UNORM

PIPELINE graphics variant_pipeline
  ATTACH variant_vertex_shader
  ATTACH variant_fragment_shader
  FRAMEBUFFER_SIZE 256 256
  BIND BUFFER variant_framebuffer AS color LOCATION 0
  BIND BUFFER variant_zeroOne AS uniform DESCRIPTOR_SET 0 BINDING 0
END
CLEAR_COLOR variant_pipeline 0 0 0 255

CLEAR variant_pipeline
RUN variant_pipeline DRAW_RECT POS 0 0 SIZE 256 256

EXPECT variant_framebuffer IDX 0 0 SIZE 256 256 EQ_RGBA 255 0 0 255
