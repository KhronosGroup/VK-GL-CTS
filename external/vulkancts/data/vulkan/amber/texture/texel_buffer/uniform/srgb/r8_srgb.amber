#!amber
# Copyright 2022 Google LLC.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

SHADER vertex vertShaderTex GLSL
#version 430
layout(location = 0) in vec4 position;
layout(location = 1) in vec2 texCoordsIn;
layout(location = 0) out vec2 texCoordsOut;
void main() {
  gl_Position = position;
  texCoordsOut = texCoordsIn;
}
END

SHADER fragment fragShaderTex GLSL
#version 430
layout(location = 0) in vec2 texCoordsIn;
layout(location = 0) out vec4 colorOut;
layout(set=0, binding=0) uniform sampler2D referenceSampler;
layout(set=0, binding=1) uniform samplerBuffer bufferSampler;
void main() {

  vec4 referenceValue = texture(referenceSampler, texCoordsIn);
  vec4 bufferValue = texelFetch(bufferSampler, int((gl_FragCoord.y-0.5) * 8 + (gl_FragCoord.x-0.5)));

  if (bufferValue.r == referenceValue.r)
      colorOut = vec4(0., 1., 0., 1.);
  else
      colorOut = vec4(1., 0., 0., 1.);
}
END

IMAGE texture FORMAT R8_SRGB DIM_2D WIDTH 8 HEIGHT 8 DATA
185 120 185 20 185 120 189 120
145 122 185 10 185 12 188 122
135 222 15 12 185 121 186 113
175 124 5 130 185 100 185 123
177 221 6 140 185 101 182 29
188 121 67 150 185 120 184 127
189 27 88 22 185 120 15 123
111 18 185 24 185 120 17 220
END

IMAGE texture2 FORMAT R8_SRGB DIM_2D WIDTH 8 HEIGHT 8 DATA
185 120 185 20 185 120 189 120
145 122 185 10 185 12 188 122
135 222 15 12 185 121 186 113
175 124 5 130 185 100 185 123
177 221 6 140 185 101 182 29
188 121 67 150 185 120 184 127
189 27 88 22 185 120 15 123
111 18 185 24 185 120 17 220
END

BUFFER framebuffer FORMAT B8G8R8A8_UNORM
SAMPLER sampler

BUFFER position DATA_TYPE vec2<float> DATA
-1. -1.
 1. -1.
-1.  1.
 1. -1.
 1.  1.
-1.  1.
END

BUFFER texcoords DATA_TYPE vec2<float> DATA
0.0 0.0
1.0 0.0
0.0 1.0
1.0 0.0
1.0 1.0
0.0 1.0
END

PIPELINE graphics pipeline
  ATTACH vertShaderTex
  ATTACH fragShaderTex
  BIND BUFFER texture AS combined_image_sampler SAMPLER sampler DESCRIPTOR_SET 0 BINDING 0
  BIND BUFFER texture2 AS uniform_texel_buffer DESCRIPTOR_SET 0 BINDING 1
  VERTEX_DATA position LOCATION 0
  VERTEX_DATA texcoords LOCATION 1
  FRAMEBUFFER_SIZE 8 8
  BIND BUFFER framebuffer AS color LOCATION 0
END

CLEAR_COLOR pipeline 0 0 0 0
CLEAR pipeline
RUN pipeline DRAW_ARRAY AS TRIANGLE_LIST START_IDX 0 COUNT 6
EXPECT framebuffer IDX 0 0 SIZE 8 8 EQ_RGBA 0 255 0 255
