/* WARNING: This is auto-generated file. Do not modify, since changes will
 * be lost! Modify the generating script instead.
 * This file was generated by /scripts/gen_framework.py
 */

template<> VkStructureType getStructureType<VkBufferMemoryBarrier> (void)
{
	return VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER;
}

template<> VkStructureType getStructureType<VkImageMemoryBarrier> (void)
{
	return VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER;
}

template<> VkStructureType getStructureType<VkMemoryBarrier> (void)
{
	return VK_STRUCTURE_TYPE_MEMORY_BARRIER;
}

template<> VkStructureType getStructureType<VkApplicationInfo> (void)
{
	return VK_STRUCTURE_TYPE_APPLICATION_INFO;
}

template<> VkStructureType getStructureType<VkInstanceCreateInfo> (void)
{
	return VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO;
}

template<> VkStructureType getStructureType<VkDeviceQueueCreateInfo> (void)
{
	return VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO;
}

template<> VkStructureType getStructureType<VkDeviceCreateInfo> (void)
{
	return VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO;
}

template<> VkStructureType getStructureType<VkSubmitInfo> (void)
{
	return VK_STRUCTURE_TYPE_SUBMIT_INFO;
}

template<> VkStructureType getStructureType<VkMappedMemoryRange> (void)
{
	return VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE;
}

template<> VkStructureType getStructureType<VkMemoryAllocateInfo> (void)
{
	return VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO;
}

template<> VkStructureType getStructureType<VkFenceCreateInfo> (void)
{
	return VK_STRUCTURE_TYPE_FENCE_CREATE_INFO;
}

template<> VkStructureType getStructureType<VkSemaphoreCreateInfo> (void)
{
	return VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO;
}

template<> VkStructureType getStructureType<VkEventCreateInfo> (void)
{
	return VK_STRUCTURE_TYPE_EVENT_CREATE_INFO;
}

template<> VkStructureType getStructureType<VkQueryPoolCreateInfo> (void)
{
	return VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO;
}

template<> VkStructureType getStructureType<VkBufferCreateInfo> (void)
{
	return VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO;
}

template<> VkStructureType getStructureType<VkBufferViewCreateInfo> (void)
{
	return VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO;
}

template<> VkStructureType getStructureType<VkImageCreateInfo> (void)
{
	return VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO;
}

template<> VkStructureType getStructureType<VkImageViewCreateInfo> (void)
{
	return VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO;
}

template<> VkStructureType getStructureType<VkPipelineCacheCreateInfo> (void)
{
	return VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO;
}

template<> VkStructureType getStructureType<VkPipelineShaderStageCreateInfo> (void)
{
	return VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO;
}

template<> VkStructureType getStructureType<VkComputePipelineCreateInfo> (void)
{
	return VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO;
}

template<> VkStructureType getStructureType<VkPipelineVertexInputStateCreateInfo> (void)
{
	return VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO;
}

template<> VkStructureType getStructureType<VkPipelineInputAssemblyStateCreateInfo> (void)
{
	return VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO;
}

template<> VkStructureType getStructureType<VkPipelineTessellationStateCreateInfo> (void)
{
	return VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO;
}

template<> VkStructureType getStructureType<VkPipelineViewportStateCreateInfo> (void)
{
	return VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO;
}

template<> VkStructureType getStructureType<VkPipelineRasterizationStateCreateInfo> (void)
{
	return VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO;
}

template<> VkStructureType getStructureType<VkPipelineMultisampleStateCreateInfo> (void)
{
	return VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO;
}

template<> VkStructureType getStructureType<VkPipelineDepthStencilStateCreateInfo> (void)
{
	return VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO;
}

template<> VkStructureType getStructureType<VkPipelineColorBlendStateCreateInfo> (void)
{
	return VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO;
}

template<> VkStructureType getStructureType<VkPipelineDynamicStateCreateInfo> (void)
{
	return VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO;
}

template<> VkStructureType getStructureType<VkGraphicsPipelineCreateInfo> (void)
{
	return VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO;
}

template<> VkStructureType getStructureType<VkPipelineLayoutCreateInfo> (void)
{
	return VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO;
}

template<> VkStructureType getStructureType<VkSamplerCreateInfo> (void)
{
	return VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO;
}

template<> VkStructureType getStructureType<VkCopyDescriptorSet> (void)
{
	return VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET;
}

template<> VkStructureType getStructureType<VkDescriptorPoolCreateInfo> (void)
{
	return VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO;
}

template<> VkStructureType getStructureType<VkDescriptorSetAllocateInfo> (void)
{
	return VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO;
}

template<> VkStructureType getStructureType<VkDescriptorSetLayoutCreateInfo> (void)
{
	return VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO;
}

template<> VkStructureType getStructureType<VkWriteDescriptorSet> (void)
{
	return VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET;
}

template<> VkStructureType getStructureType<VkFramebufferCreateInfo> (void)
{
	return VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO;
}

template<> VkStructureType getStructureType<VkRenderPassCreateInfo> (void)
{
	return VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO;
}

template<> VkStructureType getStructureType<VkCommandPoolCreateInfo> (void)
{
	return VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO;
}

template<> VkStructureType getStructureType<VkCommandBufferAllocateInfo> (void)
{
	return VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO;
}

template<> VkStructureType getStructureType<VkCommandBufferInheritanceInfo> (void)
{
	return VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO;
}

template<> VkStructureType getStructureType<VkCommandBufferBeginInfo> (void)
{
	return VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO;
}

template<> VkStructureType getStructureType<VkRenderPassBeginInfo> (void)
{
	return VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO;
}

template<> VkStructureType getStructureType<VkPhysicalDeviceSubgroupProperties> (void)
{
	return VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES;
}

template<> VkStructureType getStructureType<VkBindBufferMemoryInfo> (void)
{
	return VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO;
}

template<> VkStructureType getStructureType<VkBindImageMemoryInfo> (void)
{
	return VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO;
}

template<> VkStructureType getStructureType<VkPhysicalDevice16BitStorageFeatures> (void)
{
	return VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES;
}

template<> VkStructureType getStructureType<VkMemoryDedicatedRequirements> (void)
{
	return VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS;
}

template<> VkStructureType getStructureType<VkMemoryDedicatedAllocateInfo> (void)
{
	return VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO;
}

template<> VkStructureType getStructureType<VkMemoryAllocateFlagsInfo> (void)
{
	return VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO;
}

template<> VkStructureType getStructureType<VkDeviceGroupRenderPassBeginInfo> (void)
{
	return VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO;
}

template<> VkStructureType getStructureType<VkDeviceGroupCommandBufferBeginInfo> (void)
{
	return VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO;
}

template<> VkStructureType getStructureType<VkDeviceGroupSubmitInfo> (void)
{
	return VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO;
}

template<> VkStructureType getStructureType<VkBindBufferMemoryDeviceGroupInfo> (void)
{
	return VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO;
}

template<> VkStructureType getStructureType<VkBindImageMemoryDeviceGroupInfo> (void)
{
	return VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO;
}

template<> VkStructureType getStructureType<VkPhysicalDeviceGroupProperties> (void)
{
	return VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES;
}

template<> VkStructureType getStructureType<VkDeviceGroupDeviceCreateInfo> (void)
{
	return VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO;
}

template<> VkStructureType getStructureType<VkBufferMemoryRequirementsInfo2> (void)
{
	return VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2;
}

template<> VkStructureType getStructureType<VkImageMemoryRequirementsInfo2> (void)
{
	return VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2;
}

template<> VkStructureType getStructureType<VkMemoryRequirements2> (void)
{
	return VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2;
}

template<> VkStructureType getStructureType<VkPhysicalDeviceFeatures2> (void)
{
	return VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2;
}

template<> VkStructureType getStructureType<VkPhysicalDeviceProperties2> (void)
{
	return VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2;
}

template<> VkStructureType getStructureType<VkFormatProperties2> (void)
{
	return VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2;
}

template<> VkStructureType getStructureType<VkImageFormatProperties2> (void)
{
	return VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2;
}

template<> VkStructureType getStructureType<VkPhysicalDeviceImageFormatInfo2> (void)
{
	return VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2;
}

template<> VkStructureType getStructureType<VkQueueFamilyProperties2> (void)
{
	return VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2;
}

template<> VkStructureType getStructureType<VkPhysicalDeviceMemoryProperties2> (void)
{
	return VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2;
}

template<> VkStructureType getStructureType<VkPhysicalDevicePointClippingProperties> (void)
{
	return VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES;
}

template<> VkStructureType getStructureType<VkRenderPassInputAttachmentAspectCreateInfo> (void)
{
	return VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO;
}

template<> VkStructureType getStructureType<VkImageViewUsageCreateInfo> (void)
{
	return VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO;
}

template<> VkStructureType getStructureType<VkPipelineTessellationDomainOriginStateCreateInfo> (void)
{
	return VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO;
}

template<> VkStructureType getStructureType<VkRenderPassMultiviewCreateInfo> (void)
{
	return VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO;
}

template<> VkStructureType getStructureType<VkPhysicalDeviceMultiviewFeatures> (void)
{
	return VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES;
}

template<> VkStructureType getStructureType<VkPhysicalDeviceMultiviewProperties> (void)
{
	return VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES;
}

template<> VkStructureType getStructureType<VkPhysicalDeviceVariablePointersFeatures> (void)
{
	return VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES;
}

template<> VkStructureType getStructureType<VkPhysicalDeviceProtectedMemoryFeatures> (void)
{
	return VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES;
}

template<> VkStructureType getStructureType<VkPhysicalDeviceProtectedMemoryProperties> (void)
{
	return VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES;
}

template<> VkStructureType getStructureType<VkDeviceQueueInfo2> (void)
{
	return VK_STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2;
}

template<> VkStructureType getStructureType<VkProtectedSubmitInfo> (void)
{
	return VK_STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO;
}

template<> VkStructureType getStructureType<VkSamplerYcbcrConversionCreateInfo> (void)
{
	return VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO;
}

template<> VkStructureType getStructureType<VkSamplerYcbcrConversionInfo> (void)
{
	return VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO;
}

template<> VkStructureType getStructureType<VkBindImagePlaneMemoryInfo> (void)
{
	return VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO;
}

template<> VkStructureType getStructureType<VkImagePlaneMemoryRequirementsInfo> (void)
{
	return VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO;
}

template<> VkStructureType getStructureType<VkPhysicalDeviceSamplerYcbcrConversionFeatures> (void)
{
	return VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES;
}

template<> VkStructureType getStructureType<VkSamplerYcbcrConversionImageFormatProperties> (void)
{
	return VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES;
}

template<> VkStructureType getStructureType<VkPhysicalDeviceExternalImageFormatInfo> (void)
{
	return VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO;
}

template<> VkStructureType getStructureType<VkExternalImageFormatProperties> (void)
{
	return VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES;
}

template<> VkStructureType getStructureType<VkPhysicalDeviceExternalBufferInfo> (void)
{
	return VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO;
}

template<> VkStructureType getStructureType<VkExternalBufferProperties> (void)
{
	return VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES;
}

template<> VkStructureType getStructureType<VkPhysicalDeviceIDProperties> (void)
{
	return VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES;
}

template<> VkStructureType getStructureType<VkExternalMemoryImageCreateInfo> (void)
{
	return VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO;
}

template<> VkStructureType getStructureType<VkExternalMemoryBufferCreateInfo> (void)
{
	return VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO;
}

template<> VkStructureType getStructureType<VkExportMemoryAllocateInfo> (void)
{
	return VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO;
}

template<> VkStructureType getStructureType<VkPhysicalDeviceExternalFenceInfo> (void)
{
	return VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO;
}

template<> VkStructureType getStructureType<VkExternalFenceProperties> (void)
{
	return VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES;
}

template<> VkStructureType getStructureType<VkExportFenceCreateInfo> (void)
{
	return VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO;
}

template<> VkStructureType getStructureType<VkExportSemaphoreCreateInfo> (void)
{
	return VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO;
}

template<> VkStructureType getStructureType<VkPhysicalDeviceExternalSemaphoreInfo> (void)
{
	return VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO;
}

template<> VkStructureType getStructureType<VkExternalSemaphoreProperties> (void)
{
	return VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES;
}

template<> VkStructureType getStructureType<VkPhysicalDeviceMaintenance3Properties> (void)
{
	return VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES;
}

template<> VkStructureType getStructureType<VkDescriptorSetLayoutSupport> (void)
{
	return VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT;
}

template<> VkStructureType getStructureType<VkPhysicalDeviceShaderDrawParametersFeatures> (void)
{
	return VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES;
}

template<> VkStructureType getStructureType<VkPhysicalDeviceVulkan11Features> (void)
{
	return VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_FEATURES;
}

template<> VkStructureType getStructureType<VkPhysicalDeviceVulkan11Properties> (void)
{
	return VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_PROPERTIES;
}

template<> VkStructureType getStructureType<VkPhysicalDeviceVulkan12Features> (void)
{
	return VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_FEATURES;
}

template<> VkStructureType getStructureType<VkPhysicalDeviceVulkan12Properties> (void)
{
	return VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_PROPERTIES;
}

template<> VkStructureType getStructureType<VkImageFormatListCreateInfo> (void)
{
	return VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO;
}

template<> VkStructureType getStructureType<VkAttachmentDescription2> (void)
{
	return VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2;
}

template<> VkStructureType getStructureType<VkAttachmentReference2> (void)
{
	return VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2;
}

template<> VkStructureType getStructureType<VkSubpassDescription2> (void)
{
	return VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2;
}

template<> VkStructureType getStructureType<VkSubpassDependency2> (void)
{
	return VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2;
}

template<> VkStructureType getStructureType<VkRenderPassCreateInfo2> (void)
{
	return VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2;
}

template<> VkStructureType getStructureType<VkSubpassBeginInfo> (void)
{
	return VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO;
}

template<> VkStructureType getStructureType<VkSubpassEndInfo> (void)
{
	return VK_STRUCTURE_TYPE_SUBPASS_END_INFO;
}

template<> VkStructureType getStructureType<VkPhysicalDevice8BitStorageFeatures> (void)
{
	return VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES;
}

template<> VkStructureType getStructureType<VkPhysicalDeviceDriverProperties> (void)
{
	return VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES;
}

template<> VkStructureType getStructureType<VkPhysicalDeviceShaderAtomicInt64Features> (void)
{
	return VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES;
}

template<> VkStructureType getStructureType<VkPhysicalDeviceShaderFloat16Int8Features> (void)
{
	return VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES;
}

template<> VkStructureType getStructureType<VkPhysicalDeviceFloatControlsProperties> (void)
{
	return VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES;
}

template<> VkStructureType getStructureType<VkDescriptorSetLayoutBindingFlagsCreateInfo> (void)
{
	return VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO;
}

template<> VkStructureType getStructureType<VkPhysicalDeviceDescriptorIndexingFeatures> (void)
{
	return VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES;
}

template<> VkStructureType getStructureType<VkPhysicalDeviceDescriptorIndexingProperties> (void)
{
	return VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES;
}

template<> VkStructureType getStructureType<VkDescriptorSetVariableDescriptorCountAllocateInfo> (void)
{
	return VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO;
}

template<> VkStructureType getStructureType<VkDescriptorSetVariableDescriptorCountLayoutSupport> (void)
{
	return VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT;
}

template<> VkStructureType getStructureType<VkSubpassDescriptionDepthStencilResolve> (void)
{
	return VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE;
}

template<> VkStructureType getStructureType<VkPhysicalDeviceDepthStencilResolveProperties> (void)
{
	return VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES;
}

template<> VkStructureType getStructureType<VkPhysicalDeviceScalarBlockLayoutFeatures> (void)
{
	return VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES;
}

template<> VkStructureType getStructureType<VkImageStencilUsageCreateInfo> (void)
{
	return VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO;
}

template<> VkStructureType getStructureType<VkSamplerReductionModeCreateInfo> (void)
{
	return VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO;
}

template<> VkStructureType getStructureType<VkPhysicalDeviceSamplerFilterMinmaxProperties> (void)
{
	return VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES;
}

template<> VkStructureType getStructureType<VkPhysicalDeviceVulkanMemoryModelFeatures> (void)
{
	return VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES;
}

template<> VkStructureType getStructureType<VkPhysicalDeviceImagelessFramebufferFeatures> (void)
{
	return VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES;
}

template<> VkStructureType getStructureType<VkFramebufferAttachmentImageInfo> (void)
{
	return VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO;
}

template<> VkStructureType getStructureType<VkFramebufferAttachmentsCreateInfo> (void)
{
	return VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO;
}

template<> VkStructureType getStructureType<VkRenderPassAttachmentBeginInfo> (void)
{
	return VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO;
}

template<> VkStructureType getStructureType<VkPhysicalDeviceUniformBufferStandardLayoutFeatures> (void)
{
	return VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES;
}

template<> VkStructureType getStructureType<VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures> (void)
{
	return VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES;
}

template<> VkStructureType getStructureType<VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures> (void)
{
	return VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES;
}

template<> VkStructureType getStructureType<VkAttachmentReferenceStencilLayout> (void)
{
	return VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT;
}

template<> VkStructureType getStructureType<VkAttachmentDescriptionStencilLayout> (void)
{
	return VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT;
}

template<> VkStructureType getStructureType<VkPhysicalDeviceHostQueryResetFeatures> (void)
{
	return VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES;
}

template<> VkStructureType getStructureType<VkPhysicalDeviceTimelineSemaphoreFeatures> (void)
{
	return VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES;
}

template<> VkStructureType getStructureType<VkPhysicalDeviceTimelineSemaphoreProperties> (void)
{
	return VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES;
}

template<> VkStructureType getStructureType<VkSemaphoreTypeCreateInfo> (void)
{
	return VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO;
}

template<> VkStructureType getStructureType<VkTimelineSemaphoreSubmitInfo> (void)
{
	return VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO;
}

template<> VkStructureType getStructureType<VkSemaphoreWaitInfo> (void)
{
	return VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO;
}

template<> VkStructureType getStructureType<VkSemaphoreSignalInfo> (void)
{
	return VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO;
}

template<> VkStructureType getStructureType<VkPhysicalDeviceBufferDeviceAddressFeatures> (void)
{
	return VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES;
}

template<> VkStructureType getStructureType<VkBufferDeviceAddressInfo> (void)
{
	return VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO;
}

template<> VkStructureType getStructureType<VkBufferOpaqueCaptureAddressCreateInfo> (void)
{
	return VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO;
}

template<> VkStructureType getStructureType<VkMemoryOpaqueCaptureAddressAllocateInfo> (void)
{
	return VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO;
}

template<> VkStructureType getStructureType<VkDeviceMemoryOpaqueCaptureAddressInfo> (void)
{
	return VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO;
}

template<> VkStructureType getStructureType<VkPhysicalDeviceVulkanSC10Features> (void)
{
	return VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_SC_1_0_FEATURES;
}

template<> VkStructureType getStructureType<VkPhysicalDeviceVulkanSC10Properties> (void)
{
	return VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_SC_1_0_PROPERTIES;
}

template<> VkStructureType getStructureType<VkPipelinePoolSize> (void)
{
	return VK_STRUCTURE_TYPE_PIPELINE_POOL_SIZE;
}

template<> VkStructureType getStructureType<VkDeviceObjectReservationCreateInfo> (void)
{
	return VK_STRUCTURE_TYPE_DEVICE_OBJECT_RESERVATION_CREATE_INFO;
}

template<> VkStructureType getStructureType<VkCommandPoolMemoryReservationCreateInfo> (void)
{
	return VK_STRUCTURE_TYPE_COMMAND_POOL_MEMORY_RESERVATION_CREATE_INFO;
}

template<> VkStructureType getStructureType<VkCommandPoolMemoryConsumption> (void)
{
	return VK_STRUCTURE_TYPE_COMMAND_POOL_MEMORY_CONSUMPTION;
}

template<> VkStructureType getStructureType<VkFaultData> (void)
{
	return VK_STRUCTURE_TYPE_FAULT_DATA;
}

template<> VkStructureType getStructureType<VkFaultCallbackInfo> (void)
{
	return VK_STRUCTURE_TYPE_FAULT_CALLBACK_INFO;
}

template<> VkStructureType getStructureType<VkPipelineOfflineCreateInfo> (void)
{
	return VK_STRUCTURE_TYPE_PIPELINE_OFFLINE_CREATE_INFO;
}

template<> VkStructureType getStructureType<VkSwapchainCreateInfoKHR> (void)
{
	return VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR;
}

template<> VkStructureType getStructureType<VkPresentInfoKHR> (void)
{
	return VK_STRUCTURE_TYPE_PRESENT_INFO_KHR;
}

template<> VkStructureType getStructureType<VkImageSwapchainCreateInfoKHR> (void)
{
	return VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR;
}

template<> VkStructureType getStructureType<VkBindImageMemorySwapchainInfoKHR> (void)
{
	return VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR;
}

template<> VkStructureType getStructureType<VkAcquireNextImageInfoKHR> (void)
{
	return VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR;
}

template<> VkStructureType getStructureType<VkDeviceGroupPresentCapabilitiesKHR> (void)
{
	return VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR;
}

template<> VkStructureType getStructureType<VkDeviceGroupPresentInfoKHR> (void)
{
	return VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR;
}

template<> VkStructureType getStructureType<VkDeviceGroupSwapchainCreateInfoKHR> (void)
{
	return VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR;
}

template<> VkStructureType getStructureType<VkDisplayModeCreateInfoKHR> (void)
{
	return VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR;
}

template<> VkStructureType getStructureType<VkDisplaySurfaceCreateInfoKHR> (void)
{
	return VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR;
}

template<> VkStructureType getStructureType<VkDisplayPresentInfoKHR> (void)
{
	return VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR;
}

template<> VkStructureType getStructureType<VkImportMemoryFdInfoKHR> (void)
{
	return VK_STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR;
}

template<> VkStructureType getStructureType<VkMemoryFdPropertiesKHR> (void)
{
	return VK_STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHR;
}

template<> VkStructureType getStructureType<VkMemoryGetFdInfoKHR> (void)
{
	return VK_STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR;
}

template<> VkStructureType getStructureType<VkImportSemaphoreFdInfoKHR> (void)
{
	return VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR;
}

template<> VkStructureType getStructureType<VkSemaphoreGetFdInfoKHR> (void)
{
	return VK_STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR;
}

template<> VkStructureType getStructureType<VkPresentRegionsKHR> (void)
{
	return VK_STRUCTURE_TYPE_PRESENT_REGIONS_KHR;
}

template<> VkStructureType getStructureType<VkSharedPresentSurfaceCapabilitiesKHR> (void)
{
	return VK_STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR;
}

template<> VkStructureType getStructureType<VkImportFenceFdInfoKHR> (void)
{
	return VK_STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR;
}

template<> VkStructureType getStructureType<VkFenceGetFdInfoKHR> (void)
{
	return VK_STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR;
}

template<> VkStructureType getStructureType<VkPhysicalDevicePerformanceQueryFeaturesKHR> (void)
{
	return VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_FEATURES_KHR;
}

template<> VkStructureType getStructureType<VkPhysicalDevicePerformanceQueryPropertiesKHR> (void)
{
	return VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_PROPERTIES_KHR;
}

template<> VkStructureType getStructureType<VkPerformanceCounterKHR> (void)
{
	return VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_KHR;
}

template<> VkStructureType getStructureType<VkPerformanceCounterDescriptionKHR> (void)
{
	return VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_DESCRIPTION_KHR;
}

template<> VkStructureType getStructureType<VkQueryPoolPerformanceCreateInfoKHR> (void)
{
	return VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_CREATE_INFO_KHR;
}

template<> VkStructureType getStructureType<VkAcquireProfilingLockInfoKHR> (void)
{
	return VK_STRUCTURE_TYPE_ACQUIRE_PROFILING_LOCK_INFO_KHR;
}

template<> VkStructureType getStructureType<VkPerformanceQuerySubmitInfoKHR> (void)
{
	return VK_STRUCTURE_TYPE_PERFORMANCE_QUERY_SUBMIT_INFO_KHR;
}

template<> VkStructureType getStructureType<VkPerformanceQueryReservationInfoKHR> (void)
{
	return VK_STRUCTURE_TYPE_PERFORMANCE_QUERY_RESERVATION_INFO_KHR;
}

template<> VkStructureType getStructureType<VkPhysicalDeviceSurfaceInfo2KHR> (void)
{
	return VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR;
}

template<> VkStructureType getStructureType<VkSurfaceCapabilities2KHR> (void)
{
	return VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR;
}

template<> VkStructureType getStructureType<VkSurfaceFormat2KHR> (void)
{
	return VK_STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR;
}

template<> VkStructureType getStructureType<VkDisplayProperties2KHR> (void)
{
	return VK_STRUCTURE_TYPE_DISPLAY_PROPERTIES_2_KHR;
}

template<> VkStructureType getStructureType<VkDisplayPlaneProperties2KHR> (void)
{
	return VK_STRUCTURE_TYPE_DISPLAY_PLANE_PROPERTIES_2_KHR;
}

template<> VkStructureType getStructureType<VkDisplayModeProperties2KHR> (void)
{
	return VK_STRUCTURE_TYPE_DISPLAY_MODE_PROPERTIES_2_KHR;
}

template<> VkStructureType getStructureType<VkDisplayPlaneInfo2KHR> (void)
{
	return VK_STRUCTURE_TYPE_DISPLAY_PLANE_INFO_2_KHR;
}

template<> VkStructureType getStructureType<VkDisplayPlaneCapabilities2KHR> (void)
{
	return VK_STRUCTURE_TYPE_DISPLAY_PLANE_CAPABILITIES_2_KHR;
}

template<> VkStructureType getStructureType<VkPhysicalDeviceShaderClockFeaturesKHR> (void)
{
	return VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CLOCK_FEATURES_KHR;
}

template<> VkStructureType getStructureType<VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR> (void)
{
	return VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES_KHR;
}

template<> VkStructureType getStructureType<VkFragmentShadingRateAttachmentInfoKHR> (void)
{
	return VK_STRUCTURE_TYPE_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR;
}

template<> VkStructureType getStructureType<VkPipelineFragmentShadingRateStateCreateInfoKHR> (void)
{
	return VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_STATE_CREATE_INFO_KHR;
}

template<> VkStructureType getStructureType<VkPhysicalDeviceFragmentShadingRateFeaturesKHR> (void)
{
	return VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_FEATURES_KHR;
}

template<> VkStructureType getStructureType<VkPhysicalDeviceFragmentShadingRatePropertiesKHR> (void)
{
	return VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_PROPERTIES_KHR;
}

template<> VkStructureType getStructureType<VkPhysicalDeviceFragmentShadingRateKHR> (void)
{
	return VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_KHR;
}

template<> VkStructureType getStructureType<VkRefreshObjectListKHR> (void)
{
	return VK_STRUCTURE_TYPE_REFRESH_OBJECT_LIST_KHR;
}

template<> VkStructureType getStructureType<VkMemoryBarrier2KHR> (void)
{
	return VK_STRUCTURE_TYPE_MEMORY_BARRIER_2_KHR;
}

template<> VkStructureType getStructureType<VkBufferMemoryBarrier2KHR> (void)
{
	return VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER_2_KHR;
}

template<> VkStructureType getStructureType<VkImageMemoryBarrier2KHR> (void)
{
	return VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER_2_KHR;
}

template<> VkStructureType getStructureType<VkDependencyInfoKHR> (void)
{
	return VK_STRUCTURE_TYPE_DEPENDENCY_INFO_KHR;
}

template<> VkStructureType getStructureType<VkSemaphoreSubmitInfoKHR> (void)
{
	return VK_STRUCTURE_TYPE_SEMAPHORE_SUBMIT_INFO_KHR;
}

template<> VkStructureType getStructureType<VkCommandBufferSubmitInfoKHR> (void)
{
	return VK_STRUCTURE_TYPE_COMMAND_BUFFER_SUBMIT_INFO_KHR;
}

template<> VkStructureType getStructureType<VkSubmitInfo2KHR> (void)
{
	return VK_STRUCTURE_TYPE_SUBMIT_INFO_2_KHR;
}

template<> VkStructureType getStructureType<VkPhysicalDeviceSynchronization2FeaturesKHR> (void)
{
	return VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES_KHR;
}

template<> VkStructureType getStructureType<VkQueueFamilyCheckpointProperties2NV> (void)
{
	return VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_2_NV;
}

template<> VkStructureType getStructureType<VkCheckpointData2NV> (void)
{
	return VK_STRUCTURE_TYPE_CHECKPOINT_DATA_2_NV;
}

template<> VkStructureType getStructureType<VkBufferCopy2KHR> (void)
{
	return VK_STRUCTURE_TYPE_BUFFER_COPY_2_KHR;
}

template<> VkStructureType getStructureType<VkCopyBufferInfo2KHR> (void)
{
	return VK_STRUCTURE_TYPE_COPY_BUFFER_INFO_2_KHR;
}

template<> VkStructureType getStructureType<VkImageCopy2KHR> (void)
{
	return VK_STRUCTURE_TYPE_IMAGE_COPY_2_KHR;
}

template<> VkStructureType getStructureType<VkCopyImageInfo2KHR> (void)
{
	return VK_STRUCTURE_TYPE_COPY_IMAGE_INFO_2_KHR;
}

template<> VkStructureType getStructureType<VkBufferImageCopy2KHR> (void)
{
	return VK_STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2_KHR;
}

template<> VkStructureType getStructureType<VkCopyBufferToImageInfo2KHR> (void)
{
	return VK_STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2_KHR;
}

template<> VkStructureType getStructureType<VkCopyImageToBufferInfo2KHR> (void)
{
	return VK_STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2_KHR;
}

template<> VkStructureType getStructureType<VkImageBlit2KHR> (void)
{
	return VK_STRUCTURE_TYPE_IMAGE_BLIT_2_KHR;
}

template<> VkStructureType getStructureType<VkBlitImageInfo2KHR> (void)
{
	return VK_STRUCTURE_TYPE_BLIT_IMAGE_INFO_2_KHR;
}

template<> VkStructureType getStructureType<VkImageResolve2KHR> (void)
{
	return VK_STRUCTURE_TYPE_IMAGE_RESOLVE_2_KHR;
}

template<> VkStructureType getStructureType<VkResolveImageInfo2KHR> (void)
{
	return VK_STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2_KHR;
}

template<> VkStructureType getStructureType<VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT> (void)
{
	return VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES_EXT;
}

template<> VkStructureType getStructureType<VkImageViewASTCDecodeModeEXT> (void)
{
	return VK_STRUCTURE_TYPE_IMAGE_VIEW_ASTC_DECODE_MODE_EXT;
}

template<> VkStructureType getStructureType<VkPhysicalDeviceASTCDecodeFeaturesEXT> (void)
{
	return VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT;
}

template<> VkStructureType getStructureType<VkSurfaceCapabilities2EXT> (void)
{
	return VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT;
}

template<> VkStructureType getStructureType<VkDisplayPowerInfoEXT> (void)
{
	return VK_STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT;
}

template<> VkStructureType getStructureType<VkDeviceEventInfoEXT> (void)
{
	return VK_STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT;
}

template<> VkStructureType getStructureType<VkDisplayEventInfoEXT> (void)
{
	return VK_STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT;
}

template<> VkStructureType getStructureType<VkSwapchainCounterCreateInfoEXT> (void)
{
	return VK_STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT;
}

template<> VkStructureType getStructureType<VkPhysicalDeviceDiscardRectanglePropertiesEXT> (void)
{
	return VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT;
}

template<> VkStructureType getStructureType<VkPipelineDiscardRectangleStateCreateInfoEXT> (void)
{
	return VK_STRUCTURE_TYPE_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT;
}

template<> VkStructureType getStructureType<VkPhysicalDeviceConservativeRasterizationPropertiesEXT> (void)
{
	return VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT;
}

template<> VkStructureType getStructureType<VkPipelineRasterizationConservativeStateCreateInfoEXT> (void)
{
	return VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT;
}

template<> VkStructureType getStructureType<VkPhysicalDeviceDepthClipEnableFeaturesEXT> (void)
{
	return VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_ENABLE_FEATURES_EXT;
}

template<> VkStructureType getStructureType<VkPipelineRasterizationDepthClipStateCreateInfoEXT> (void)
{
	return VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_DEPTH_CLIP_STATE_CREATE_INFO_EXT;
}

template<> VkStructureType getStructureType<VkHdrMetadataEXT> (void)
{
	return VK_STRUCTURE_TYPE_HDR_METADATA_EXT;
}

template<> VkStructureType getStructureType<VkDebugUtilsLabelEXT> (void)
{
	return VK_STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT;
}

template<> VkStructureType getStructureType<VkDebugUtilsObjectNameInfoEXT> (void)
{
	return VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT;
}

template<> VkStructureType getStructureType<VkDebugUtilsMessengerCallbackDataEXT> (void)
{
	return VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT;
}

template<> VkStructureType getStructureType<VkDebugUtilsMessengerCreateInfoEXT> (void)
{
	return VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT;
}

template<> VkStructureType getStructureType<VkDebugUtilsObjectTagInfoEXT> (void)
{
	return VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT;
}

template<> VkStructureType getStructureType<VkSampleLocationsInfoEXT> (void)
{
	return VK_STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT;
}

template<> VkStructureType getStructureType<VkRenderPassSampleLocationsBeginInfoEXT> (void)
{
	return VK_STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT;
}

template<> VkStructureType getStructureType<VkPipelineSampleLocationsStateCreateInfoEXT> (void)
{
	return VK_STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT;
}

template<> VkStructureType getStructureType<VkPhysicalDeviceSampleLocationsPropertiesEXT> (void)
{
	return VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT;
}

template<> VkStructureType getStructureType<VkMultisamplePropertiesEXT> (void)
{
	return VK_STRUCTURE_TYPE_MULTISAMPLE_PROPERTIES_EXT;
}

template<> VkStructureType getStructureType<VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT> (void)
{
	return VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT;
}

template<> VkStructureType getStructureType<VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT> (void)
{
	return VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT;
}

template<> VkStructureType getStructureType<VkPipelineColorBlendAdvancedStateCreateInfoEXT> (void)
{
	return VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT;
}

template<> VkStructureType getStructureType<VkDrmFormatModifierPropertiesListEXT> (void)
{
	return VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_EXT;
}

template<> VkStructureType getStructureType<VkPhysicalDeviceImageDrmFormatModifierInfoEXT> (void)
{
	return VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_DRM_FORMAT_MODIFIER_INFO_EXT;
}

template<> VkStructureType getStructureType<VkImageDrmFormatModifierListCreateInfoEXT> (void)
{
	return VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_LIST_CREATE_INFO_EXT;
}

template<> VkStructureType getStructureType<VkImageDrmFormatModifierExplicitCreateInfoEXT> (void)
{
	return VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_EXPLICIT_CREATE_INFO_EXT;
}

template<> VkStructureType getStructureType<VkImageDrmFormatModifierPropertiesEXT> (void)
{
	return VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT;
}

template<> VkStructureType getStructureType<VkDrmFormatModifierPropertiesList2EXT> (void)
{
	return VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_2_EXT;
}

template<> VkStructureType getStructureType<VkPhysicalDeviceImageViewImageFormatInfoEXT> (void)
{
	return VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_IMAGE_FORMAT_INFO_EXT;
}

template<> VkStructureType getStructureType<VkFilterCubicImageViewImageFormatPropertiesEXT> (void)
{
	return VK_STRUCTURE_TYPE_FILTER_CUBIC_IMAGE_VIEW_IMAGE_FORMAT_PROPERTIES_EXT;
}

template<> VkStructureType getStructureType<VkDeviceQueueGlobalPriorityCreateInfoEXT> (void)
{
	return VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_EXT;
}

template<> VkStructureType getStructureType<VkImportMemoryHostPointerInfoEXT> (void)
{
	return VK_STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT;
}

template<> VkStructureType getStructureType<VkMemoryHostPointerPropertiesEXT> (void)
{
	return VK_STRUCTURE_TYPE_MEMORY_HOST_POINTER_PROPERTIES_EXT;
}

template<> VkStructureType getStructureType<VkPhysicalDeviceExternalMemoryHostPropertiesEXT> (void)
{
	return VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT;
}

template<> VkStructureType getStructureType<VkCalibratedTimestampInfoEXT> (void)
{
	return VK_STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_EXT;
}

template<> VkStructureType getStructureType<VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT> (void)
{
	return VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT;
}

template<> VkStructureType getStructureType<VkPipelineVertexInputDivisorStateCreateInfoEXT> (void)
{
	return VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT;
}

template<> VkStructureType getStructureType<VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT> (void)
{
	return VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_EXT;
}

template<> VkStructureType getStructureType<VkPhysicalDevicePCIBusInfoPropertiesEXT> (void)
{
	return VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT;
}

template<> VkStructureType getStructureType<VkPhysicalDeviceSubgroupSizeControlFeaturesEXT> (void)
{
	return VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES_EXT;
}

template<> VkStructureType getStructureType<VkPhysicalDeviceSubgroupSizeControlPropertiesEXT> (void)
{
	return VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES_EXT;
}

template<> VkStructureType getStructureType<VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT> (void)
{
	return VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO_EXT;
}

template<> VkStructureType getStructureType<VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT> (void)
{
	return VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_ATOMIC_INT64_FEATURES_EXT;
}

template<> VkStructureType getStructureType<VkPhysicalDeviceMemoryBudgetPropertiesEXT> (void)
{
	return VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT;
}

template<> VkStructureType getStructureType<VkValidationFeaturesEXT> (void)
{
	return VK_STRUCTURE_TYPE_VALIDATION_FEATURES_EXT;
}

template<> VkStructureType getStructureType<VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT> (void)
{
	return VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_INTERLOCK_FEATURES_EXT;
}

template<> VkStructureType getStructureType<VkPhysicalDeviceYcbcrImageArraysFeaturesEXT> (void)
{
	return VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_IMAGE_ARRAYS_FEATURES_EXT;
}

template<> VkStructureType getStructureType<VkHeadlessSurfaceCreateInfoEXT> (void)
{
	return VK_STRUCTURE_TYPE_HEADLESS_SURFACE_CREATE_INFO_EXT;
}

template<> VkStructureType getStructureType<VkPhysicalDeviceLineRasterizationFeaturesEXT> (void)
{
	return VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_EXT;
}

template<> VkStructureType getStructureType<VkPhysicalDeviceLineRasterizationPropertiesEXT> (void)
{
	return VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_EXT;
}

template<> VkStructureType getStructureType<VkPipelineRasterizationLineStateCreateInfoEXT> (void)
{
	return VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_EXT;
}

template<> VkStructureType getStructureType<VkPhysicalDeviceShaderAtomicFloatFeaturesEXT> (void)
{
	return VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_FEATURES_EXT;
}

template<> VkStructureType getStructureType<VkPhysicalDeviceIndexTypeUint8FeaturesEXT> (void)
{
	return VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_EXT;
}

template<> VkStructureType getStructureType<VkPhysicalDeviceExtendedDynamicStateFeaturesEXT> (void)
{
	return VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_FEATURES_EXT;
}

template<> VkStructureType getStructureType<VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT> (void)
{
	return VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES_EXT;
}

template<> VkStructureType getStructureType<VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT> (void)
{
	return VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_FEATURES_EXT;
}

template<> VkStructureType getStructureType<VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT> (void)
{
	return VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES_EXT;
}

template<> VkStructureType getStructureType<VkPhysicalDeviceRobustness2FeaturesEXT> (void)
{
	return VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT;
}

template<> VkStructureType getStructureType<VkPhysicalDeviceRobustness2PropertiesEXT> (void)
{
	return VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_PROPERTIES_EXT;
}

template<> VkStructureType getStructureType<VkSamplerCustomBorderColorCreateInfoEXT> (void)
{
	return VK_STRUCTURE_TYPE_SAMPLER_CUSTOM_BORDER_COLOR_CREATE_INFO_EXT;
}

template<> VkStructureType getStructureType<VkPhysicalDeviceCustomBorderColorPropertiesEXT> (void)
{
	return VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_PROPERTIES_EXT;
}

template<> VkStructureType getStructureType<VkPhysicalDeviceCustomBorderColorFeaturesEXT> (void)
{
	return VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_FEATURES_EXT;
}

template<> VkStructureType getStructureType<VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT> (void)
{
	return VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_2_PLANE_444_FORMATS_FEATURES_EXT;
}

template<> VkStructureType getStructureType<VkPhysicalDeviceImageRobustnessFeaturesEXT> (void)
{
	return VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES_EXT;
}

template<> VkStructureType getStructureType<VkPhysicalDevice4444FormatsFeaturesEXT> (void)
{
	return VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_4444_FORMATS_FEATURES_EXT;
}

template<> VkStructureType getStructureType<VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT> (void)
{
	return VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_INPUT_DYNAMIC_STATE_FEATURES_EXT;
}

template<> VkStructureType getStructureType<VkVertexInputBindingDescription2EXT> (void)
{
	return VK_STRUCTURE_TYPE_VERTEX_INPUT_BINDING_DESCRIPTION_2_EXT;
}

template<> VkStructureType getStructureType<VkVertexInputAttributeDescription2EXT> (void)
{
	return VK_STRUCTURE_TYPE_VERTEX_INPUT_ATTRIBUTE_DESCRIPTION_2_EXT;
}

template<> VkStructureType getStructureType<VkPhysicalDeviceExtendedDynamicState2FeaturesEXT> (void)
{
	return VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_2_FEATURES_EXT;
}

template<> VkStructureType getStructureType<VkPhysicalDeviceColorWriteEnableFeaturesEXT> (void)
{
	return VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COLOR_WRITE_ENABLE_FEATURES_EXT;
}

template<> VkStructureType getStructureType<VkPipelineColorWriteCreateInfoEXT> (void)
{
	return VK_STRUCTURE_TYPE_PIPELINE_COLOR_WRITE_CREATE_INFO_EXT;
}

template<> VkStructureType getStructureType<VkApplicationParametersEXT> (void)
{
	return VK_STRUCTURE_TYPE_APPLICATION_PARAMETERS_EXT;
}

template<> VkStructureType getStructureType<VkExportFenceSciSyncInfoNV> (void)
{
	return VK_STRUCTURE_TYPE_EXPORT_FENCE_SCI_SYNC_INFO_NV;
}

template<> VkStructureType getStructureType<VkImportFenceSciSyncInfoNV> (void)
{
	return VK_STRUCTURE_TYPE_IMPORT_FENCE_SCI_SYNC_INFO_NV;
}

template<> VkStructureType getStructureType<VkFenceGetSciSyncInfoNV> (void)
{
	return VK_STRUCTURE_TYPE_FENCE_GET_SCI_SYNC_INFO_NV;
}

template<> VkStructureType getStructureType<VkSciSyncAttributesInfoNV> (void)
{
	return VK_STRUCTURE_TYPE_SCI_SYNC_ATTRIBUTES_INFO_NV;
}

template<> VkStructureType getStructureType<VkExportSemaphoreSciSyncInfoNV> (void)
{
	return VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_SCI_SYNC_INFO_NV;
}

template<> VkStructureType getStructureType<VkImportSemaphoreSciSyncInfoNV> (void)
{
	return VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_SCI_SYNC_INFO_NV;
}

template<> VkStructureType getStructureType<VkSemaphoreGetSciSyncInfoNV> (void)
{
	return VK_STRUCTURE_TYPE_SEMAPHORE_GET_SCI_SYNC_INFO_NV;
}

template<> VkStructureType getStructureType<VkPhysicalDeviceExternalSciSyncFeaturesNV> (void)
{
	return VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SCI_SYNC_FEATURES_NV;
}

template<> VkStructureType getStructureType<VkExportMemorySciBufInfoNV> (void)
{
	return VK_STRUCTURE_TYPE_EXPORT_MEMORY_SCI_BUF_INFO_NV;
}

template<> VkStructureType getStructureType<VkImportMemorySciBufInfoNV> (void)
{
	return VK_STRUCTURE_TYPE_IMPORT_MEMORY_SCI_BUF_INFO_NV;
}

template<> VkStructureType getStructureType<VkMemoryGetSciBufInfoNV> (void)
{
	return VK_STRUCTURE_TYPE_MEMORY_GET_SCI_BUF_INFO_NV;
}

template<> VkStructureType getStructureType<VkMemorySciBufPropertiesNV> (void)
{
	return VK_STRUCTURE_TYPE_MEMORY_SCI_BUF_PROPERTIES_NV;
}

template<> VkStructureType getStructureType<VkPhysicalDeviceExternalMemorySciBufFeaturesNV> (void)
{
	return VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_SCI_BUF_FEATURES_NV;
}

template<> VkStructureType getStructureType<VkPhysicalDeviceExternalSciSync2FeaturesNV> (void)
{
	return VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SCI_SYNC_2_FEATURES_NV;
}

template<> VkStructureType getStructureType<VkSemaphoreSciSyncPoolCreateInfoNV> (void)
{
	return VK_STRUCTURE_TYPE_SEMAPHORE_SCI_SYNC_POOL_CREATE_INFO_NV;
}

template<> VkStructureType getStructureType<VkSemaphoreSciSyncCreateInfoNV> (void)
{
	return VK_STRUCTURE_TYPE_SEMAPHORE_SCI_SYNC_CREATE_INFO_NV;
}

template<> VkStructureType getStructureType<VkDeviceSemaphoreSciSyncPoolReservationCreateInfoNV> (void)
{
	return VK_STRUCTURE_TYPE_DEVICE_SEMAPHORE_SCI_SYNC_POOL_RESERVATION_CREATE_INFO_NV;
}

