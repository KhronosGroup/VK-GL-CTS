/* WARNING: This is auto-generated file. Do not modify, since changes will
 * be lost! Modify the generating script instead.
 * This file was generated by /scripts/gen_framework.py
 */
#include "vkDeviceProperties.hpp"

#include <set>

namespace vk
{

#define DECL_CORE_PROPERTIES_NAME "core_properties"

template<> void initPropertyFromBlob<VkPhysicalDeviceDepthStencilResolveProperties>(VkPhysicalDeviceDepthStencilResolveProperties& propertiesType, const AllPropertiesBlobs& allBlobs)
{
	propertiesType.supportedDepthResolveModes = allBlobs.vk12.supportedDepthResolveModes;
	propertiesType.supportedStencilResolveModes = allBlobs.vk12.supportedStencilResolveModes;
	propertiesType.independentResolveNone = allBlobs.vk12.independentResolveNone;
	propertiesType.independentResolve = allBlobs.vk12.independentResolve;
}
template<> void initPropertyFromBlob<VkPhysicalDeviceDescriptorIndexingProperties>(VkPhysicalDeviceDescriptorIndexingProperties& propertiesType, const AllPropertiesBlobs& allBlobs)
{
	propertiesType.maxUpdateAfterBindDescriptorsInAllPools = allBlobs.vk12.maxUpdateAfterBindDescriptorsInAllPools;
	propertiesType.shaderUniformBufferArrayNonUniformIndexingNative = allBlobs.vk12.shaderUniformBufferArrayNonUniformIndexingNative;
	propertiesType.shaderSampledImageArrayNonUniformIndexingNative = allBlobs.vk12.shaderSampledImageArrayNonUniformIndexingNative;
	propertiesType.shaderStorageBufferArrayNonUniformIndexingNative = allBlobs.vk12.shaderStorageBufferArrayNonUniformIndexingNative;
	propertiesType.shaderStorageImageArrayNonUniformIndexingNative = allBlobs.vk12.shaderStorageImageArrayNonUniformIndexingNative;
	propertiesType.shaderInputAttachmentArrayNonUniformIndexingNative = allBlobs.vk12.shaderInputAttachmentArrayNonUniformIndexingNative;
	propertiesType.robustBufferAccessUpdateAfterBind = allBlobs.vk12.robustBufferAccessUpdateAfterBind;
	propertiesType.quadDivergentImplicitLod = allBlobs.vk12.quadDivergentImplicitLod;
	propertiesType.maxPerStageDescriptorUpdateAfterBindSamplers = allBlobs.vk12.maxPerStageDescriptorUpdateAfterBindSamplers;
	propertiesType.maxPerStageDescriptorUpdateAfterBindUniformBuffers = allBlobs.vk12.maxPerStageDescriptorUpdateAfterBindUniformBuffers;
	propertiesType.maxPerStageDescriptorUpdateAfterBindStorageBuffers = allBlobs.vk12.maxPerStageDescriptorUpdateAfterBindStorageBuffers;
	propertiesType.maxPerStageDescriptorUpdateAfterBindSampledImages = allBlobs.vk12.maxPerStageDescriptorUpdateAfterBindSampledImages;
	propertiesType.maxPerStageDescriptorUpdateAfterBindStorageImages = allBlobs.vk12.maxPerStageDescriptorUpdateAfterBindStorageImages;
	propertiesType.maxPerStageDescriptorUpdateAfterBindInputAttachments = allBlobs.vk12.maxPerStageDescriptorUpdateAfterBindInputAttachments;
	propertiesType.maxPerStageUpdateAfterBindResources = allBlobs.vk12.maxPerStageUpdateAfterBindResources;
	propertiesType.maxDescriptorSetUpdateAfterBindSamplers = allBlobs.vk12.maxDescriptorSetUpdateAfterBindSamplers;
	propertiesType.maxDescriptorSetUpdateAfterBindUniformBuffers = allBlobs.vk12.maxDescriptorSetUpdateAfterBindUniformBuffers;
	propertiesType.maxDescriptorSetUpdateAfterBindUniformBuffersDynamic = allBlobs.vk12.maxDescriptorSetUpdateAfterBindUniformBuffersDynamic;
	propertiesType.maxDescriptorSetUpdateAfterBindStorageBuffers = allBlobs.vk12.maxDescriptorSetUpdateAfterBindStorageBuffers;
	propertiesType.maxDescriptorSetUpdateAfterBindStorageBuffersDynamic = allBlobs.vk12.maxDescriptorSetUpdateAfterBindStorageBuffersDynamic;
	propertiesType.maxDescriptorSetUpdateAfterBindSampledImages = allBlobs.vk12.maxDescriptorSetUpdateAfterBindSampledImages;
	propertiesType.maxDescriptorSetUpdateAfterBindStorageImages = allBlobs.vk12.maxDescriptorSetUpdateAfterBindStorageImages;
	propertiesType.maxDescriptorSetUpdateAfterBindInputAttachments = allBlobs.vk12.maxDescriptorSetUpdateAfterBindInputAttachments;
}
template<> void initPropertyFromBlob<VkPhysicalDeviceDriverProperties>(VkPhysicalDeviceDriverProperties& propertiesType, const AllPropertiesBlobs& allBlobs)
{
	propertiesType.driverID = allBlobs.vk12.driverID;
	memcpy(propertiesType.driverName, allBlobs.vk12.driverName, sizeof(char) * VK_MAX_DRIVER_NAME_SIZE);
	memcpy(propertiesType.driverInfo, allBlobs.vk12.driverInfo, sizeof(char) * VK_MAX_DRIVER_INFO_SIZE);
	propertiesType.conformanceVersion = allBlobs.vk12.conformanceVersion;
}
template<> void initPropertyFromBlob<VkPhysicalDeviceFloatControlsProperties>(VkPhysicalDeviceFloatControlsProperties& propertiesType, const AllPropertiesBlobs& allBlobs)
{
	propertiesType.denormBehaviorIndependence = allBlobs.vk12.denormBehaviorIndependence;
	propertiesType.roundingModeIndependence = allBlobs.vk12.roundingModeIndependence;
	propertiesType.shaderSignedZeroInfNanPreserveFloat16 = allBlobs.vk12.shaderSignedZeroInfNanPreserveFloat16;
	propertiesType.shaderSignedZeroInfNanPreserveFloat32 = allBlobs.vk12.shaderSignedZeroInfNanPreserveFloat32;
	propertiesType.shaderSignedZeroInfNanPreserveFloat64 = allBlobs.vk12.shaderSignedZeroInfNanPreserveFloat64;
	propertiesType.shaderDenormPreserveFloat16 = allBlobs.vk12.shaderDenormPreserveFloat16;
	propertiesType.shaderDenormPreserveFloat32 = allBlobs.vk12.shaderDenormPreserveFloat32;
	propertiesType.shaderDenormPreserveFloat64 = allBlobs.vk12.shaderDenormPreserveFloat64;
	propertiesType.shaderDenormFlushToZeroFloat16 = allBlobs.vk12.shaderDenormFlushToZeroFloat16;
	propertiesType.shaderDenormFlushToZeroFloat32 = allBlobs.vk12.shaderDenormFlushToZeroFloat32;
	propertiesType.shaderDenormFlushToZeroFloat64 = allBlobs.vk12.shaderDenormFlushToZeroFloat64;
	propertiesType.shaderRoundingModeRTEFloat16 = allBlobs.vk12.shaderRoundingModeRTEFloat16;
	propertiesType.shaderRoundingModeRTEFloat32 = allBlobs.vk12.shaderRoundingModeRTEFloat32;
	propertiesType.shaderRoundingModeRTEFloat64 = allBlobs.vk12.shaderRoundingModeRTEFloat64;
	propertiesType.shaderRoundingModeRTZFloat16 = allBlobs.vk12.shaderRoundingModeRTZFloat16;
	propertiesType.shaderRoundingModeRTZFloat32 = allBlobs.vk12.shaderRoundingModeRTZFloat32;
	propertiesType.shaderRoundingModeRTZFloat64 = allBlobs.vk12.shaderRoundingModeRTZFloat64;
}
template<> void initPropertyFromBlob<VkPhysicalDeviceIDProperties>(VkPhysicalDeviceIDProperties& propertiesType, const AllPropertiesBlobs& allBlobs)
{
	memcpy(propertiesType.deviceUUID, allBlobs.vk11.deviceUUID, sizeof(uint8_t) * VK_UUID_SIZE);
	memcpy(propertiesType.driverUUID, allBlobs.vk11.driverUUID, sizeof(uint8_t) * VK_UUID_SIZE);
	memcpy(propertiesType.deviceLUID, allBlobs.vk11.deviceLUID, sizeof(uint8_t) * VK_LUID_SIZE);
	propertiesType.deviceNodeMask = allBlobs.vk11.deviceNodeMask;
	propertiesType.deviceLUIDValid = allBlobs.vk11.deviceLUIDValid;
}
template<> void initPropertyFromBlob<VkPhysicalDeviceMaintenance3Properties>(VkPhysicalDeviceMaintenance3Properties& propertiesType, const AllPropertiesBlobs& allBlobs)
{
	propertiesType.maxPerSetDescriptors = allBlobs.vk11.maxPerSetDescriptors;
	propertiesType.maxMemoryAllocationSize = allBlobs.vk11.maxMemoryAllocationSize;
}
template<> void initPropertyFromBlob<VkPhysicalDeviceMultiviewProperties>(VkPhysicalDeviceMultiviewProperties& propertiesType, const AllPropertiesBlobs& allBlobs)
{
	propertiesType.maxMultiviewViewCount = allBlobs.vk11.maxMultiviewViewCount;
	propertiesType.maxMultiviewInstanceIndex = allBlobs.vk11.maxMultiviewInstanceIndex;
}
template<> void initPropertyFromBlob<VkPhysicalDevicePointClippingProperties>(VkPhysicalDevicePointClippingProperties& propertiesType, const AllPropertiesBlobs& allBlobs)
{
	propertiesType.pointClippingBehavior = allBlobs.vk11.pointClippingBehavior;
}
template<> void initPropertyFromBlob<VkPhysicalDeviceProtectedMemoryProperties>(VkPhysicalDeviceProtectedMemoryProperties& propertiesType, const AllPropertiesBlobs& allBlobs)
{
	propertiesType.protectedNoFault = allBlobs.vk11.protectedNoFault;
}
template<> void initPropertyFromBlob<VkPhysicalDeviceSamplerFilterMinmaxProperties>(VkPhysicalDeviceSamplerFilterMinmaxProperties& propertiesType, const AllPropertiesBlobs& allBlobs)
{
	propertiesType.filterMinmaxSingleComponentFormats = allBlobs.vk12.filterMinmaxSingleComponentFormats;
	propertiesType.filterMinmaxImageComponentMapping = allBlobs.vk12.filterMinmaxImageComponentMapping;
}
template<> void initPropertyFromBlob<VkPhysicalDeviceSubgroupProperties>(VkPhysicalDeviceSubgroupProperties& propertiesType, const AllPropertiesBlobs& allBlobs)
{
	propertiesType.subgroupSize = allBlobs.vk11.subgroupSize;
	propertiesType.supportedStages = allBlobs.vk11.subgroupSupportedStages;
	propertiesType.supportedOperations = allBlobs.vk11.subgroupSupportedOperations;
	propertiesType.quadOperationsInAllStages = allBlobs.vk11.subgroupQuadOperationsInAllStages;
}
template<> void initPropertyFromBlob<VkPhysicalDeviceTimelineSemaphoreProperties>(VkPhysicalDeviceTimelineSemaphoreProperties& propertiesType, const AllPropertiesBlobs& allBlobs)
{
	propertiesType.maxTimelineSemaphoreValueDifference = allBlobs.vk12.maxTimelineSemaphoreValueDifference;
}

// generic template is not enough for some compilers
template<> void initPropertyFromBlob<VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT>(VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT&, const AllPropertiesBlobs&) {}
template<> void initPropertyFromBlob<VkPhysicalDeviceConservativeRasterizationPropertiesEXT>(VkPhysicalDeviceConservativeRasterizationPropertiesEXT&, const AllPropertiesBlobs&) {}
template<> void initPropertyFromBlob<VkPhysicalDeviceCustomBorderColorPropertiesEXT>(VkPhysicalDeviceCustomBorderColorPropertiesEXT&, const AllPropertiesBlobs&) {}
template<> void initPropertyFromBlob<VkPhysicalDeviceDiscardRectanglePropertiesEXT>(VkPhysicalDeviceDiscardRectanglePropertiesEXT&, const AllPropertiesBlobs&) {}
template<> void initPropertyFromBlob<VkPhysicalDeviceExternalMemoryHostPropertiesEXT>(VkPhysicalDeviceExternalMemoryHostPropertiesEXT&, const AllPropertiesBlobs&) {}
template<> void initPropertyFromBlob<VkPhysicalDeviceFragmentShadingRatePropertiesKHR>(VkPhysicalDeviceFragmentShadingRatePropertiesKHR&, const AllPropertiesBlobs&) {}
template<> void initPropertyFromBlob<VkPhysicalDeviceHostImageCopyProperties>(VkPhysicalDeviceHostImageCopyProperties&, const AllPropertiesBlobs&) {}
template<> void initPropertyFromBlob<VkPhysicalDeviceInlineUniformBlockProperties>(VkPhysicalDeviceInlineUniformBlockProperties&, const AllPropertiesBlobs&) {}
template<> void initPropertyFromBlob<VkPhysicalDeviceLineRasterizationProperties>(VkPhysicalDeviceLineRasterizationProperties&, const AllPropertiesBlobs&) {}
template<> void initPropertyFromBlob<VkPhysicalDeviceMaintenance4Properties>(VkPhysicalDeviceMaintenance4Properties&, const AllPropertiesBlobs&) {}
template<> void initPropertyFromBlob<VkPhysicalDeviceMaintenance5Properties>(VkPhysicalDeviceMaintenance5Properties&, const AllPropertiesBlobs&) {}
template<> void initPropertyFromBlob<VkPhysicalDeviceMaintenance6Properties>(VkPhysicalDeviceMaintenance6Properties&, const AllPropertiesBlobs&) {}
template<> void initPropertyFromBlob<VkPhysicalDevicePCIBusInfoPropertiesEXT>(VkPhysicalDevicePCIBusInfoPropertiesEXT&, const AllPropertiesBlobs&) {}
template<> void initPropertyFromBlob<VkPhysicalDevicePerformanceQueryPropertiesKHR>(VkPhysicalDevicePerformanceQueryPropertiesKHR&, const AllPropertiesBlobs&) {}
template<> void initPropertyFromBlob<VkPhysicalDevicePipelineRobustnessProperties>(VkPhysicalDevicePipelineRobustnessProperties&, const AllPropertiesBlobs&) {}
template<> void initPropertyFromBlob<VkPhysicalDevicePushDescriptorProperties>(VkPhysicalDevicePushDescriptorProperties&, const AllPropertiesBlobs&) {}
template<> void initPropertyFromBlob<VkPhysicalDeviceRobustness2PropertiesKHR>(VkPhysicalDeviceRobustness2PropertiesKHR&, const AllPropertiesBlobs&) {}
template<> void initPropertyFromBlob<VkPhysicalDeviceSampleLocationsPropertiesEXT>(VkPhysicalDeviceSampleLocationsPropertiesEXT&, const AllPropertiesBlobs&) {}
template<> void initPropertyFromBlob<VkPhysicalDeviceShaderIntegerDotProductProperties>(VkPhysicalDeviceShaderIntegerDotProductProperties&, const AllPropertiesBlobs&) {}
template<> void initPropertyFromBlob<VkPhysicalDeviceSubgroupSizeControlProperties>(VkPhysicalDeviceSubgroupSizeControlProperties&, const AllPropertiesBlobs&) {}
template<> void initPropertyFromBlob<VkPhysicalDeviceTexelBufferAlignmentProperties>(VkPhysicalDeviceTexelBufferAlignmentProperties&, const AllPropertiesBlobs&) {}
template<> void initPropertyFromBlob<VkPhysicalDeviceVertexAttributeDivisorProperties>(VkPhysicalDeviceVertexAttributeDivisorProperties&, const AllPropertiesBlobs&) {}

template<> PropertyDesc makePropertyDesc<VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT>(void) { return PropertyDesc{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT, VK_EXT_BLEND_OPERATION_ADVANCED_EXTENSION_NAME}; }
template<> PropertyDesc makePropertyDesc<VkPhysicalDeviceConservativeRasterizationPropertiesEXT>(void) { return PropertyDesc{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT, VK_EXT_CONSERVATIVE_RASTERIZATION_EXTENSION_NAME}; }
template<> PropertyDesc makePropertyDesc<VkPhysicalDeviceCustomBorderColorPropertiesEXT>(void) { return PropertyDesc{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_PROPERTIES_EXT, VK_EXT_CUSTOM_BORDER_COLOR_EXTENSION_NAME}; }
template<> PropertyDesc makePropertyDesc<VkPhysicalDeviceDepthStencilResolveProperties>(void) { return PropertyDesc{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES, DECL_CORE_PROPERTIES_NAME}; }
template<> PropertyDesc makePropertyDesc<VkPhysicalDeviceDescriptorIndexingProperties>(void) { return PropertyDesc{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES, DECL_CORE_PROPERTIES_NAME}; }
template<> PropertyDesc makePropertyDesc<VkPhysicalDeviceDiscardRectanglePropertiesEXT>(void) { return PropertyDesc{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT, VK_EXT_DISCARD_RECTANGLES_EXTENSION_NAME}; }
template<> PropertyDesc makePropertyDesc<VkPhysicalDeviceDriverProperties>(void) { return PropertyDesc{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES, DECL_CORE_PROPERTIES_NAME}; }
template<> PropertyDesc makePropertyDesc<VkPhysicalDeviceExternalMemoryHostPropertiesEXT>(void) { return PropertyDesc{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT, VK_EXT_EXTERNAL_MEMORY_HOST_EXTENSION_NAME}; }
template<> PropertyDesc makePropertyDesc<VkPhysicalDeviceFloatControlsProperties>(void) { return PropertyDesc{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES, DECL_CORE_PROPERTIES_NAME}; }
template<> PropertyDesc makePropertyDesc<VkPhysicalDeviceFragmentShadingRatePropertiesKHR>(void) { return PropertyDesc{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_PROPERTIES_KHR, VK_KHR_FRAGMENT_SHADING_RATE_EXTENSION_NAME}; }
template<> PropertyDesc makePropertyDesc<VkPhysicalDeviceHostImageCopyProperties>(void) { return PropertyDesc{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_IMAGE_COPY_PROPERTIES, DECL_CORE_PROPERTIES_NAME}; }
template<> PropertyDesc makePropertyDesc<VkPhysicalDeviceIDProperties>(void) { return PropertyDesc{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES, DECL_CORE_PROPERTIES_NAME}; }
template<> PropertyDesc makePropertyDesc<VkPhysicalDeviceInlineUniformBlockProperties>(void) { return PropertyDesc{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES, DECL_CORE_PROPERTIES_NAME}; }
template<> PropertyDesc makePropertyDesc<VkPhysicalDeviceLineRasterizationProperties>(void) { return PropertyDesc{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES, VK_KHR_LINE_RASTERIZATION_EXTENSION_NAME}; }
template<> PropertyDesc makePropertyDesc<VkPhysicalDeviceMaintenance3Properties>(void) { return PropertyDesc{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES, DECL_CORE_PROPERTIES_NAME}; }
template<> PropertyDesc makePropertyDesc<VkPhysicalDeviceMaintenance4Properties>(void) { return PropertyDesc{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_PROPERTIES, DECL_CORE_PROPERTIES_NAME}; }
template<> PropertyDesc makePropertyDesc<VkPhysicalDeviceMaintenance5Properties>(void) { return PropertyDesc{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_5_PROPERTIES, DECL_CORE_PROPERTIES_NAME}; }
template<> PropertyDesc makePropertyDesc<VkPhysicalDeviceMaintenance6Properties>(void) { return PropertyDesc{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_6_PROPERTIES, DECL_CORE_PROPERTIES_NAME}; }
template<> PropertyDesc makePropertyDesc<VkPhysicalDeviceMultiviewProperties>(void) { return PropertyDesc{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES, DECL_CORE_PROPERTIES_NAME}; }
template<> PropertyDesc makePropertyDesc<VkPhysicalDevicePCIBusInfoPropertiesEXT>(void) { return PropertyDesc{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT, VK_EXT_PCI_BUS_INFO_EXTENSION_NAME}; }
template<> PropertyDesc makePropertyDesc<VkPhysicalDevicePerformanceQueryPropertiesKHR>(void) { return PropertyDesc{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_PROPERTIES_KHR, VK_KHR_PERFORMANCE_QUERY_EXTENSION_NAME}; }
template<> PropertyDesc makePropertyDesc<VkPhysicalDevicePipelineRobustnessProperties>(void) { return PropertyDesc{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_PROPERTIES, DECL_CORE_PROPERTIES_NAME}; }
template<> PropertyDesc makePropertyDesc<VkPhysicalDevicePointClippingProperties>(void) { return PropertyDesc{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES, DECL_CORE_PROPERTIES_NAME}; }
template<> PropertyDesc makePropertyDesc<VkPhysicalDeviceProtectedMemoryProperties>(void) { return PropertyDesc{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES, DECL_CORE_PROPERTIES_NAME}; }
template<> PropertyDesc makePropertyDesc<VkPhysicalDevicePushDescriptorProperties>(void) { return PropertyDesc{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES, DECL_CORE_PROPERTIES_NAME}; }
template<> PropertyDesc makePropertyDesc<VkPhysicalDeviceRobustness2PropertiesKHR>(void) { return PropertyDesc{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_PROPERTIES_KHR, VK_EXT_ROBUSTNESS_2_EXTENSION_NAME}; }
template<> PropertyDesc makePropertyDesc<VkPhysicalDeviceSampleLocationsPropertiesEXT>(void) { return PropertyDesc{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT, VK_EXT_SAMPLE_LOCATIONS_EXTENSION_NAME}; }
template<> PropertyDesc makePropertyDesc<VkPhysicalDeviceSamplerFilterMinmaxProperties>(void) { return PropertyDesc{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES, DECL_CORE_PROPERTIES_NAME}; }
template<> PropertyDesc makePropertyDesc<VkPhysicalDeviceShaderIntegerDotProductProperties>(void) { return PropertyDesc{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_PROPERTIES, DECL_CORE_PROPERTIES_NAME}; }
template<> PropertyDesc makePropertyDesc<VkPhysicalDeviceSubgroupProperties>(void) { return PropertyDesc{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES, DECL_CORE_PROPERTIES_NAME}; }
template<> PropertyDesc makePropertyDesc<VkPhysicalDeviceSubgroupSizeControlProperties>(void) { return PropertyDesc{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES, VK_EXT_SUBGROUP_SIZE_CONTROL_EXTENSION_NAME}; }
template<> PropertyDesc makePropertyDesc<VkPhysicalDeviceTexelBufferAlignmentProperties>(void) { return PropertyDesc{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES, VK_EXT_TEXEL_BUFFER_ALIGNMENT_EXTENSION_NAME}; }
template<> PropertyDesc makePropertyDesc<VkPhysicalDeviceTimelineSemaphoreProperties>(void) { return PropertyDesc{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES, DECL_CORE_PROPERTIES_NAME}; }
template<> PropertyDesc makePropertyDesc<VkPhysicalDeviceVertexAttributeDivisorProperties>(void) { return PropertyDesc{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES, VK_KHR_VERTEX_ATTRIBUTE_DIVISOR_EXTENSION_NAME}; }

static const PropertyStructCreationData propertyStructCreationArray[]
{
	{ createPropertyStructWrapper<VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT>, VK_EXT_BLEND_OPERATION_ADVANCED_EXTENSION_NAME },
	{ createPropertyStructWrapper<VkPhysicalDeviceConservativeRasterizationPropertiesEXT>, VK_EXT_CONSERVATIVE_RASTERIZATION_EXTENSION_NAME },
	{ createPropertyStructWrapper<VkPhysicalDeviceCustomBorderColorPropertiesEXT>, VK_EXT_CUSTOM_BORDER_COLOR_EXTENSION_NAME },
	{ createPropertyStructWrapper<VkPhysicalDeviceDepthStencilResolveProperties>, DECL_CORE_PROPERTIES_NAME },
	{ createPropertyStructWrapper<VkPhysicalDeviceDescriptorIndexingProperties>, DECL_CORE_PROPERTIES_NAME },
	{ createPropertyStructWrapper<VkPhysicalDeviceDiscardRectanglePropertiesEXT>, VK_EXT_DISCARD_RECTANGLES_EXTENSION_NAME },
	{ createPropertyStructWrapper<VkPhysicalDeviceDriverProperties>, DECL_CORE_PROPERTIES_NAME },
	{ createPropertyStructWrapper<VkPhysicalDeviceExternalMemoryHostPropertiesEXT>, VK_EXT_EXTERNAL_MEMORY_HOST_EXTENSION_NAME },
	{ createPropertyStructWrapper<VkPhysicalDeviceFloatControlsProperties>, DECL_CORE_PROPERTIES_NAME },
	{ createPropertyStructWrapper<VkPhysicalDeviceFragmentShadingRatePropertiesKHR>, VK_KHR_FRAGMENT_SHADING_RATE_EXTENSION_NAME },
	{ createPropertyStructWrapper<VkPhysicalDeviceHostImageCopyProperties>, DECL_CORE_PROPERTIES_NAME },
	{ createPropertyStructWrapper<VkPhysicalDeviceIDProperties>, DECL_CORE_PROPERTIES_NAME },
	{ createPropertyStructWrapper<VkPhysicalDeviceInlineUniformBlockProperties>, DECL_CORE_PROPERTIES_NAME },
	{ createPropertyStructWrapper<VkPhysicalDeviceLineRasterizationProperties>, VK_KHR_LINE_RASTERIZATION_EXTENSION_NAME },
	{ createPropertyStructWrapper<VkPhysicalDeviceMaintenance3Properties>, DECL_CORE_PROPERTIES_NAME },
	{ createPropertyStructWrapper<VkPhysicalDeviceMaintenance4Properties>, DECL_CORE_PROPERTIES_NAME },
	{ createPropertyStructWrapper<VkPhysicalDeviceMaintenance5Properties>, DECL_CORE_PROPERTIES_NAME },
	{ createPropertyStructWrapper<VkPhysicalDeviceMaintenance6Properties>, DECL_CORE_PROPERTIES_NAME },
	{ createPropertyStructWrapper<VkPhysicalDeviceMultiviewProperties>, DECL_CORE_PROPERTIES_NAME },
	{ createPropertyStructWrapper<VkPhysicalDevicePCIBusInfoPropertiesEXT>, VK_EXT_PCI_BUS_INFO_EXTENSION_NAME },
	{ createPropertyStructWrapper<VkPhysicalDevicePerformanceQueryPropertiesKHR>, VK_KHR_PERFORMANCE_QUERY_EXTENSION_NAME },
	{ createPropertyStructWrapper<VkPhysicalDevicePipelineRobustnessProperties>, DECL_CORE_PROPERTIES_NAME },
	{ createPropertyStructWrapper<VkPhysicalDevicePointClippingProperties>, DECL_CORE_PROPERTIES_NAME },
	{ createPropertyStructWrapper<VkPhysicalDeviceProtectedMemoryProperties>, DECL_CORE_PROPERTIES_NAME },
	{ createPropertyStructWrapper<VkPhysicalDevicePushDescriptorProperties>, DECL_CORE_PROPERTIES_NAME },
	{ createPropertyStructWrapper<VkPhysicalDeviceRobustness2PropertiesKHR>, VK_EXT_ROBUSTNESS_2_EXTENSION_NAME },
	{ createPropertyStructWrapper<VkPhysicalDeviceSampleLocationsPropertiesEXT>, VK_EXT_SAMPLE_LOCATIONS_EXTENSION_NAME },
	{ createPropertyStructWrapper<VkPhysicalDeviceSamplerFilterMinmaxProperties>, DECL_CORE_PROPERTIES_NAME },
	{ createPropertyStructWrapper<VkPhysicalDeviceShaderIntegerDotProductProperties>, DECL_CORE_PROPERTIES_NAME },
	{ createPropertyStructWrapper<VkPhysicalDeviceSubgroupProperties>, DECL_CORE_PROPERTIES_NAME },
	{ createPropertyStructWrapper<VkPhysicalDeviceSubgroupSizeControlProperties>, VK_EXT_SUBGROUP_SIZE_CONTROL_EXTENSION_NAME },
	{ createPropertyStructWrapper<VkPhysicalDeviceTexelBufferAlignmentProperties>, VK_EXT_TEXEL_BUFFER_ALIGNMENT_EXTENSION_NAME },
	{ createPropertyStructWrapper<VkPhysicalDeviceTimelineSemaphoreProperties>, DECL_CORE_PROPERTIES_NAME },
	{ createPropertyStructWrapper<VkPhysicalDeviceVertexAttributeDivisorProperties>, VK_KHR_VERTEX_ATTRIBUTE_DIVISOR_EXTENSION_NAME },
};

const std::string getPreviousPropertyExtName (const std::string &name)
{
	const std::map<std::string, std::string> previousExtensionsMap {
		{ "VK_KHR_line_rasterization", "VK_EXT_line_rasterization" },

	};

	auto it = previousExtensionsMap.find(name);
	if(it == previousExtensionsMap.end())
		return {};
	return it->second;
}

static const std::map<VkStructureType, uint32_t> sTypeBlobMap
{
	// VkPhysicalDeviceVulkan11Properties
	{ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES,										VK_API_VERSION_1_1 },
	{ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES,							VK_API_VERSION_1_1 },
	{ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES,								VK_API_VERSION_1_1 },
	{ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES,							VK_API_VERSION_1_1 },
	{ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES,						VK_API_VERSION_1_1 },
	{ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES,								VK_API_VERSION_1_1 },
	// VkPhysicalDeviceVulkan12Properties
	{ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES,					VK_API_VERSION_1_2 },
	{ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES,						VK_API_VERSION_1_2 },
	{ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES,									VK_API_VERSION_1_2 },
	{ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES,							VK_API_VERSION_1_2 },
	{ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES,					VK_API_VERSION_1_2 },
	{ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES,						VK_API_VERSION_1_2 },
	// VkPhysicalDeviceVulkan13Properties
	{ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES,					VK_API_VERSION_1_3 },
	{ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_PROPERTIES,							VK_API_VERSION_1_3 },
	{ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_PROPERTIES,				VK_API_VERSION_1_3 },
	{ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES,					VK_API_VERSION_1_3 },
	{ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES,					VK_API_VERSION_1_3 },
	// VkPhysicalDeviceVulkan14Properties
	{ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_IMAGE_COPY_PROPERTIES,							VK_API_VERSION_1_4 },
	{ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES,						VK_API_VERSION_1_4 },
	{ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_5_PROPERTIES,							VK_API_VERSION_1_4 },
	{ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_6_PROPERTIES,							VK_API_VERSION_1_4 },
	{ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_PROPERTIES,						VK_API_VERSION_1_4 },
	{ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES,							VK_API_VERSION_1_4 },
	{ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES,				VK_API_VERSION_1_4 },
	// VkPhysicalDeviceVulkanSC10Properties
};


uint32_t getBlobPropertiesVersion (VkStructureType sType)
{
	auto it = sTypeBlobMap.find(sType);
	if(it == sTypeBlobMap.end())
		return 0;
	return it->second;
}

std::set<VkStructureType> getVersionBlobPropertyList (uint32_t version)
{
	std::set<VkStructureType> features;
	for (const std::pair<const VkStructureType, uint32_t> &item : sTypeBlobMap)
	{
		if (item.second == version)
			features.insert(item.first);
	}
	return features;
}

} // vk

