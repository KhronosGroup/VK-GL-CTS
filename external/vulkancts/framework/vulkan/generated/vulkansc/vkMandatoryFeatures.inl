/* WARNING: This is auto-generated file. Do not modify, since changes will
 * be lost! Modify the generating script instead.
 * This file was generated by /scripts/gen_framework.py
 */

bool canUseFeaturesStruct (const vector<VkExtensionProperties>& deviceExtensions, uint32_t usedApiVersion,
				const char* extension, const char* extensionPromotedFrom = nullptr)
{
	if (isCoreDeviceExtension(usedApiVersion, extension))
		return true;
	if (isExtensionStructSupported(deviceExtensions, RequiredExtension(extension)))
		return true;
	return extensionPromotedFrom && isExtensionStructSupported(deviceExtensions, RequiredExtension(extensionPromotedFrom));
}

void checkBasicMandatoryFeatures(const vkt::Context& context, std::vector<std::string>& failMesages)
{
	if (!context.isInstanceFunctionalitySupported("VK_KHR_get_physical_device_properties2"))
		TCU_THROW(NotSupportedError, "Extension VK_KHR_get_physical_device_properties2 is not present");

	VkPhysicalDevice					physicalDevice		= context.getPhysicalDevice();
	const InstanceInterface&			vki					= context.getInstanceInterface();
	const vector<VkExtensionProperties>	deviceExtensions	= enumerateDeviceExtensionProperties(vki, physicalDevice, nullptr);
	const uint32_t						usedApiVersion		= context.getUsedApiVersion();

	vk::VkPhysicalDeviceFeatures2 coreFeatures = initVulkanStructure();
	const auto addFeatures = makeStructChainAdder(&coreFeatures);

	// VkPhysicalDevice4444FormatsFeaturesEXT for ext [VK_EXT_4444_formats]
	vk::VkPhysicalDevice4444FormatsFeaturesEXT physicalDevice4444FormatsFeaturesEXT = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_4444_formats"))
		addFeatures(&physicalDevice4444FormatsFeaturesEXT);

	// VkPhysicalDeviceColorWriteEnableFeaturesEXT for ext [VK_EXT_color_write_enable]
	vk::VkPhysicalDeviceColorWriteEnableFeaturesEXT physicalDeviceColorWriteEnableFeaturesEXT = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_color_write_enable"))
		addFeatures(&physicalDeviceColorWriteEnableFeaturesEXT);

	// VkPhysicalDeviceCustomBorderColorFeaturesEXT for ext [VK_EXT_custom_border_color]
	vk::VkPhysicalDeviceCustomBorderColorFeaturesEXT physicalDeviceCustomBorderColorFeaturesEXT = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_custom_border_color"))
		addFeatures(&physicalDeviceCustomBorderColorFeaturesEXT);

	// VkPhysicalDeviceDepthClipEnableFeaturesEXT for ext [VK_EXT_depth_clip_enable]
	vk::VkPhysicalDeviceDepthClipEnableFeaturesEXT physicalDeviceDepthClipEnableFeaturesEXT = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_depth_clip_enable"))
		addFeatures(&physicalDeviceDepthClipEnableFeaturesEXT);

	// VkPhysicalDeviceExtendedDynamicState2FeaturesEXT for ext [VK_EXT_extended_dynamic_state2]
	vk::VkPhysicalDeviceExtendedDynamicState2FeaturesEXT physicalDeviceExtendedDynamicState2FeaturesEXT = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_extended_dynamic_state2"))
		addFeatures(&physicalDeviceExtendedDynamicState2FeaturesEXT);

	// VkPhysicalDeviceExtendedDynamicStateFeaturesEXT for ext [VK_EXT_extended_dynamic_state]
	vk::VkPhysicalDeviceExtendedDynamicStateFeaturesEXT physicalDeviceExtendedDynamicStateFeaturesEXT = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_extended_dynamic_state"))
		addFeatures(&physicalDeviceExtendedDynamicStateFeaturesEXT);

	// VkPhysicalDeviceExternalMemoryScreenBufferFeaturesQNX for ext [VK_QNX_external_memory_screen_buffer]
	vk::VkPhysicalDeviceExternalMemoryScreenBufferFeaturesQNX physicalDeviceExternalMemoryScreenBufferFeaturesQNX = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_QNX_external_memory_screen_buffer"))
		addFeatures(&physicalDeviceExternalMemoryScreenBufferFeaturesQNX);

	// VkPhysicalDeviceExternalMemorySciBufFeaturesNV, VkPhysicalDeviceExternalSciBufFeaturesNV for ext [VK_NV_external_memory_sci_buf]
	vk::VkPhysicalDeviceExternalMemorySciBufFeaturesNV physicalDeviceExternalMemorySciBufFeaturesNV = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_NV_external_memory_sci_buf"))
		addFeatures(&physicalDeviceExternalMemorySciBufFeaturesNV);

	// VkPhysicalDeviceExternalSciSync2FeaturesNV for ext [VK_NV_external_sci_sync2]
	vk::VkPhysicalDeviceExternalSciSync2FeaturesNV physicalDeviceExternalSciSync2FeaturesNV = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_NV_external_sci_sync2"))
		addFeatures(&physicalDeviceExternalSciSync2FeaturesNV);

	// VkPhysicalDeviceExternalSciSyncFeaturesNV for ext [VK_NV_external_sci_sync]
	vk::VkPhysicalDeviceExternalSciSyncFeaturesNV physicalDeviceExternalSciSyncFeaturesNV = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_NV_external_sci_sync"))
		addFeatures(&physicalDeviceExternalSciSyncFeaturesNV);

	// VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT for ext [VK_EXT_fragment_shader_interlock]
	vk::VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT physicalDeviceFragmentShaderInterlockFeaturesEXT = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_fragment_shader_interlock"))
		addFeatures(&physicalDeviceFragmentShaderInterlockFeaturesEXT);

	// VkPhysicalDeviceFragmentShadingRateFeaturesKHR for ext [VK_KHR_fragment_shading_rate]
	vk::VkPhysicalDeviceFragmentShadingRateFeaturesKHR physicalDeviceFragmentShadingRateFeaturesKHR = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_KHR_fragment_shading_rate"))
		addFeatures(&physicalDeviceFragmentShadingRateFeaturesKHR);

	// VkPhysicalDeviceGlobalPriorityQueryFeatures, VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR for ext [VK_KHR_global_priority]
	vk::VkPhysicalDeviceGlobalPriorityQueryFeatures physicalDeviceGlobalPriorityQueryFeatures = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_KHR_global_priority"))
		addFeatures(&physicalDeviceGlobalPriorityQueryFeatures);

	// VkPhysicalDeviceImageRobustnessFeatures, VkPhysicalDeviceImageRobustnessFeaturesEXT for ext [VK_EXT_image_robustness]
	vk::VkPhysicalDeviceImageRobustnessFeatures physicalDeviceImageRobustnessFeatures = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_image_robustness"))
		addFeatures(&physicalDeviceImageRobustnessFeatures);

	// VkPhysicalDeviceIndexTypeUint8Features, VkPhysicalDeviceIndexTypeUint8FeaturesKHR, VkPhysicalDeviceIndexTypeUint8FeaturesEXT for ext [VK_KHR_index_type_uint8, VK_EXT_index_type_uint8]
	vk::VkPhysicalDeviceIndexTypeUint8Features physicalDeviceIndexTypeUint8Features = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_KHR_index_type_uint8", "VK_EXT_index_type_uint8"))
		addFeatures(&physicalDeviceIndexTypeUint8Features);

	// VkPhysicalDeviceLineRasterizationFeatures, VkPhysicalDeviceLineRasterizationFeaturesKHR, VkPhysicalDeviceLineRasterizationFeaturesEXT for ext [VK_KHR_line_rasterization, VK_EXT_line_rasterization]
	vk::VkPhysicalDeviceLineRasterizationFeatures physicalDeviceLineRasterizationFeatures = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_KHR_line_rasterization", "VK_EXT_line_rasterization"))
		addFeatures(&physicalDeviceLineRasterizationFeatures);

	// VkPhysicalDevicePerformanceQueryFeaturesKHR for ext [VK_KHR_performance_query]
	vk::VkPhysicalDevicePerformanceQueryFeaturesKHR physicalDevicePerformanceQueryFeaturesKHR = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_KHR_performance_query"))
		addFeatures(&physicalDevicePerformanceQueryFeaturesKHR);

	// VkPhysicalDeviceRobustness2FeaturesKHR, VkPhysicalDeviceRobustness2FeaturesEXT for ext [VK_EXT_robustness2]
	vk::VkPhysicalDeviceRobustness2FeaturesKHR physicalDeviceRobustness2FeaturesKHR = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_robustness2"))
		addFeatures(&physicalDeviceRobustness2FeaturesKHR);

	// VkPhysicalDeviceShaderAtomicFloatFeaturesEXT for ext [VK_EXT_shader_atomic_float]
	vk::VkPhysicalDeviceShaderAtomicFloatFeaturesEXT physicalDeviceShaderAtomicFloatFeaturesEXT = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_shader_atomic_float"))
		addFeatures(&physicalDeviceShaderAtomicFloatFeaturesEXT);

	// VkPhysicalDeviceShaderClockFeaturesKHR for ext [VK_KHR_shader_clock]
	vk::VkPhysicalDeviceShaderClockFeaturesKHR physicalDeviceShaderClockFeaturesKHR = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_KHR_shader_clock"))
		addFeatures(&physicalDeviceShaderClockFeaturesKHR);

	// VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures, VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT for ext [VK_EXT_shader_demote_to_helper_invocation]
	vk::VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures physicalDeviceShaderDemoteToHelperInvocationFeatures = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_shader_demote_to_helper_invocation"))
		addFeatures(&physicalDeviceShaderDemoteToHelperInvocationFeatures);

	// VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT for ext [VK_EXT_shader_image_atomic_int64]
	vk::VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT physicalDeviceShaderImageAtomicInt64FeaturesEXT = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_shader_image_atomic_int64"))
		addFeatures(&physicalDeviceShaderImageAtomicInt64FeaturesEXT);

	// VkPhysicalDeviceShaderTerminateInvocationFeatures, VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR for ext [VK_KHR_shader_terminate_invocation]
	vk::VkPhysicalDeviceShaderTerminateInvocationFeatures physicalDeviceShaderTerminateInvocationFeatures = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_KHR_shader_terminate_invocation"))
		addFeatures(&physicalDeviceShaderTerminateInvocationFeatures);

	// VkPhysicalDeviceSubgroupSizeControlFeatures, VkPhysicalDeviceSubgroupSizeControlFeaturesEXT for ext [VK_EXT_subgroup_size_control]
	vk::VkPhysicalDeviceSubgroupSizeControlFeatures physicalDeviceSubgroupSizeControlFeatures = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_subgroup_size_control"))
		addFeatures(&physicalDeviceSubgroupSizeControlFeatures);

	// VkPhysicalDeviceSynchronization2Features, VkPhysicalDeviceSynchronization2FeaturesKHR for ext [VK_KHR_synchronization2]
	vk::VkPhysicalDeviceSynchronization2Features physicalDeviceSynchronization2Features = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_KHR_synchronization2"))
		addFeatures(&physicalDeviceSynchronization2Features);

	// VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT for ext [VK_EXT_texel_buffer_alignment]
	vk::VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT physicalDeviceTexelBufferAlignmentFeaturesEXT = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_texel_buffer_alignment"))
		addFeatures(&physicalDeviceTexelBufferAlignmentFeaturesEXT);

	// VkPhysicalDeviceTextureCompressionASTCHDRFeatures, VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT for ext [VK_EXT_texture_compression_astc_hdr]
	vk::VkPhysicalDeviceTextureCompressionASTCHDRFeatures physicalDeviceTextureCompressionASTCHDRFeatures = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_texture_compression_astc_hdr"))
		addFeatures(&physicalDeviceTextureCompressionASTCHDRFeatures);

	// VkPhysicalDeviceVertexAttributeDivisorFeatures, VkPhysicalDeviceVertexAttributeDivisorFeaturesKHR for ext [VK_KHR_vertex_attribute_divisor]
	vk::VkPhysicalDeviceVertexAttributeDivisorFeatures physicalDeviceVertexAttributeDivisorFeatures = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_KHR_vertex_attribute_divisor"))
		addFeatures(&physicalDeviceVertexAttributeDivisorFeatures);

	// VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT for ext [VK_EXT_vertex_input_dynamic_state]
	vk::VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT physicalDeviceVertexInputDynamicStateFeaturesEXT = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_vertex_input_dynamic_state"))
		addFeatures(&physicalDeviceVertexInputDynamicStateFeaturesEXT);

	// VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT for ext [VK_EXT_ycbcr_2plane_444_formats]
	vk::VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT physicalDeviceYcbcr2Plane444FormatsFeaturesEXT = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_ycbcr_2plane_444_formats"))
		addFeatures(&physicalDeviceYcbcr2Plane444FormatsFeaturesEXT);

	// VkPhysicalDeviceYcbcrImageArraysFeaturesEXT for ext [VK_EXT_ycbcr_image_arrays]
	vk::VkPhysicalDeviceYcbcrImageArraysFeaturesEXT physicalDeviceYcbcrImageArraysFeaturesEXT = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_ycbcr_image_arrays"))
		addFeatures(&physicalDeviceYcbcrImageArraysFeaturesEXT);

	context.getInstanceInterface().getPhysicalDeviceFeatures2(context.getPhysicalDevice(), &coreFeatures);

	// VkPhysicalDevicePerformanceQueryFeaturesKHR
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_performance_query")) )
	{
		if ( physicalDevicePerformanceQueryFeaturesKHR.performanceCounterQueryPools == VK_FALSE )
			failMesages.push_back("performanceCounterQueryPools");
	}

	// VkPhysicalDeviceShaderClockFeaturesKHR
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_shader_clock")) )
	{
		if ( physicalDeviceShaderClockFeaturesKHR.shaderSubgroupClock == VK_FALSE )
			failMesages.push_back("shaderSubgroupClock");
	}

	// VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_global_priority")) )
	{
		if ( physicalDeviceGlobalPriorityQueryFeatures.globalPriorityQuery == VK_FALSE )
			failMesages.push_back("globalPriorityQuery");
	}

	// VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_shader_terminate_invocation")) )
	{
		if ( physicalDeviceShaderTerminateInvocationFeatures.shaderTerminateInvocation == VK_FALSE )
			failMesages.push_back("shaderTerminateInvocation");
	}

	// VkPhysicalDeviceFragmentShadingRateFeaturesKHR
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_fragment_shading_rate")) )
	{
		if ( physicalDeviceFragmentShadingRateFeaturesKHR.pipelineFragmentShadingRate == VK_FALSE )
			failMesages.push_back("pipelineFragmentShadingRate");
	}

	// VkPhysicalDeviceSynchronization2FeaturesKHR
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_synchronization2")) )
	{
		if ( physicalDeviceSynchronization2Features.synchronization2 == VK_FALSE )
			failMesages.push_back("synchronization2");
	}

	// VkPhysicalDeviceVertexAttributeDivisorFeaturesKHR
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_vertex_attribute_divisor")) )
	{
		if ( physicalDeviceVertexAttributeDivisorFeatures.vertexAttributeInstanceRateDivisor == VK_FALSE )
			failMesages.push_back("vertexAttributeInstanceRateDivisor");
	}

	// VkPhysicalDeviceIndexTypeUint8FeaturesKHR
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_index_type_uint8")) )
	{
		if ( physicalDeviceIndexTypeUint8Features.indexTypeUint8 == VK_FALSE )
			failMesages.push_back("indexTypeUint8");
	}

	// VkPhysicalDeviceLineRasterizationFeaturesKHR
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_line_rasterization")) )
	{
		if ( (physicalDeviceLineRasterizationFeatures.rectangularLines == VK_FALSE) && (physicalDeviceLineRasterizationFeatures.bresenhamLines == VK_FALSE) && (physicalDeviceLineRasterizationFeatures.smoothLines == VK_FALSE) && (physicalDeviceLineRasterizationFeatures.stippledRectangularLines == VK_FALSE) && (physicalDeviceLineRasterizationFeatures.stippledBresenhamLines == VK_FALSE) && (physicalDeviceLineRasterizationFeatures.stippledSmoothLines == VK_FALSE) )
			failMesages.push_back("rectangularLines or bresenhamLines or smoothLines or stippledRectangularLines or stippledBresenhamLines or stippledSmoothLines");
	}

	// VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_texture_compression_astc_hdr")) )
	{
		if ( physicalDeviceTextureCompressionASTCHDRFeatures.textureCompressionASTC_HDR == VK_FALSE )
			failMesages.push_back("textureCompressionASTC_HDR");
	}

	// VkPhysicalDeviceDepthClipEnableFeaturesEXT
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_depth_clip_enable")) )
	{
		if ( physicalDeviceDepthClipEnableFeaturesEXT.depthClipEnable == VK_FALSE )
			failMesages.push_back("depthClipEnable");
	}

	// VkPhysicalDeviceSubgroupSizeControlFeatures
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_subgroup_size_control")) )
	{
		if ( physicalDeviceSubgroupSizeControlFeatures.subgroupSizeControl == VK_FALSE )
			failMesages.push_back("subgroupSizeControl");
	}

	// VkPhysicalDeviceSubgroupSizeControlFeatures
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_subgroup_size_control")) )
	{
		if ( physicalDeviceSubgroupSizeControlFeatures.computeFullSubgroups == VK_FALSE )
			failMesages.push_back("computeFullSubgroups");
	}

	// VkPhysicalDeviceFeatures
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_shader_image_atomic_int64")) )
	{
		if ( coreFeatures.features.shaderInt64 == VK_FALSE )
			failMesages.push_back("shaderInt64");
	}

	// VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_shader_image_atomic_int64")) )
	{
		if ( physicalDeviceShaderImageAtomicInt64FeaturesEXT.shaderImageInt64Atomics == VK_FALSE )
			failMesages.push_back("shaderImageInt64Atomics");
	}

	// VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_fragment_shader_interlock")) )
	{
		if ( (physicalDeviceFragmentShaderInterlockFeaturesEXT.fragmentShaderSampleInterlock == VK_FALSE) && (physicalDeviceFragmentShaderInterlockFeaturesEXT.fragmentShaderPixelInterlock == VK_FALSE) && (physicalDeviceFragmentShaderInterlockFeaturesEXT.fragmentShaderShadingRateInterlock == VK_FALSE) )
			failMesages.push_back("fragmentShaderSampleInterlock or fragmentShaderPixelInterlock or fragmentShaderShadingRateInterlock");
	}

	// VkPhysicalDeviceYcbcrImageArraysFeaturesEXT
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_ycbcr_image_arrays")) )
	{
		if ( physicalDeviceYcbcrImageArraysFeaturesEXT.ycbcrImageArrays == VK_FALSE )
			failMesages.push_back("ycbcrImageArrays");
	}

	// VkPhysicalDeviceLineRasterizationFeaturesEXT
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_line_rasterization")) )
	{
		if ( (physicalDeviceLineRasterizationFeatures.rectangularLines == VK_FALSE) && (physicalDeviceLineRasterizationFeatures.bresenhamLines == VK_FALSE) && (physicalDeviceLineRasterizationFeatures.smoothLines == VK_FALSE) && (physicalDeviceLineRasterizationFeatures.stippledRectangularLines == VK_FALSE) && (physicalDeviceLineRasterizationFeatures.stippledBresenhamLines == VK_FALSE) && (physicalDeviceLineRasterizationFeatures.stippledSmoothLines == VK_FALSE) )
			failMesages.push_back("rectangularLines or bresenhamLines or smoothLines or stippledRectangularLines or stippledBresenhamLines or stippledSmoothLines");
	}

	// VkPhysicalDeviceShaderAtomicFloatFeaturesEXT
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_shader_atomic_float")) )
	{
		if ( (physicalDeviceShaderAtomicFloatFeaturesEXT.shaderBufferFloat32Atomics == VK_FALSE) && (physicalDeviceShaderAtomicFloatFeaturesEXT.shaderBufferFloat32AtomicAdd == VK_FALSE) && (physicalDeviceShaderAtomicFloatFeaturesEXT.shaderBufferFloat64Atomics == VK_FALSE) && (physicalDeviceShaderAtomicFloatFeaturesEXT.shaderBufferFloat64AtomicAdd == VK_FALSE) && (physicalDeviceShaderAtomicFloatFeaturesEXT.shaderSharedFloat32Atomics == VK_FALSE) && (physicalDeviceShaderAtomicFloatFeaturesEXT.shaderSharedFloat32AtomicAdd == VK_FALSE) && (physicalDeviceShaderAtomicFloatFeaturesEXT.shaderSharedFloat64Atomics == VK_FALSE) && (physicalDeviceShaderAtomicFloatFeaturesEXT.shaderSharedFloat64AtomicAdd == VK_FALSE) && (physicalDeviceShaderAtomicFloatFeaturesEXT.shaderImageFloat32Atomics == VK_FALSE) && (physicalDeviceShaderAtomicFloatFeaturesEXT.shaderImageFloat32AtomicAdd == VK_FALSE) )
			failMesages.push_back("shaderBufferFloat32Atomics or shaderBufferFloat32AtomicAdd or shaderBufferFloat64Atomics or shaderBufferFloat64AtomicAdd or shaderSharedFloat32Atomics or shaderSharedFloat32AtomicAdd or shaderSharedFloat64Atomics or shaderSharedFloat64AtomicAdd or shaderImageFloat32Atomics or shaderImageFloat32AtomicAdd");
	}

	// VkPhysicalDeviceShaderAtomicFloatFeaturesEXT
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_shader_atomic_float")) && physicalDeviceShaderAtomicFloatFeaturesEXT.sparseImageFloat32Atomics )
	{
		if ( physicalDeviceShaderAtomicFloatFeaturesEXT.shaderImageFloat32Atomics == VK_FALSE )
			failMesages.push_back("shaderImageFloat32Atomics");
	}

	// VkPhysicalDeviceShaderAtomicFloatFeaturesEXT
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_shader_atomic_float")) && physicalDeviceShaderAtomicFloatFeaturesEXT.sparseImageFloat32AtomicAdd )
	{
		if ( physicalDeviceShaderAtomicFloatFeaturesEXT.shaderImageFloat32AtomicAdd == VK_FALSE )
			failMesages.push_back("shaderImageFloat32AtomicAdd");
	}

	// VkPhysicalDeviceIndexTypeUint8FeaturesEXT
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_index_type_uint8")) )
	{
		if ( physicalDeviceIndexTypeUint8Features.indexTypeUint8 == VK_FALSE )
			failMesages.push_back("indexTypeUint8");
	}

	// VkPhysicalDeviceExtendedDynamicStateFeaturesEXT
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_extended_dynamic_state")) )
	{
		if ( physicalDeviceExtendedDynamicStateFeaturesEXT.extendedDynamicState == VK_FALSE )
			failMesages.push_back("extendedDynamicState");
	}

	// VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_shader_demote_to_helper_invocation")) )
	{
		if ( physicalDeviceShaderDemoteToHelperInvocationFeatures.shaderDemoteToHelperInvocation == VK_FALSE )
			failMesages.push_back("shaderDemoteToHelperInvocation");
	}

	// VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_texel_buffer_alignment")) )
	{
		if ( physicalDeviceTexelBufferAlignmentFeaturesEXT.texelBufferAlignment == VK_FALSE )
			failMesages.push_back("texelBufferAlignment");
	}

	// VkPhysicalDeviceRobustness2FeaturesEXT
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_robustness2")) )
	{
		if ( (physicalDeviceRobustness2FeaturesKHR.robustBufferAccess2 == VK_FALSE) && (physicalDeviceRobustness2FeaturesKHR.robustImageAccess2 == VK_FALSE) && (physicalDeviceRobustness2FeaturesKHR.nullDescriptor == VK_FALSE) )
			failMesages.push_back("robustBufferAccess2 or robustImageAccess2 or nullDescriptor");
	}

	// VkPhysicalDeviceCustomBorderColorFeaturesEXT
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_custom_border_color")) )
	{
		if ( physicalDeviceCustomBorderColorFeaturesEXT.customBorderColors == VK_FALSE )
			failMesages.push_back("customBorderColors");
	}

	// VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_ycbcr_2plane_444_formats")) )
	{
		if ( physicalDeviceYcbcr2Plane444FormatsFeaturesEXT.ycbcr2plane444Formats == VK_FALSE )
			failMesages.push_back("ycbcr2plane444Formats");
	}

	// VkPhysicalDeviceImageRobustnessFeaturesEXT
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_image_robustness")) )
	{
		if ( physicalDeviceImageRobustnessFeatures.robustImageAccess == VK_FALSE )
			failMesages.push_back("robustImageAccess");
	}

	// VkPhysicalDevice4444FormatsFeaturesEXT
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_4444_formats")) )
	{
		if ( physicalDevice4444FormatsFeaturesEXT.formatA4R4G4B4 == VK_FALSE )
			failMesages.push_back("formatA4R4G4B4");
	}

	// VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_vertex_input_dynamic_state")) )
	{
		if ( physicalDeviceVertexInputDynamicStateFeaturesEXT.vertexInputDynamicState == VK_FALSE )
			failMesages.push_back("vertexInputDynamicState");
	}

	// VkPhysicalDeviceExternalSciSyncFeaturesNV
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_NV_external_sci_sync")) )
	{
		if ( (physicalDeviceExternalSciSyncFeaturesNV.sciSyncFence == VK_FALSE) && (physicalDeviceExternalSciSyncFeaturesNV.sciSyncSemaphore == VK_FALSE) )
			failMesages.push_back("sciSyncFence or sciSyncSemaphore");
	}

	// VkPhysicalDeviceExternalSciSyncFeaturesNV
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_NV_external_sci_sync")) )
	{
		if ( (physicalDeviceExternalSciSyncFeaturesNV.sciSyncImport == VK_FALSE) && (physicalDeviceExternalSciSyncFeaturesNV.sciSyncExport == VK_FALSE) )
			failMesages.push_back("sciSyncImport or sciSyncExport");
	}

	// VkPhysicalDeviceExternalSciBufFeaturesNV
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_NV_external_memory_sci_buf")) )
	{
		if ( (physicalDeviceExternalMemorySciBufFeaturesNV.sciBufImport == VK_FALSE) && (physicalDeviceExternalMemorySciBufFeaturesNV.sciBufExport == VK_FALSE) )
			failMesages.push_back("sciBufImport or sciBufExport");
	}

	// VkPhysicalDeviceExtendedDynamicState2FeaturesEXT
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_extended_dynamic_state2")) )
	{
		if ( physicalDeviceExtendedDynamicState2FeaturesEXT.extendedDynamicState2 == VK_FALSE )
			failMesages.push_back("extendedDynamicState2");
	}

	// VkPhysicalDeviceColorWriteEnableFeaturesEXT
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_color_write_enable")) )
	{
		if ( physicalDeviceColorWriteEnableFeaturesEXT.colorWriteEnable == VK_FALSE )
			failMesages.push_back("colorWriteEnable");
	}

	// VkPhysicalDeviceExternalSciSync2FeaturesNV
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_NV_external_sci_sync2")) )
	{
		if ( (physicalDeviceExternalSciSync2FeaturesNV.sciSyncFence == VK_FALSE) && (physicalDeviceExternalSciSync2FeaturesNV.sciSyncSemaphore2 == VK_FALSE) )
			failMesages.push_back("sciSyncFence or sciSyncSemaphore2");
	}

	// VkPhysicalDeviceExternalSciSync2FeaturesNV
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_NV_external_sci_sync2")) )
	{
		if ( (physicalDeviceExternalSciSync2FeaturesNV.sciSyncImport == VK_FALSE) && (physicalDeviceExternalSciSync2FeaturesNV.sciSyncExport == VK_FALSE) )
			failMesages.push_back("sciSyncImport or sciSyncExport");
	}

	// VkPhysicalDeviceExternalMemoryScreenBufferFeaturesQNX
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_QNX_external_memory_screen_buffer")) )
	{
		if ( physicalDeviceExternalMemoryScreenBufferFeaturesQNX.screenBufferImport == VK_FALSE )
			failMesages.push_back("screenBufferImport");
	}

}

