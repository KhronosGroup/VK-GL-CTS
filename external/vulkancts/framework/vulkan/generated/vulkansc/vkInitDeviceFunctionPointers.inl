/* WARNING: This is auto-generated file. Do not modify, since changes will
 * be lost! Modify the generating script instead.
 * This file was generated by /scripts/gen_framework.py
 */

if (usedApiVersion >= VK_MAKE_API_VERSION(1, 1, 0, 0))
    m_vk.getDeviceProcAddr = (GetDeviceProcAddrFunc) GET_PROC_ADDR("vkGetDeviceProcAddr");
if (usedApiVersion >= VK_MAKE_API_VERSION(1, 1, 0, 0))
    m_vk.destroyDevice = (DestroyDeviceFunc) GET_PROC_ADDR("vkDestroyDevice");
if (usedApiVersion >= VK_MAKE_API_VERSION(1, 1, 0, 0))
    m_vk.getDeviceQueue = (GetDeviceQueueFunc) GET_PROC_ADDR("vkGetDeviceQueue");
if (usedApiVersion >= VK_MAKE_API_VERSION(1, 1, 0, 0))
    m_vk.queueSubmit = (QueueSubmitFunc) GET_PROC_ADDR("vkQueueSubmit");
if (usedApiVersion >= VK_MAKE_API_VERSION(1, 1, 0, 0))
    m_vk.queueWaitIdle = (QueueWaitIdleFunc) GET_PROC_ADDR("vkQueueWaitIdle");
if (usedApiVersion >= VK_MAKE_API_VERSION(1, 1, 0, 0))
    m_vk.deviceWaitIdle = (DeviceWaitIdleFunc) GET_PROC_ADDR("vkDeviceWaitIdle");
if (usedApiVersion >= VK_MAKE_API_VERSION(1, 1, 0, 0))
    m_vk.allocateMemory = (AllocateMemoryFunc) GET_PROC_ADDR("vkAllocateMemory");
if (usedApiVersion >= VK_MAKE_API_VERSION(1, 1, 0, 0))
    m_vk.mapMemory = (MapMemoryFunc) GET_PROC_ADDR("vkMapMemory");
if (usedApiVersion >= VK_MAKE_API_VERSION(1, 1, 0, 0))
    m_vk.unmapMemory = (UnmapMemoryFunc) GET_PROC_ADDR("vkUnmapMemory");
if (usedApiVersion >= VK_MAKE_API_VERSION(1, 1, 0, 0))
    m_vk.flushMappedMemoryRanges = (FlushMappedMemoryRangesFunc) GET_PROC_ADDR("vkFlushMappedMemoryRanges");
if (usedApiVersion >= VK_MAKE_API_VERSION(1, 1, 0, 0))
    m_vk.invalidateMappedMemoryRanges = (InvalidateMappedMemoryRangesFunc) GET_PROC_ADDR("vkInvalidateMappedMemoryRanges");
if (usedApiVersion >= VK_MAKE_API_VERSION(1, 1, 0, 0))
    m_vk.getDeviceMemoryCommitment = (GetDeviceMemoryCommitmentFunc) GET_PROC_ADDR("vkGetDeviceMemoryCommitment");
if (usedApiVersion >= VK_MAKE_API_VERSION(1, 1, 0, 0))
    m_vk.getBufferMemoryRequirements = (GetBufferMemoryRequirementsFunc) GET_PROC_ADDR("vkGetBufferMemoryRequirements");
if (usedApiVersion >= VK_MAKE_API_VERSION(1, 1, 0, 0))
    m_vk.bindBufferMemory = (BindBufferMemoryFunc) GET_PROC_ADDR("vkBindBufferMemory");
if (usedApiVersion >= VK_MAKE_API_VERSION(1, 1, 0, 0))
    m_vk.getImageMemoryRequirements = (GetImageMemoryRequirementsFunc) GET_PROC_ADDR("vkGetImageMemoryRequirements");
if (usedApiVersion >= VK_MAKE_API_VERSION(1, 1, 0, 0))
    m_vk.bindImageMemory = (BindImageMemoryFunc) GET_PROC_ADDR("vkBindImageMemory");
if (usedApiVersion >= VK_MAKE_API_VERSION(1, 1, 0, 0))
    m_vk.createFence = (CreateFenceFunc) GET_PROC_ADDR("vkCreateFence");
if (usedApiVersion >= VK_MAKE_API_VERSION(1, 1, 0, 0))
    m_vk.destroyFence = (DestroyFenceFunc) GET_PROC_ADDR("vkDestroyFence");
if (usedApiVersion >= VK_MAKE_API_VERSION(1, 1, 0, 0))
    m_vk.resetFences = (ResetFencesFunc) GET_PROC_ADDR("vkResetFences");
if (usedApiVersion >= VK_MAKE_API_VERSION(1, 1, 0, 0))
    m_vk.getFenceStatus = (GetFenceStatusFunc) GET_PROC_ADDR("vkGetFenceStatus");
if (usedApiVersion >= VK_MAKE_API_VERSION(1, 1, 0, 0))
    m_vk.waitForFences = (WaitForFencesFunc) GET_PROC_ADDR("vkWaitForFences");
if (usedApiVersion >= VK_MAKE_API_VERSION(1, 1, 0, 0))
    m_vk.createSemaphore = (CreateSemaphoreFunc) GET_PROC_ADDR("vkCreateSemaphore");
if (usedApiVersion >= VK_MAKE_API_VERSION(1, 1, 0, 0))
    m_vk.destroySemaphore = (DestroySemaphoreFunc) GET_PROC_ADDR("vkDestroySemaphore");
if (usedApiVersion >= VK_MAKE_API_VERSION(1, 1, 0, 0))
    m_vk.createEvent = (CreateEventFunc) GET_PROC_ADDR("vkCreateEvent");
if (usedApiVersion >= VK_MAKE_API_VERSION(1, 1, 0, 0))
    m_vk.destroyEvent = (DestroyEventFunc) GET_PROC_ADDR("vkDestroyEvent");
if (usedApiVersion >= VK_MAKE_API_VERSION(1, 1, 0, 0))
    m_vk.getEventStatus = (GetEventStatusFunc) GET_PROC_ADDR("vkGetEventStatus");
if (usedApiVersion >= VK_MAKE_API_VERSION(1, 1, 0, 0))
    m_vk.setEvent = (SetEventFunc) GET_PROC_ADDR("vkSetEvent");
if (usedApiVersion >= VK_MAKE_API_VERSION(1, 1, 0, 0))
    m_vk.resetEvent = (ResetEventFunc) GET_PROC_ADDR("vkResetEvent");
if (usedApiVersion >= VK_MAKE_API_VERSION(1, 1, 0, 0))
    m_vk.createQueryPool = (CreateQueryPoolFunc) GET_PROC_ADDR("vkCreateQueryPool");
if (usedApiVersion >= VK_MAKE_API_VERSION(1, 1, 0, 0))
    m_vk.getQueryPoolResults = (GetQueryPoolResultsFunc) GET_PROC_ADDR("vkGetQueryPoolResults");
if (usedApiVersion >= VK_MAKE_API_VERSION(1, 1, 0, 0))
    m_vk.resetQueryPool = (ResetQueryPoolFunc) GET_PROC_ADDR("vkResetQueryPool");
if (!m_vk.resetQueryPool)
    m_vk.resetQueryPool = (ResetQueryPoolFunc) GET_PROC_ADDR("vkResetQueryPoolEXT");
if (usedApiVersion >= VK_MAKE_API_VERSION(1, 1, 0, 0))
    m_vk.createBuffer = (CreateBufferFunc) GET_PROC_ADDR("vkCreateBuffer");
if (usedApiVersion >= VK_MAKE_API_VERSION(1, 1, 0, 0))
    m_vk.destroyBuffer = (DestroyBufferFunc) GET_PROC_ADDR("vkDestroyBuffer");
if (usedApiVersion >= VK_MAKE_API_VERSION(1, 1, 0, 0))
    m_vk.createBufferView = (CreateBufferViewFunc) GET_PROC_ADDR("vkCreateBufferView");
if (usedApiVersion >= VK_MAKE_API_VERSION(1, 1, 0, 0))
    m_vk.destroyBufferView = (DestroyBufferViewFunc) GET_PROC_ADDR("vkDestroyBufferView");
if (usedApiVersion >= VK_MAKE_API_VERSION(1, 1, 0, 0))
    m_vk.createImage = (CreateImageFunc) GET_PROC_ADDR("vkCreateImage");
if (usedApiVersion >= VK_MAKE_API_VERSION(1, 1, 0, 0))
    m_vk.destroyImage = (DestroyImageFunc) GET_PROC_ADDR("vkDestroyImage");
if (usedApiVersion >= VK_MAKE_API_VERSION(1, 1, 0, 0))
    m_vk.getImageSubresourceLayout = (GetImageSubresourceLayoutFunc) GET_PROC_ADDR("vkGetImageSubresourceLayout");
if (usedApiVersion >= VK_MAKE_API_VERSION(1, 1, 0, 0))
    m_vk.createImageView = (CreateImageViewFunc) GET_PROC_ADDR("vkCreateImageView");
if (usedApiVersion >= VK_MAKE_API_VERSION(1, 1, 0, 0))
    m_vk.destroyImageView = (DestroyImageViewFunc) GET_PROC_ADDR("vkDestroyImageView");
if (usedApiVersion >= VK_MAKE_API_VERSION(1, 1, 0, 0))
    m_vk.createPipelineCache = (CreatePipelineCacheFunc) GET_PROC_ADDR("vkCreatePipelineCache");
if (usedApiVersion >= VK_MAKE_API_VERSION(1, 1, 0, 0))
    m_vk.destroyPipelineCache = (DestroyPipelineCacheFunc) GET_PROC_ADDR("vkDestroyPipelineCache");
if (usedApiVersion >= VK_MAKE_API_VERSION(1, 1, 0, 0))
    m_vk.createGraphicsPipelines = (CreateGraphicsPipelinesFunc) GET_PROC_ADDR("vkCreateGraphicsPipelines");
if (usedApiVersion >= VK_MAKE_API_VERSION(1, 1, 0, 0))
    m_vk.createComputePipelines = (CreateComputePipelinesFunc) GET_PROC_ADDR("vkCreateComputePipelines");
if (usedApiVersion >= VK_MAKE_API_VERSION(1, 1, 0, 0))
    m_vk.destroyPipeline = (DestroyPipelineFunc) GET_PROC_ADDR("vkDestroyPipeline");
if (usedApiVersion >= VK_MAKE_API_VERSION(1, 1, 0, 0))
    m_vk.createPipelineLayout = (CreatePipelineLayoutFunc) GET_PROC_ADDR("vkCreatePipelineLayout");
if (usedApiVersion >= VK_MAKE_API_VERSION(1, 1, 0, 0))
    m_vk.destroyPipelineLayout = (DestroyPipelineLayoutFunc) GET_PROC_ADDR("vkDestroyPipelineLayout");
if (usedApiVersion >= VK_MAKE_API_VERSION(1, 1, 0, 0))
    m_vk.createSampler = (CreateSamplerFunc) GET_PROC_ADDR("vkCreateSampler");
if (usedApiVersion >= VK_MAKE_API_VERSION(1, 1, 0, 0))
    m_vk.destroySampler = (DestroySamplerFunc) GET_PROC_ADDR("vkDestroySampler");
if (usedApiVersion >= VK_MAKE_API_VERSION(1, 1, 0, 0))
    m_vk.createDescriptorSetLayout = (CreateDescriptorSetLayoutFunc) GET_PROC_ADDR("vkCreateDescriptorSetLayout");
if (usedApiVersion >= VK_MAKE_API_VERSION(1, 1, 0, 0))
    m_vk.destroyDescriptorSetLayout = (DestroyDescriptorSetLayoutFunc) GET_PROC_ADDR("vkDestroyDescriptorSetLayout");
if (usedApiVersion >= VK_MAKE_API_VERSION(1, 1, 0, 0))
    m_vk.createDescriptorPool = (CreateDescriptorPoolFunc) GET_PROC_ADDR("vkCreateDescriptorPool");
if (usedApiVersion >= VK_MAKE_API_VERSION(1, 1, 0, 0))
    m_vk.resetDescriptorPool = (ResetDescriptorPoolFunc) GET_PROC_ADDR("vkResetDescriptorPool");
if (usedApiVersion >= VK_MAKE_API_VERSION(1, 1, 0, 0))
    m_vk.allocateDescriptorSets = (AllocateDescriptorSetsFunc) GET_PROC_ADDR("vkAllocateDescriptorSets");
if (usedApiVersion >= VK_MAKE_API_VERSION(1, 1, 0, 0))
    m_vk.freeDescriptorSets = (FreeDescriptorSetsFunc) GET_PROC_ADDR("vkFreeDescriptorSets");
if (usedApiVersion >= VK_MAKE_API_VERSION(1, 1, 0, 0))
    m_vk.updateDescriptorSets = (UpdateDescriptorSetsFunc) GET_PROC_ADDR("vkUpdateDescriptorSets");
if (usedApiVersion >= VK_MAKE_API_VERSION(1, 1, 0, 0))
    m_vk.createFramebuffer = (CreateFramebufferFunc) GET_PROC_ADDR("vkCreateFramebuffer");
if (usedApiVersion >= VK_MAKE_API_VERSION(1, 1, 0, 0))
    m_vk.destroyFramebuffer = (DestroyFramebufferFunc) GET_PROC_ADDR("vkDestroyFramebuffer");
if (usedApiVersion >= VK_MAKE_API_VERSION(1, 1, 0, 0))
    m_vk.createRenderPass = (CreateRenderPassFunc) GET_PROC_ADDR("vkCreateRenderPass");
if (usedApiVersion >= VK_MAKE_API_VERSION(1, 1, 0, 0))
    m_vk.destroyRenderPass = (DestroyRenderPassFunc) GET_PROC_ADDR("vkDestroyRenderPass");
if (usedApiVersion >= VK_MAKE_API_VERSION(1, 1, 0, 0))
    m_vk.getRenderAreaGranularity = (GetRenderAreaGranularityFunc) GET_PROC_ADDR("vkGetRenderAreaGranularity");
if (usedApiVersion >= VK_MAKE_API_VERSION(1, 1, 0, 0))
    m_vk.createCommandPool = (CreateCommandPoolFunc) GET_PROC_ADDR("vkCreateCommandPool");
if (usedApiVersion >= VK_MAKE_API_VERSION(1, 1, 0, 0))
    m_vk.resetCommandPool = (ResetCommandPoolFunc) GET_PROC_ADDR("vkResetCommandPool");
if (usedApiVersion >= VK_MAKE_API_VERSION(1, 1, 0, 0))
    m_vk.allocateCommandBuffers = (AllocateCommandBuffersFunc) GET_PROC_ADDR("vkAllocateCommandBuffers");
if (usedApiVersion >= VK_MAKE_API_VERSION(1, 1, 0, 0))
    m_vk.freeCommandBuffers = (FreeCommandBuffersFunc) GET_PROC_ADDR("vkFreeCommandBuffers");
if (usedApiVersion >= VK_MAKE_API_VERSION(1, 1, 0, 0))
    m_vk.beginCommandBuffer = (BeginCommandBufferFunc) GET_PROC_ADDR("vkBeginCommandBuffer");
if (usedApiVersion >= VK_MAKE_API_VERSION(1, 1, 0, 0))
    m_vk.endCommandBuffer = (EndCommandBufferFunc) GET_PROC_ADDR("vkEndCommandBuffer");
if (usedApiVersion >= VK_MAKE_API_VERSION(1, 1, 0, 0))
    m_vk.resetCommandBuffer = (ResetCommandBufferFunc) GET_PROC_ADDR("vkResetCommandBuffer");
if (usedApiVersion >= VK_MAKE_API_VERSION(1, 1, 0, 0))
    m_vk.cmdBindPipeline = (CmdBindPipelineFunc) GET_PROC_ADDR("vkCmdBindPipeline");
if (usedApiVersion >= VK_MAKE_API_VERSION(1, 1, 0, 0))
    m_vk.cmdSetViewport = (CmdSetViewportFunc) GET_PROC_ADDR("vkCmdSetViewport");
if (usedApiVersion >= VK_MAKE_API_VERSION(1, 1, 0, 0))
    m_vk.cmdSetScissor = (CmdSetScissorFunc) GET_PROC_ADDR("vkCmdSetScissor");
if (usedApiVersion >= VK_MAKE_API_VERSION(1, 1, 0, 0))
    m_vk.cmdSetLineWidth = (CmdSetLineWidthFunc) GET_PROC_ADDR("vkCmdSetLineWidth");
if (usedApiVersion >= VK_MAKE_API_VERSION(1, 1, 0, 0))
    m_vk.cmdSetDepthBias = (CmdSetDepthBiasFunc) GET_PROC_ADDR("vkCmdSetDepthBias");
if (usedApiVersion >= VK_MAKE_API_VERSION(1, 1, 0, 0))
    m_vk.cmdSetBlendConstants = (CmdSetBlendConstantsFunc) GET_PROC_ADDR("vkCmdSetBlendConstants");
if (usedApiVersion >= VK_MAKE_API_VERSION(1, 1, 0, 0))
    m_vk.cmdSetDepthBounds = (CmdSetDepthBoundsFunc) GET_PROC_ADDR("vkCmdSetDepthBounds");
if (usedApiVersion >= VK_MAKE_API_VERSION(1, 1, 0, 0))
    m_vk.cmdSetStencilCompareMask = (CmdSetStencilCompareMaskFunc) GET_PROC_ADDR("vkCmdSetStencilCompareMask");
if (usedApiVersion >= VK_MAKE_API_VERSION(1, 1, 0, 0))
    m_vk.cmdSetStencilWriteMask = (CmdSetStencilWriteMaskFunc) GET_PROC_ADDR("vkCmdSetStencilWriteMask");
if (usedApiVersion >= VK_MAKE_API_VERSION(1, 1, 0, 0))
    m_vk.cmdSetStencilReference = (CmdSetStencilReferenceFunc) GET_PROC_ADDR("vkCmdSetStencilReference");
if (usedApiVersion >= VK_MAKE_API_VERSION(1, 1, 0, 0))
    m_vk.cmdBindDescriptorSets = (CmdBindDescriptorSetsFunc) GET_PROC_ADDR("vkCmdBindDescriptorSets");
if (usedApiVersion >= VK_MAKE_API_VERSION(1, 1, 0, 0))
    m_vk.cmdBindIndexBuffer = (CmdBindIndexBufferFunc) GET_PROC_ADDR("vkCmdBindIndexBuffer");
if (usedApiVersion >= VK_MAKE_API_VERSION(1, 1, 0, 0))
    m_vk.cmdBindVertexBuffers = (CmdBindVertexBuffersFunc) GET_PROC_ADDR("vkCmdBindVertexBuffers");
if (usedApiVersion >= VK_MAKE_API_VERSION(1, 1, 0, 0))
    m_vk.cmdDraw = (CmdDrawFunc) GET_PROC_ADDR("vkCmdDraw");
if (usedApiVersion >= VK_MAKE_API_VERSION(1, 1, 0, 0))
    m_vk.cmdDrawIndexed = (CmdDrawIndexedFunc) GET_PROC_ADDR("vkCmdDrawIndexed");
if (usedApiVersion >= VK_MAKE_API_VERSION(1, 1, 0, 0))
    m_vk.cmdDrawIndirect = (CmdDrawIndirectFunc) GET_PROC_ADDR("vkCmdDrawIndirect");
if (usedApiVersion >= VK_MAKE_API_VERSION(1, 1, 0, 0))
    m_vk.cmdDrawIndexedIndirect = (CmdDrawIndexedIndirectFunc) GET_PROC_ADDR("vkCmdDrawIndexedIndirect");
if (usedApiVersion >= VK_MAKE_API_VERSION(1, 1, 0, 0))
    m_vk.cmdDispatch = (CmdDispatchFunc) GET_PROC_ADDR("vkCmdDispatch");
if (usedApiVersion >= VK_MAKE_API_VERSION(1, 1, 0, 0))
    m_vk.cmdDispatchIndirect = (CmdDispatchIndirectFunc) GET_PROC_ADDR("vkCmdDispatchIndirect");
if (usedApiVersion >= VK_MAKE_API_VERSION(1, 1, 0, 0))
    m_vk.cmdCopyBuffer = (CmdCopyBufferFunc) GET_PROC_ADDR("vkCmdCopyBuffer");
if (usedApiVersion >= VK_MAKE_API_VERSION(1, 1, 0, 0))
    m_vk.cmdCopyImage = (CmdCopyImageFunc) GET_PROC_ADDR("vkCmdCopyImage");
if (usedApiVersion >= VK_MAKE_API_VERSION(1, 1, 0, 0))
    m_vk.cmdBlitImage = (CmdBlitImageFunc) GET_PROC_ADDR("vkCmdBlitImage");
if (usedApiVersion >= VK_MAKE_API_VERSION(1, 1, 0, 0))
    m_vk.cmdCopyBufferToImage = (CmdCopyBufferToImageFunc) GET_PROC_ADDR("vkCmdCopyBufferToImage");
if (usedApiVersion >= VK_MAKE_API_VERSION(1, 1, 0, 0))
    m_vk.cmdCopyImageToBuffer = (CmdCopyImageToBufferFunc) GET_PROC_ADDR("vkCmdCopyImageToBuffer");
if (usedApiVersion >= VK_MAKE_API_VERSION(1, 1, 0, 0))
    m_vk.cmdUpdateBuffer = (CmdUpdateBufferFunc) GET_PROC_ADDR("vkCmdUpdateBuffer");
if (usedApiVersion >= VK_MAKE_API_VERSION(1, 1, 0, 0))
    m_vk.cmdFillBuffer = (CmdFillBufferFunc) GET_PROC_ADDR("vkCmdFillBuffer");
if (usedApiVersion >= VK_MAKE_API_VERSION(1, 1, 0, 0))
    m_vk.cmdClearColorImage = (CmdClearColorImageFunc) GET_PROC_ADDR("vkCmdClearColorImage");
if (usedApiVersion >= VK_MAKE_API_VERSION(1, 1, 0, 0))
    m_vk.cmdClearDepthStencilImage = (CmdClearDepthStencilImageFunc) GET_PROC_ADDR("vkCmdClearDepthStencilImage");
if (usedApiVersion >= VK_MAKE_API_VERSION(1, 1, 0, 0))
    m_vk.cmdClearAttachments = (CmdClearAttachmentsFunc) GET_PROC_ADDR("vkCmdClearAttachments");
if (usedApiVersion >= VK_MAKE_API_VERSION(1, 1, 0, 0))
    m_vk.cmdResolveImage = (CmdResolveImageFunc) GET_PROC_ADDR("vkCmdResolveImage");
if (usedApiVersion >= VK_MAKE_API_VERSION(1, 1, 0, 0))
    m_vk.cmdSetEvent = (CmdSetEventFunc) GET_PROC_ADDR("vkCmdSetEvent");
if (usedApiVersion >= VK_MAKE_API_VERSION(1, 1, 0, 0))
    m_vk.cmdResetEvent = (CmdResetEventFunc) GET_PROC_ADDR("vkCmdResetEvent");
if (usedApiVersion >= VK_MAKE_API_VERSION(1, 1, 0, 0))
    m_vk.cmdWaitEvents = (CmdWaitEventsFunc) GET_PROC_ADDR("vkCmdWaitEvents");
if (usedApiVersion >= VK_MAKE_API_VERSION(1, 1, 0, 0))
    m_vk.cmdPipelineBarrier = (CmdPipelineBarrierFunc) GET_PROC_ADDR("vkCmdPipelineBarrier");
if (usedApiVersion >= VK_MAKE_API_VERSION(1, 1, 0, 0))
    m_vk.cmdBeginQuery = (CmdBeginQueryFunc) GET_PROC_ADDR("vkCmdBeginQuery");
if (usedApiVersion >= VK_MAKE_API_VERSION(1, 1, 0, 0))
    m_vk.cmdEndQuery = (CmdEndQueryFunc) GET_PROC_ADDR("vkCmdEndQuery");
if (usedApiVersion >= VK_MAKE_API_VERSION(1, 1, 0, 0))
    m_vk.cmdResetQueryPool = (CmdResetQueryPoolFunc) GET_PROC_ADDR("vkCmdResetQueryPool");
if (usedApiVersion >= VK_MAKE_API_VERSION(1, 1, 0, 0))
    m_vk.cmdWriteTimestamp = (CmdWriteTimestampFunc) GET_PROC_ADDR("vkCmdWriteTimestamp");
if (usedApiVersion >= VK_MAKE_API_VERSION(1, 1, 0, 0))
    m_vk.cmdCopyQueryPoolResults = (CmdCopyQueryPoolResultsFunc) GET_PROC_ADDR("vkCmdCopyQueryPoolResults");
if (usedApiVersion >= VK_MAKE_API_VERSION(1, 1, 0, 0))
    m_vk.cmdPushConstants = (CmdPushConstantsFunc) GET_PROC_ADDR("vkCmdPushConstants");
if (usedApiVersion >= VK_MAKE_API_VERSION(1, 1, 0, 0))
    m_vk.cmdBeginRenderPass = (CmdBeginRenderPassFunc) GET_PROC_ADDR("vkCmdBeginRenderPass");
if (usedApiVersion >= VK_MAKE_API_VERSION(1, 1, 0, 0))
    m_vk.cmdNextSubpass = (CmdNextSubpassFunc) GET_PROC_ADDR("vkCmdNextSubpass");
if (usedApiVersion >= VK_MAKE_API_VERSION(1, 1, 0, 0))
    m_vk.cmdEndRenderPass = (CmdEndRenderPassFunc) GET_PROC_ADDR("vkCmdEndRenderPass");
if (usedApiVersion >= VK_MAKE_API_VERSION(1, 1, 0, 0))
    m_vk.cmdExecuteCommands = (CmdExecuteCommandsFunc) GET_PROC_ADDR("vkCmdExecuteCommands");
m_vk.createSharedSwapchainsKHR = (CreateSharedSwapchainsKHRFunc) GET_PROC_ADDR("vkCreateSharedSwapchainsKHR");
m_vk.createSwapchainKHR = (CreateSwapchainKHRFunc) GET_PROC_ADDR("vkCreateSwapchainKHR");
m_vk.getSwapchainImagesKHR = (GetSwapchainImagesKHRFunc) GET_PROC_ADDR("vkGetSwapchainImagesKHR");
m_vk.acquireNextImageKHR = (AcquireNextImageKHRFunc) GET_PROC_ADDR("vkAcquireNextImageKHR");
m_vk.queuePresentKHR = (QueuePresentKHRFunc) GET_PROC_ADDR("vkQueuePresentKHR");
m_vk.getMemoryFdKHR = (GetMemoryFdKHRFunc) GET_PROC_ADDR("vkGetMemoryFdKHR");
m_vk.getMemoryFdPropertiesKHR = (GetMemoryFdPropertiesKHRFunc) GET_PROC_ADDR("vkGetMemoryFdPropertiesKHR");
m_vk.getMemorySciBufNV = (GetMemorySciBufNVFunc) GET_PROC_ADDR("vkGetMemorySciBufNV");
m_vk.getSemaphoreFdKHR = (GetSemaphoreFdKHRFunc) GET_PROC_ADDR("vkGetSemaphoreFdKHR");
m_vk.importSemaphoreFdKHR = (ImportSemaphoreFdKHRFunc) GET_PROC_ADDR("vkImportSemaphoreFdKHR");
m_vk.getFenceFdKHR = (GetFenceFdKHRFunc) GET_PROC_ADDR("vkGetFenceFdKHR");
m_vk.importFenceFdKHR = (ImportFenceFdKHRFunc) GET_PROC_ADDR("vkImportFenceFdKHR");
m_vk.getFenceSciSyncFenceNV = (GetFenceSciSyncFenceNVFunc) GET_PROC_ADDR("vkGetFenceSciSyncFenceNV");
m_vk.getFenceSciSyncObjNV = (GetFenceSciSyncObjNVFunc) GET_PROC_ADDR("vkGetFenceSciSyncObjNV");
m_vk.importFenceSciSyncFenceNV = (ImportFenceSciSyncFenceNVFunc) GET_PROC_ADDR("vkImportFenceSciSyncFenceNV");
m_vk.importFenceSciSyncObjNV = (ImportFenceSciSyncObjNVFunc) GET_PROC_ADDR("vkImportFenceSciSyncObjNV");
m_vk.getSemaphoreSciSyncObjNV = (GetSemaphoreSciSyncObjNVFunc) GET_PROC_ADDR("vkGetSemaphoreSciSyncObjNV");
m_vk.importSemaphoreSciSyncObjNV = (ImportSemaphoreSciSyncObjNVFunc) GET_PROC_ADDR("vkImportSemaphoreSciSyncObjNV");
m_vk.createSemaphoreSciSyncPoolNV = (CreateSemaphoreSciSyncPoolNVFunc) GET_PROC_ADDR("vkCreateSemaphoreSciSyncPoolNV");
m_vk.displayPowerControlEXT = (DisplayPowerControlEXTFunc) GET_PROC_ADDR("vkDisplayPowerControlEXT");
m_vk.registerDeviceEventEXT = (RegisterDeviceEventEXTFunc) GET_PROC_ADDR("vkRegisterDeviceEventEXT");
m_vk.registerDisplayEventEXT = (RegisterDisplayEventEXTFunc) GET_PROC_ADDR("vkRegisterDisplayEventEXT");
m_vk.getSwapchainCounterEXT = (GetSwapchainCounterEXTFunc) GET_PROC_ADDR("vkGetSwapchainCounterEXT");
if (usedApiVersion >= VK_MAKE_API_VERSION(1, 1, 0, 0))
    m_vk.getDeviceGroupPeerMemoryFeatures = (GetDeviceGroupPeerMemoryFeaturesFunc) GET_PROC_ADDR("vkGetDeviceGroupPeerMemoryFeatures");
if (!m_vk.getDeviceGroupPeerMemoryFeatures)
    m_vk.getDeviceGroupPeerMemoryFeatures = (GetDeviceGroupPeerMemoryFeaturesFunc) GET_PROC_ADDR("vkGetDeviceGroupPeerMemoryFeaturesKHR");
if (usedApiVersion >= VK_MAKE_API_VERSION(1, 1, 0, 0))
    m_vk.bindBufferMemory2 = (BindBufferMemory2Func) GET_PROC_ADDR("vkBindBufferMemory2");
if (!m_vk.bindBufferMemory2)
    m_vk.bindBufferMemory2 = (BindBufferMemory2Func) GET_PROC_ADDR("vkBindBufferMemory2KHR");
if (usedApiVersion >= VK_MAKE_API_VERSION(1, 1, 0, 0))
    m_vk.bindImageMemory2 = (BindImageMemory2Func) GET_PROC_ADDR("vkBindImageMemory2");
if (!m_vk.bindImageMemory2)
    m_vk.bindImageMemory2 = (BindImageMemory2Func) GET_PROC_ADDR("vkBindImageMemory2KHR");
if (usedApiVersion >= VK_MAKE_API_VERSION(1, 1, 0, 0))
    m_vk.cmdSetDeviceMask = (CmdSetDeviceMaskFunc) GET_PROC_ADDR("vkCmdSetDeviceMask");
if (!m_vk.cmdSetDeviceMask)
    m_vk.cmdSetDeviceMask = (CmdSetDeviceMaskFunc) GET_PROC_ADDR("vkCmdSetDeviceMaskKHR");
m_vk.getDeviceGroupPresentCapabilitiesKHR = (GetDeviceGroupPresentCapabilitiesKHRFunc) GET_PROC_ADDR("vkGetDeviceGroupPresentCapabilitiesKHR");
m_vk.getDeviceGroupSurfacePresentModesKHR = (GetDeviceGroupSurfacePresentModesKHRFunc) GET_PROC_ADDR("vkGetDeviceGroupSurfacePresentModesKHR");
m_vk.acquireNextImage2KHR = (AcquireNextImage2KHRFunc) GET_PROC_ADDR("vkAcquireNextImage2KHR");
if (usedApiVersion >= VK_MAKE_API_VERSION(1, 1, 0, 0))
    m_vk.cmdDispatchBase = (CmdDispatchBaseFunc) GET_PROC_ADDR("vkCmdDispatchBase");
if (!m_vk.cmdDispatchBase)
    m_vk.cmdDispatchBase = (CmdDispatchBaseFunc) GET_PROC_ADDR("vkCmdDispatchBaseKHR");
m_vk.setHdrMetadataEXT = (SetHdrMetadataEXTFunc) GET_PROC_ADDR("vkSetHdrMetadataEXT");
m_vk.getSwapchainStatusKHR = (GetSwapchainStatusKHRFunc) GET_PROC_ADDR("vkGetSwapchainStatusKHR");
m_vk.cmdSetDiscardRectangleEXT = (CmdSetDiscardRectangleEXTFunc) GET_PROC_ADDR("vkCmdSetDiscardRectangleEXT");
m_vk.cmdSetDiscardRectangleEnableEXT = (CmdSetDiscardRectangleEnableEXTFunc) GET_PROC_ADDR("vkCmdSetDiscardRectangleEnableEXT");
m_vk.cmdSetDiscardRectangleModeEXT = (CmdSetDiscardRectangleModeEXTFunc) GET_PROC_ADDR("vkCmdSetDiscardRectangleModeEXT");
m_vk.cmdSetSampleLocationsEXT = (CmdSetSampleLocationsEXTFunc) GET_PROC_ADDR("vkCmdSetSampleLocationsEXT");
if (usedApiVersion >= VK_MAKE_API_VERSION(1, 1, 0, 0))
    m_vk.getBufferMemoryRequirements2 = (GetBufferMemoryRequirements2Func) GET_PROC_ADDR("vkGetBufferMemoryRequirements2");
if (!m_vk.getBufferMemoryRequirements2)
    m_vk.getBufferMemoryRequirements2 = (GetBufferMemoryRequirements2Func) GET_PROC_ADDR("vkGetBufferMemoryRequirements2KHR");
if (usedApiVersion >= VK_MAKE_API_VERSION(1, 1, 0, 0))
    m_vk.getImageMemoryRequirements2 = (GetImageMemoryRequirements2Func) GET_PROC_ADDR("vkGetImageMemoryRequirements2");
if (!m_vk.getImageMemoryRequirements2)
    m_vk.getImageMemoryRequirements2 = (GetImageMemoryRequirements2Func) GET_PROC_ADDR("vkGetImageMemoryRequirements2KHR");
if (usedApiVersion >= VK_MAKE_API_VERSION(1, 1, 0, 0))
    m_vk.createSamplerYcbcrConversion = (CreateSamplerYcbcrConversionFunc) GET_PROC_ADDR("vkCreateSamplerYcbcrConversion");
if (!m_vk.createSamplerYcbcrConversion)
    m_vk.createSamplerYcbcrConversion = (CreateSamplerYcbcrConversionFunc) GET_PROC_ADDR("vkCreateSamplerYcbcrConversionKHR");
if (usedApiVersion >= VK_MAKE_API_VERSION(1, 1, 0, 0))
    m_vk.destroySamplerYcbcrConversion = (DestroySamplerYcbcrConversionFunc) GET_PROC_ADDR("vkDestroySamplerYcbcrConversion");
if (!m_vk.destroySamplerYcbcrConversion)
    m_vk.destroySamplerYcbcrConversion = (DestroySamplerYcbcrConversionFunc) GET_PROC_ADDR("vkDestroySamplerYcbcrConversionKHR");
if (usedApiVersion >= VK_MAKE_API_VERSION(1, 1, 0, 0))
    m_vk.getDeviceQueue2 = (GetDeviceQueue2Func) GET_PROC_ADDR("vkGetDeviceQueue2");
if (usedApiVersion >= VK_MAKE_API_VERSION(1, 1, 0, 0))
    m_vk.getDescriptorSetLayoutSupport = (GetDescriptorSetLayoutSupportFunc) GET_PROC_ADDR("vkGetDescriptorSetLayoutSupport");
if (!m_vk.getDescriptorSetLayoutSupport)
    m_vk.getDescriptorSetLayoutSupport = (GetDescriptorSetLayoutSupportFunc) GET_PROC_ADDR("vkGetDescriptorSetLayoutSupportKHR");
m_vk.getCalibratedTimestampsKHR = (GetCalibratedTimestampsKHRFunc) GET_PROC_ADDR("vkGetCalibratedTimestampsKHR");
if (!m_vk.getCalibratedTimestampsKHR)
    m_vk.getCalibratedTimestampsKHR = (GetCalibratedTimestampsKHRFunc) GET_PROC_ADDR("vkGetCalibratedTimestampsEXT");
m_vk.setDebugUtilsObjectNameEXT = (SetDebugUtilsObjectNameEXTFunc) GET_PROC_ADDR("vkSetDebugUtilsObjectNameEXT");
m_vk.setDebugUtilsObjectTagEXT = (SetDebugUtilsObjectTagEXTFunc) GET_PROC_ADDR("vkSetDebugUtilsObjectTagEXT");
m_vk.queueBeginDebugUtilsLabelEXT = (QueueBeginDebugUtilsLabelEXTFunc) GET_PROC_ADDR("vkQueueBeginDebugUtilsLabelEXT");
m_vk.queueEndDebugUtilsLabelEXT = (QueueEndDebugUtilsLabelEXTFunc) GET_PROC_ADDR("vkQueueEndDebugUtilsLabelEXT");
m_vk.queueInsertDebugUtilsLabelEXT = (QueueInsertDebugUtilsLabelEXTFunc) GET_PROC_ADDR("vkQueueInsertDebugUtilsLabelEXT");
m_vk.cmdBeginDebugUtilsLabelEXT = (CmdBeginDebugUtilsLabelEXTFunc) GET_PROC_ADDR("vkCmdBeginDebugUtilsLabelEXT");
m_vk.cmdEndDebugUtilsLabelEXT = (CmdEndDebugUtilsLabelEXTFunc) GET_PROC_ADDR("vkCmdEndDebugUtilsLabelEXT");
m_vk.cmdInsertDebugUtilsLabelEXT = (CmdInsertDebugUtilsLabelEXTFunc) GET_PROC_ADDR("vkCmdInsertDebugUtilsLabelEXT");
m_vk.getMemoryHostPointerPropertiesEXT = (GetMemoryHostPointerPropertiesEXTFunc) GET_PROC_ADDR("vkGetMemoryHostPointerPropertiesEXT");
if (usedApiVersion >= VK_MAKE_API_VERSION(1, 1, 0, 0))
    m_vk.createRenderPass2 = (CreateRenderPass2Func) GET_PROC_ADDR("vkCreateRenderPass2");
if (!m_vk.createRenderPass2)
    m_vk.createRenderPass2 = (CreateRenderPass2Func) GET_PROC_ADDR("vkCreateRenderPass2KHR");
if (usedApiVersion >= VK_MAKE_API_VERSION(1, 1, 0, 0))
    m_vk.cmdBeginRenderPass2 = (CmdBeginRenderPass2Func) GET_PROC_ADDR("vkCmdBeginRenderPass2");
if (!m_vk.cmdBeginRenderPass2)
    m_vk.cmdBeginRenderPass2 = (CmdBeginRenderPass2Func) GET_PROC_ADDR("vkCmdBeginRenderPass2KHR");
if (usedApiVersion >= VK_MAKE_API_VERSION(1, 1, 0, 0))
    m_vk.cmdNextSubpass2 = (CmdNextSubpass2Func) GET_PROC_ADDR("vkCmdNextSubpass2");
if (!m_vk.cmdNextSubpass2)
    m_vk.cmdNextSubpass2 = (CmdNextSubpass2Func) GET_PROC_ADDR("vkCmdNextSubpass2KHR");
if (usedApiVersion >= VK_MAKE_API_VERSION(1, 1, 0, 0))
    m_vk.cmdEndRenderPass2 = (CmdEndRenderPass2Func) GET_PROC_ADDR("vkCmdEndRenderPass2");
if (!m_vk.cmdEndRenderPass2)
    m_vk.cmdEndRenderPass2 = (CmdEndRenderPass2Func) GET_PROC_ADDR("vkCmdEndRenderPass2KHR");
if (usedApiVersion >= VK_MAKE_API_VERSION(1, 1, 0, 0))
    m_vk.getSemaphoreCounterValue = (GetSemaphoreCounterValueFunc) GET_PROC_ADDR("vkGetSemaphoreCounterValue");
if (!m_vk.getSemaphoreCounterValue)
    m_vk.getSemaphoreCounterValue = (GetSemaphoreCounterValueFunc) GET_PROC_ADDR("vkGetSemaphoreCounterValueKHR");
if (usedApiVersion >= VK_MAKE_API_VERSION(1, 1, 0, 0))
    m_vk.waitSemaphores = (WaitSemaphoresFunc) GET_PROC_ADDR("vkWaitSemaphores");
if (!m_vk.waitSemaphores)
    m_vk.waitSemaphores = (WaitSemaphoresFunc) GET_PROC_ADDR("vkWaitSemaphoresKHR");
if (usedApiVersion >= VK_MAKE_API_VERSION(1, 1, 0, 0))
    m_vk.signalSemaphore = (SignalSemaphoreFunc) GET_PROC_ADDR("vkSignalSemaphore");
if (!m_vk.signalSemaphore)
    m_vk.signalSemaphore = (SignalSemaphoreFunc) GET_PROC_ADDR("vkSignalSemaphoreKHR");
if (usedApiVersion >= VK_MAKE_API_VERSION(1, 1, 0, 0))
    m_vk.cmdDrawIndirectCount = (CmdDrawIndirectCountFunc) GET_PROC_ADDR("vkCmdDrawIndirectCount");
if (!m_vk.cmdDrawIndirectCount)
    m_vk.cmdDrawIndirectCount = (CmdDrawIndirectCountFunc) GET_PROC_ADDR("vkCmdDrawIndirectCountKHR");
if (!m_vk.cmdDrawIndirectCount)
    m_vk.cmdDrawIndirectCount = (CmdDrawIndirectCountFunc) GET_PROC_ADDR("vkCmdDrawIndirectCountAMD");
if (usedApiVersion >= VK_MAKE_API_VERSION(1, 1, 0, 0))
    m_vk.cmdDrawIndexedIndirectCount = (CmdDrawIndexedIndirectCountFunc) GET_PROC_ADDR("vkCmdDrawIndexedIndirectCount");
if (!m_vk.cmdDrawIndexedIndirectCount)
    m_vk.cmdDrawIndexedIndirectCount = (CmdDrawIndexedIndirectCountFunc) GET_PROC_ADDR("vkCmdDrawIndexedIndirectCountKHR");
if (!m_vk.cmdDrawIndexedIndirectCount)
    m_vk.cmdDrawIndexedIndirectCount = (CmdDrawIndexedIndirectCountFunc) GET_PROC_ADDR("vkCmdDrawIndexedIndirectCountAMD");
m_vk.cmdSetCheckpointNV = (CmdSetCheckpointNVFunc) GET_PROC_ADDR("vkCmdSetCheckpointNV");
m_vk.getQueueCheckpointDataNV = (GetQueueCheckpointDataNVFunc) GET_PROC_ADDR("vkGetQueueCheckpointDataNV");
m_vk.acquireProfilingLockKHR = (AcquireProfilingLockKHRFunc) GET_PROC_ADDR("vkAcquireProfilingLockKHR");
m_vk.releaseProfilingLockKHR = (ReleaseProfilingLockKHRFunc) GET_PROC_ADDR("vkReleaseProfilingLockKHR");
m_vk.getImageDrmFormatModifierPropertiesEXT = (GetImageDrmFormatModifierPropertiesEXTFunc) GET_PROC_ADDR("vkGetImageDrmFormatModifierPropertiesEXT");
if (usedApiVersion >= VK_MAKE_API_VERSION(1, 1, 0, 0))
    m_vk.getBufferOpaqueCaptureAddress = (GetBufferOpaqueCaptureAddressFunc) GET_PROC_ADDR("vkGetBufferOpaqueCaptureAddress");
if (!m_vk.getBufferOpaqueCaptureAddress)
    m_vk.getBufferOpaqueCaptureAddress = (GetBufferOpaqueCaptureAddressFunc) GET_PROC_ADDR("vkGetBufferOpaqueCaptureAddressKHR");
if (usedApiVersion >= VK_MAKE_API_VERSION(1, 1, 0, 0))
    m_vk.getBufferDeviceAddress = (GetBufferDeviceAddressFunc) GET_PROC_ADDR("vkGetBufferDeviceAddress");
if (!m_vk.getBufferDeviceAddress)
    m_vk.getBufferDeviceAddress = (GetBufferDeviceAddressFunc) GET_PROC_ADDR("vkGetBufferDeviceAddressKHR");
if (!m_vk.getBufferDeviceAddress)
    m_vk.getBufferDeviceAddress = (GetBufferDeviceAddressFunc) GET_PROC_ADDR("vkGetBufferDeviceAddressEXT");
if (usedApiVersion >= VK_MAKE_API_VERSION(1, 1, 0, 0))
    m_vk.getDeviceMemoryOpaqueCaptureAddress = (GetDeviceMemoryOpaqueCaptureAddressFunc) GET_PROC_ADDR("vkGetDeviceMemoryOpaqueCaptureAddress");
if (!m_vk.getDeviceMemoryOpaqueCaptureAddress)
    m_vk.getDeviceMemoryOpaqueCaptureAddress = (GetDeviceMemoryOpaqueCaptureAddressFunc) GET_PROC_ADDR("vkGetDeviceMemoryOpaqueCaptureAddressKHR");
m_vk.cmdSetLineStippleKHR = (CmdSetLineStippleKHRFunc) GET_PROC_ADDR("vkCmdSetLineStippleKHR");
if (!m_vk.cmdSetLineStippleKHR)
    m_vk.cmdSetLineStippleKHR = (CmdSetLineStippleKHRFunc) GET_PROC_ADDR("vkCmdSetLineStippleEXT");
if (usedApiVersion >= VK_MAKE_API_VERSION(1, 1, 0, 0))
    m_vk.getFaultData = (GetFaultDataFunc) GET_PROC_ADDR("vkGetFaultData");
m_vk.cmdSetCullModeEXT = (CmdSetCullModeEXTFunc) GET_PROC_ADDR("vkCmdSetCullModeEXT");
m_vk.cmdSetFrontFaceEXT = (CmdSetFrontFaceEXTFunc) GET_PROC_ADDR("vkCmdSetFrontFaceEXT");
m_vk.cmdSetPrimitiveTopologyEXT = (CmdSetPrimitiveTopologyEXTFunc) GET_PROC_ADDR("vkCmdSetPrimitiveTopologyEXT");
m_vk.cmdSetViewportWithCountEXT = (CmdSetViewportWithCountEXTFunc) GET_PROC_ADDR("vkCmdSetViewportWithCountEXT");
m_vk.cmdSetScissorWithCountEXT = (CmdSetScissorWithCountEXTFunc) GET_PROC_ADDR("vkCmdSetScissorWithCountEXT");
m_vk.cmdBindVertexBuffers2EXT = (CmdBindVertexBuffers2EXTFunc) GET_PROC_ADDR("vkCmdBindVertexBuffers2EXT");
m_vk.cmdSetDepthTestEnableEXT = (CmdSetDepthTestEnableEXTFunc) GET_PROC_ADDR("vkCmdSetDepthTestEnableEXT");
m_vk.cmdSetDepthWriteEnableEXT = (CmdSetDepthWriteEnableEXTFunc) GET_PROC_ADDR("vkCmdSetDepthWriteEnableEXT");
m_vk.cmdSetDepthCompareOpEXT = (CmdSetDepthCompareOpEXTFunc) GET_PROC_ADDR("vkCmdSetDepthCompareOpEXT");
m_vk.cmdSetDepthBoundsTestEnableEXT = (CmdSetDepthBoundsTestEnableEXTFunc) GET_PROC_ADDR("vkCmdSetDepthBoundsTestEnableEXT");
m_vk.cmdSetStencilTestEnableEXT = (CmdSetStencilTestEnableEXTFunc) GET_PROC_ADDR("vkCmdSetStencilTestEnableEXT");
m_vk.cmdSetStencilOpEXT = (CmdSetStencilOpEXTFunc) GET_PROC_ADDR("vkCmdSetStencilOpEXT");
m_vk.cmdSetPatchControlPointsEXT = (CmdSetPatchControlPointsEXTFunc) GET_PROC_ADDR("vkCmdSetPatchControlPointsEXT");
m_vk.cmdSetRasterizerDiscardEnableEXT = (CmdSetRasterizerDiscardEnableEXTFunc) GET_PROC_ADDR("vkCmdSetRasterizerDiscardEnableEXT");
m_vk.cmdSetDepthBiasEnableEXT = (CmdSetDepthBiasEnableEXTFunc) GET_PROC_ADDR("vkCmdSetDepthBiasEnableEXT");
m_vk.cmdSetLogicOpEXT = (CmdSetLogicOpEXTFunc) GET_PROC_ADDR("vkCmdSetLogicOpEXT");
m_vk.cmdSetPrimitiveRestartEnableEXT = (CmdSetPrimitiveRestartEnableEXTFunc) GET_PROC_ADDR("vkCmdSetPrimitiveRestartEnableEXT");
m_vk.cmdCopyBuffer2KHR = (CmdCopyBuffer2KHRFunc) GET_PROC_ADDR("vkCmdCopyBuffer2KHR");
m_vk.cmdCopyImage2KHR = (CmdCopyImage2KHRFunc) GET_PROC_ADDR("vkCmdCopyImage2KHR");
m_vk.cmdBlitImage2KHR = (CmdBlitImage2KHRFunc) GET_PROC_ADDR("vkCmdBlitImage2KHR");
m_vk.cmdCopyBufferToImage2KHR = (CmdCopyBufferToImage2KHRFunc) GET_PROC_ADDR("vkCmdCopyBufferToImage2KHR");
m_vk.cmdCopyImageToBuffer2KHR = (CmdCopyImageToBuffer2KHRFunc) GET_PROC_ADDR("vkCmdCopyImageToBuffer2KHR");
m_vk.cmdResolveImage2KHR = (CmdResolveImage2KHRFunc) GET_PROC_ADDR("vkCmdResolveImage2KHR");
m_vk.cmdRefreshObjectsKHR = (CmdRefreshObjectsKHRFunc) GET_PROC_ADDR("vkCmdRefreshObjectsKHR");
m_vk.cmdSetFragmentShadingRateKHR = (CmdSetFragmentShadingRateKHRFunc) GET_PROC_ADDR("vkCmdSetFragmentShadingRateKHR");
m_vk.cmdSetVertexInputEXT = (CmdSetVertexInputEXTFunc) GET_PROC_ADDR("vkCmdSetVertexInputEXT");
m_vk.cmdSetColorWriteEnableEXT = (CmdSetColorWriteEnableEXTFunc) GET_PROC_ADDR("vkCmdSetColorWriteEnableEXT");
m_vk.cmdSetEvent2KHR = (CmdSetEvent2KHRFunc) GET_PROC_ADDR("vkCmdSetEvent2KHR");
m_vk.cmdResetEvent2KHR = (CmdResetEvent2KHRFunc) GET_PROC_ADDR("vkCmdResetEvent2KHR");
m_vk.cmdWaitEvents2KHR = (CmdWaitEvents2KHRFunc) GET_PROC_ADDR("vkCmdWaitEvents2KHR");
m_vk.cmdPipelineBarrier2KHR = (CmdPipelineBarrier2KHRFunc) GET_PROC_ADDR("vkCmdPipelineBarrier2KHR");
m_vk.queueSubmit2KHR = (QueueSubmit2KHRFunc) GET_PROC_ADDR("vkQueueSubmit2KHR");
m_vk.cmdWriteTimestamp2KHR = (CmdWriteTimestamp2KHRFunc) GET_PROC_ADDR("vkCmdWriteTimestamp2KHR");
m_vk.getQueueCheckpointData2NV = (GetQueueCheckpointData2NVFunc) GET_PROC_ADDR("vkGetQueueCheckpointData2NV");
if (usedApiVersion >= VK_MAKE_API_VERSION(1, 1, 0, 0))
    m_vk.getCommandPoolMemoryConsumption = (GetCommandPoolMemoryConsumptionFunc) GET_PROC_ADDR("vkGetCommandPoolMemoryConsumption");
m_vk.getScreenBufferPropertiesQNX = (GetScreenBufferPropertiesQNXFunc) GET_PROC_ADDR("vkGetScreenBufferPropertiesQNX");
