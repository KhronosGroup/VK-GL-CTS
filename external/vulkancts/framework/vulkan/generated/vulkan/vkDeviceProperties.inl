/* WARNING: This is auto-generated file. Do not modify, since changes will
 * be lost! Modify the generating script instead.
 * This file was generated by /scripts/gen_framework.py
 */
#include "vkDeviceProperties.hpp"

#include <set>

namespace vk
{

#define DECL_CORE_PROPERTIES_NAME "core_properties"

template<> void initPropertyFromBlob<VkPhysicalDeviceDepthStencilResolveProperties>(VkPhysicalDeviceDepthStencilResolveProperties& propertiesType, const AllPropertiesBlobs& allBlobs)
{
	propertiesType.supportedDepthResolveModes = allBlobs.vk12.supportedDepthResolveModes;
	propertiesType.supportedStencilResolveModes = allBlobs.vk12.supportedStencilResolveModes;
	propertiesType.independentResolveNone = allBlobs.vk12.independentResolveNone;
	propertiesType.independentResolve = allBlobs.vk12.independentResolve;
}
template<> void initPropertyFromBlob<VkPhysicalDeviceDescriptorIndexingProperties>(VkPhysicalDeviceDescriptorIndexingProperties& propertiesType, const AllPropertiesBlobs& allBlobs)
{
	propertiesType.maxUpdateAfterBindDescriptorsInAllPools = allBlobs.vk12.maxUpdateAfterBindDescriptorsInAllPools;
	propertiesType.shaderUniformBufferArrayNonUniformIndexingNative = allBlobs.vk12.shaderUniformBufferArrayNonUniformIndexingNative;
	propertiesType.shaderSampledImageArrayNonUniformIndexingNative = allBlobs.vk12.shaderSampledImageArrayNonUniformIndexingNative;
	propertiesType.shaderStorageBufferArrayNonUniformIndexingNative = allBlobs.vk12.shaderStorageBufferArrayNonUniformIndexingNative;
	propertiesType.shaderStorageImageArrayNonUniformIndexingNative = allBlobs.vk12.shaderStorageImageArrayNonUniformIndexingNative;
	propertiesType.shaderInputAttachmentArrayNonUniformIndexingNative = allBlobs.vk12.shaderInputAttachmentArrayNonUniformIndexingNative;
	propertiesType.robustBufferAccessUpdateAfterBind = allBlobs.vk12.robustBufferAccessUpdateAfterBind;
	propertiesType.quadDivergentImplicitLod = allBlobs.vk12.quadDivergentImplicitLod;
	propertiesType.maxPerStageDescriptorUpdateAfterBindSamplers = allBlobs.vk12.maxPerStageDescriptorUpdateAfterBindSamplers;
	propertiesType.maxPerStageDescriptorUpdateAfterBindUniformBuffers = allBlobs.vk12.maxPerStageDescriptorUpdateAfterBindUniformBuffers;
	propertiesType.maxPerStageDescriptorUpdateAfterBindStorageBuffers = allBlobs.vk12.maxPerStageDescriptorUpdateAfterBindStorageBuffers;
	propertiesType.maxPerStageDescriptorUpdateAfterBindSampledImages = allBlobs.vk12.maxPerStageDescriptorUpdateAfterBindSampledImages;
	propertiesType.maxPerStageDescriptorUpdateAfterBindStorageImages = allBlobs.vk12.maxPerStageDescriptorUpdateAfterBindStorageImages;
	propertiesType.maxPerStageDescriptorUpdateAfterBindInputAttachments = allBlobs.vk12.maxPerStageDescriptorUpdateAfterBindInputAttachments;
	propertiesType.maxPerStageUpdateAfterBindResources = allBlobs.vk12.maxPerStageUpdateAfterBindResources;
	propertiesType.maxDescriptorSetUpdateAfterBindSamplers = allBlobs.vk12.maxDescriptorSetUpdateAfterBindSamplers;
	propertiesType.maxDescriptorSetUpdateAfterBindUniformBuffers = allBlobs.vk12.maxDescriptorSetUpdateAfterBindUniformBuffers;
	propertiesType.maxDescriptorSetUpdateAfterBindUniformBuffersDynamic = allBlobs.vk12.maxDescriptorSetUpdateAfterBindUniformBuffersDynamic;
	propertiesType.maxDescriptorSetUpdateAfterBindStorageBuffers = allBlobs.vk12.maxDescriptorSetUpdateAfterBindStorageBuffers;
	propertiesType.maxDescriptorSetUpdateAfterBindStorageBuffersDynamic = allBlobs.vk12.maxDescriptorSetUpdateAfterBindStorageBuffersDynamic;
	propertiesType.maxDescriptorSetUpdateAfterBindSampledImages = allBlobs.vk12.maxDescriptorSetUpdateAfterBindSampledImages;
	propertiesType.maxDescriptorSetUpdateAfterBindStorageImages = allBlobs.vk12.maxDescriptorSetUpdateAfterBindStorageImages;
	propertiesType.maxDescriptorSetUpdateAfterBindInputAttachments = allBlobs.vk12.maxDescriptorSetUpdateAfterBindInputAttachments;
}
template<> void initPropertyFromBlob<VkPhysicalDeviceDriverProperties>(VkPhysicalDeviceDriverProperties& propertiesType, const AllPropertiesBlobs& allBlobs)
{
	propertiesType.driverID = allBlobs.vk12.driverID;
	memcpy(propertiesType.driverName, allBlobs.vk12.driverName, sizeof(char) * VK_MAX_DRIVER_NAME_SIZE);
	memcpy(propertiesType.driverInfo, allBlobs.vk12.driverInfo, sizeof(char) * VK_MAX_DRIVER_INFO_SIZE);
	propertiesType.conformanceVersion = allBlobs.vk12.conformanceVersion;
}
template<> void initPropertyFromBlob<VkPhysicalDeviceFloatControlsProperties>(VkPhysicalDeviceFloatControlsProperties& propertiesType, const AllPropertiesBlobs& allBlobs)
{
	propertiesType.denormBehaviorIndependence = allBlobs.vk12.denormBehaviorIndependence;
	propertiesType.roundingModeIndependence = allBlobs.vk12.roundingModeIndependence;
	propertiesType.shaderSignedZeroInfNanPreserveFloat16 = allBlobs.vk12.shaderSignedZeroInfNanPreserveFloat16;
	propertiesType.shaderSignedZeroInfNanPreserveFloat32 = allBlobs.vk12.shaderSignedZeroInfNanPreserveFloat32;
	propertiesType.shaderSignedZeroInfNanPreserveFloat64 = allBlobs.vk12.shaderSignedZeroInfNanPreserveFloat64;
	propertiesType.shaderDenormPreserveFloat16 = allBlobs.vk12.shaderDenormPreserveFloat16;
	propertiesType.shaderDenormPreserveFloat32 = allBlobs.vk12.shaderDenormPreserveFloat32;
	propertiesType.shaderDenormPreserveFloat64 = allBlobs.vk12.shaderDenormPreserveFloat64;
	propertiesType.shaderDenormFlushToZeroFloat16 = allBlobs.vk12.shaderDenormFlushToZeroFloat16;
	propertiesType.shaderDenormFlushToZeroFloat32 = allBlobs.vk12.shaderDenormFlushToZeroFloat32;
	propertiesType.shaderDenormFlushToZeroFloat64 = allBlobs.vk12.shaderDenormFlushToZeroFloat64;
	propertiesType.shaderRoundingModeRTEFloat16 = allBlobs.vk12.shaderRoundingModeRTEFloat16;
	propertiesType.shaderRoundingModeRTEFloat32 = allBlobs.vk12.shaderRoundingModeRTEFloat32;
	propertiesType.shaderRoundingModeRTEFloat64 = allBlobs.vk12.shaderRoundingModeRTEFloat64;
	propertiesType.shaderRoundingModeRTZFloat16 = allBlobs.vk12.shaderRoundingModeRTZFloat16;
	propertiesType.shaderRoundingModeRTZFloat32 = allBlobs.vk12.shaderRoundingModeRTZFloat32;
	propertiesType.shaderRoundingModeRTZFloat64 = allBlobs.vk12.shaderRoundingModeRTZFloat64;
}
template<> void initPropertyFromBlob<VkPhysicalDeviceHostImageCopyProperties>(VkPhysicalDeviceHostImageCopyProperties& propertiesType, const AllPropertiesBlobs& allBlobs)
{
	propertiesType.copySrcLayoutCount = allBlobs.vk14.copySrcLayoutCount;
	propertiesType.pCopySrcLayouts = allBlobs.vk14.pCopySrcLayouts;
	propertiesType.copyDstLayoutCount = allBlobs.vk14.copyDstLayoutCount;
	propertiesType.pCopyDstLayouts = allBlobs.vk14.pCopyDstLayouts;
	memcpy(propertiesType.optimalTilingLayoutUUID, allBlobs.vk14.optimalTilingLayoutUUID, sizeof(uint8_t) * VK_UUID_SIZE);
	propertiesType.identicalMemoryTypeRequirements = allBlobs.vk14.identicalMemoryTypeRequirements;
}
template<> void initPropertyFromBlob<VkPhysicalDeviceIDProperties>(VkPhysicalDeviceIDProperties& propertiesType, const AllPropertiesBlobs& allBlobs)
{
	memcpy(propertiesType.deviceUUID, allBlobs.vk11.deviceUUID, sizeof(uint8_t) * VK_UUID_SIZE);
	memcpy(propertiesType.driverUUID, allBlobs.vk11.driverUUID, sizeof(uint8_t) * VK_UUID_SIZE);
	memcpy(propertiesType.deviceLUID, allBlobs.vk11.deviceLUID, sizeof(uint8_t) * VK_LUID_SIZE);
	propertiesType.deviceNodeMask = allBlobs.vk11.deviceNodeMask;
	propertiesType.deviceLUIDValid = allBlobs.vk11.deviceLUIDValid;
}
template<> void initPropertyFromBlob<VkPhysicalDeviceInlineUniformBlockProperties>(VkPhysicalDeviceInlineUniformBlockProperties& propertiesType, const AllPropertiesBlobs& allBlobs)
{
	propertiesType.maxInlineUniformBlockSize = allBlobs.vk13.maxInlineUniformBlockSize;
	propertiesType.maxPerStageDescriptorInlineUniformBlocks = allBlobs.vk13.maxPerStageDescriptorInlineUniformBlocks;
	propertiesType.maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks = allBlobs.vk13.maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks;
	propertiesType.maxDescriptorSetInlineUniformBlocks = allBlobs.vk13.maxDescriptorSetInlineUniformBlocks;
	propertiesType.maxDescriptorSetUpdateAfterBindInlineUniformBlocks = allBlobs.vk13.maxDescriptorSetUpdateAfterBindInlineUniformBlocks;
}
template<> void initPropertyFromBlob<VkPhysicalDeviceLineRasterizationProperties>(VkPhysicalDeviceLineRasterizationProperties& propertiesType, const AllPropertiesBlobs& allBlobs)
{
	propertiesType.lineSubPixelPrecisionBits = allBlobs.vk14.lineSubPixelPrecisionBits;
}
template<> void initPropertyFromBlob<VkPhysicalDeviceMaintenance3Properties>(VkPhysicalDeviceMaintenance3Properties& propertiesType, const AllPropertiesBlobs& allBlobs)
{
	propertiesType.maxPerSetDescriptors = allBlobs.vk11.maxPerSetDescriptors;
	propertiesType.maxMemoryAllocationSize = allBlobs.vk11.maxMemoryAllocationSize;
}
template<> void initPropertyFromBlob<VkPhysicalDeviceMaintenance4Properties>(VkPhysicalDeviceMaintenance4Properties& propertiesType, const AllPropertiesBlobs& allBlobs)
{
	propertiesType.maxBufferSize = allBlobs.vk13.maxBufferSize;
}
template<> void initPropertyFromBlob<VkPhysicalDeviceMaintenance5Properties>(VkPhysicalDeviceMaintenance5Properties& propertiesType, const AllPropertiesBlobs& allBlobs)
{
	propertiesType.earlyFragmentMultisampleCoverageAfterSampleCounting = allBlobs.vk14.earlyFragmentMultisampleCoverageAfterSampleCounting;
	propertiesType.earlyFragmentSampleMaskTestBeforeSampleCounting = allBlobs.vk14.earlyFragmentSampleMaskTestBeforeSampleCounting;
	propertiesType.depthStencilSwizzleOneSupport = allBlobs.vk14.depthStencilSwizzleOneSupport;
	propertiesType.polygonModePointSize = allBlobs.vk14.polygonModePointSize;
	propertiesType.nonStrictSinglePixelWideLinesUseParallelogram = allBlobs.vk14.nonStrictSinglePixelWideLinesUseParallelogram;
	propertiesType.nonStrictWideLinesUseParallelogram = allBlobs.vk14.nonStrictWideLinesUseParallelogram;
}
template<> void initPropertyFromBlob<VkPhysicalDeviceMaintenance6Properties>(VkPhysicalDeviceMaintenance6Properties& propertiesType, const AllPropertiesBlobs& allBlobs)
{
	propertiesType.blockTexelViewCompatibleMultipleLayers = allBlobs.vk14.blockTexelViewCompatibleMultipleLayers;
	propertiesType.maxCombinedImageSamplerDescriptorCount = allBlobs.vk14.maxCombinedImageSamplerDescriptorCount;
	propertiesType.fragmentShadingRateClampCombinerInputs = allBlobs.vk14.fragmentShadingRateClampCombinerInputs;
}
template<> void initPropertyFromBlob<VkPhysicalDeviceMultiviewProperties>(VkPhysicalDeviceMultiviewProperties& propertiesType, const AllPropertiesBlobs& allBlobs)
{
	propertiesType.maxMultiviewViewCount = allBlobs.vk11.maxMultiviewViewCount;
	propertiesType.maxMultiviewInstanceIndex = allBlobs.vk11.maxMultiviewInstanceIndex;
}
template<> void initPropertyFromBlob<VkPhysicalDevicePipelineRobustnessProperties>(VkPhysicalDevicePipelineRobustnessProperties& propertiesType, const AllPropertiesBlobs& allBlobs)
{
	propertiesType.defaultRobustnessStorageBuffers = allBlobs.vk14.defaultRobustnessStorageBuffers;
	propertiesType.defaultRobustnessUniformBuffers = allBlobs.vk14.defaultRobustnessUniformBuffers;
	propertiesType.defaultRobustnessVertexInputs = allBlobs.vk14.defaultRobustnessVertexInputs;
	propertiesType.defaultRobustnessImages = allBlobs.vk14.defaultRobustnessImages;
}
template<> void initPropertyFromBlob<VkPhysicalDevicePointClippingProperties>(VkPhysicalDevicePointClippingProperties& propertiesType, const AllPropertiesBlobs& allBlobs)
{
	propertiesType.pointClippingBehavior = allBlobs.vk11.pointClippingBehavior;
}
template<> void initPropertyFromBlob<VkPhysicalDeviceProtectedMemoryProperties>(VkPhysicalDeviceProtectedMemoryProperties& propertiesType, const AllPropertiesBlobs& allBlobs)
{
	propertiesType.protectedNoFault = allBlobs.vk11.protectedNoFault;
}
template<> void initPropertyFromBlob<VkPhysicalDevicePushDescriptorProperties>(VkPhysicalDevicePushDescriptorProperties& propertiesType, const AllPropertiesBlobs& allBlobs)
{
	propertiesType.maxPushDescriptors = allBlobs.vk14.maxPushDescriptors;
}
template<> void initPropertyFromBlob<VkPhysicalDeviceSamplerFilterMinmaxProperties>(VkPhysicalDeviceSamplerFilterMinmaxProperties& propertiesType, const AllPropertiesBlobs& allBlobs)
{
	propertiesType.filterMinmaxSingleComponentFormats = allBlobs.vk12.filterMinmaxSingleComponentFormats;
	propertiesType.filterMinmaxImageComponentMapping = allBlobs.vk12.filterMinmaxImageComponentMapping;
}
template<> void initPropertyFromBlob<VkPhysicalDeviceShaderIntegerDotProductProperties>(VkPhysicalDeviceShaderIntegerDotProductProperties& propertiesType, const AllPropertiesBlobs& allBlobs)
{
	propertiesType.integerDotProduct8BitUnsignedAccelerated = allBlobs.vk13.integerDotProduct8BitUnsignedAccelerated;
	propertiesType.integerDotProduct8BitSignedAccelerated = allBlobs.vk13.integerDotProduct8BitSignedAccelerated;
	propertiesType.integerDotProduct8BitMixedSignednessAccelerated = allBlobs.vk13.integerDotProduct8BitMixedSignednessAccelerated;
	propertiesType.integerDotProduct4x8BitPackedUnsignedAccelerated = allBlobs.vk13.integerDotProduct4x8BitPackedUnsignedAccelerated;
	propertiesType.integerDotProduct4x8BitPackedSignedAccelerated = allBlobs.vk13.integerDotProduct4x8BitPackedSignedAccelerated;
	propertiesType.integerDotProduct4x8BitPackedMixedSignednessAccelerated = allBlobs.vk13.integerDotProduct4x8BitPackedMixedSignednessAccelerated;
	propertiesType.integerDotProduct16BitUnsignedAccelerated = allBlobs.vk13.integerDotProduct16BitUnsignedAccelerated;
	propertiesType.integerDotProduct16BitSignedAccelerated = allBlobs.vk13.integerDotProduct16BitSignedAccelerated;
	propertiesType.integerDotProduct16BitMixedSignednessAccelerated = allBlobs.vk13.integerDotProduct16BitMixedSignednessAccelerated;
	propertiesType.integerDotProduct32BitUnsignedAccelerated = allBlobs.vk13.integerDotProduct32BitUnsignedAccelerated;
	propertiesType.integerDotProduct32BitSignedAccelerated = allBlobs.vk13.integerDotProduct32BitSignedAccelerated;
	propertiesType.integerDotProduct32BitMixedSignednessAccelerated = allBlobs.vk13.integerDotProduct32BitMixedSignednessAccelerated;
	propertiesType.integerDotProduct64BitUnsignedAccelerated = allBlobs.vk13.integerDotProduct64BitUnsignedAccelerated;
	propertiesType.integerDotProduct64BitSignedAccelerated = allBlobs.vk13.integerDotProduct64BitSignedAccelerated;
	propertiesType.integerDotProduct64BitMixedSignednessAccelerated = allBlobs.vk13.integerDotProduct64BitMixedSignednessAccelerated;
	propertiesType.integerDotProductAccumulatingSaturating8BitUnsignedAccelerated = allBlobs.vk13.integerDotProductAccumulatingSaturating8BitUnsignedAccelerated;
	propertiesType.integerDotProductAccumulatingSaturating8BitSignedAccelerated = allBlobs.vk13.integerDotProductAccumulatingSaturating8BitSignedAccelerated;
	propertiesType.integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated = allBlobs.vk13.integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated;
	propertiesType.integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated = allBlobs.vk13.integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated;
	propertiesType.integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated = allBlobs.vk13.integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated;
	propertiesType.integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated = allBlobs.vk13.integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated;
	propertiesType.integerDotProductAccumulatingSaturating16BitUnsignedAccelerated = allBlobs.vk13.integerDotProductAccumulatingSaturating16BitUnsignedAccelerated;
	propertiesType.integerDotProductAccumulatingSaturating16BitSignedAccelerated = allBlobs.vk13.integerDotProductAccumulatingSaturating16BitSignedAccelerated;
	propertiesType.integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated = allBlobs.vk13.integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated;
	propertiesType.integerDotProductAccumulatingSaturating32BitUnsignedAccelerated = allBlobs.vk13.integerDotProductAccumulatingSaturating32BitUnsignedAccelerated;
	propertiesType.integerDotProductAccumulatingSaturating32BitSignedAccelerated = allBlobs.vk13.integerDotProductAccumulatingSaturating32BitSignedAccelerated;
	propertiesType.integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated = allBlobs.vk13.integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated;
	propertiesType.integerDotProductAccumulatingSaturating64BitUnsignedAccelerated = allBlobs.vk13.integerDotProductAccumulatingSaturating64BitUnsignedAccelerated;
	propertiesType.integerDotProductAccumulatingSaturating64BitSignedAccelerated = allBlobs.vk13.integerDotProductAccumulatingSaturating64BitSignedAccelerated;
	propertiesType.integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated = allBlobs.vk13.integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated;
}
template<> void initPropertyFromBlob<VkPhysicalDeviceSubgroupProperties>(VkPhysicalDeviceSubgroupProperties& propertiesType, const AllPropertiesBlobs& allBlobs)
{
	propertiesType.subgroupSize = allBlobs.vk11.subgroupSize;
	propertiesType.supportedStages = allBlobs.vk11.subgroupSupportedStages;
	propertiesType.supportedOperations = allBlobs.vk11.subgroupSupportedOperations;
	propertiesType.quadOperationsInAllStages = allBlobs.vk11.subgroupQuadOperationsInAllStages;
}
template<> void initPropertyFromBlob<VkPhysicalDeviceSubgroupSizeControlProperties>(VkPhysicalDeviceSubgroupSizeControlProperties& propertiesType, const AllPropertiesBlobs& allBlobs)
{
	propertiesType.minSubgroupSize = allBlobs.vk13.minSubgroupSize;
	propertiesType.maxSubgroupSize = allBlobs.vk13.maxSubgroupSize;
	propertiesType.maxComputeWorkgroupSubgroups = allBlobs.vk13.maxComputeWorkgroupSubgroups;
	propertiesType.requiredSubgroupSizeStages = allBlobs.vk13.requiredSubgroupSizeStages;
}
template<> void initPropertyFromBlob<VkPhysicalDeviceTexelBufferAlignmentProperties>(VkPhysicalDeviceTexelBufferAlignmentProperties& propertiesType, const AllPropertiesBlobs& allBlobs)
{
	propertiesType.storageTexelBufferOffsetAlignmentBytes = allBlobs.vk13.storageTexelBufferOffsetAlignmentBytes;
	propertiesType.storageTexelBufferOffsetSingleTexelAlignment = allBlobs.vk13.storageTexelBufferOffsetSingleTexelAlignment;
	propertiesType.uniformTexelBufferOffsetAlignmentBytes = allBlobs.vk13.uniformTexelBufferOffsetAlignmentBytes;
	propertiesType.uniformTexelBufferOffsetSingleTexelAlignment = allBlobs.vk13.uniformTexelBufferOffsetSingleTexelAlignment;
}
template<> void initPropertyFromBlob<VkPhysicalDeviceTimelineSemaphoreProperties>(VkPhysicalDeviceTimelineSemaphoreProperties& propertiesType, const AllPropertiesBlobs& allBlobs)
{
	propertiesType.maxTimelineSemaphoreValueDifference = allBlobs.vk12.maxTimelineSemaphoreValueDifference;
}
template<> void initPropertyFromBlob<VkPhysicalDeviceVertexAttributeDivisorProperties>(VkPhysicalDeviceVertexAttributeDivisorProperties& propertiesType, const AllPropertiesBlobs& allBlobs)
{
	propertiesType.maxVertexAttribDivisor = allBlobs.vk14.maxVertexAttribDivisor;
	propertiesType.supportsNonZeroFirstInstance = allBlobs.vk14.supportsNonZeroFirstInstance;
}
template<> void initPropertyFromBlob<VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT>(VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT& propertiesType, const AllPropertiesBlobs& allBlobs)
{
	propertiesType.maxVertexAttribDivisor = allBlobs.vk14.maxVertexAttribDivisor;
}

// generic template is not enough for some compilers
template<> void initPropertyFromBlob<VkPhysicalDeviceAccelerationStructurePropertiesKHR>(VkPhysicalDeviceAccelerationStructurePropertiesKHR&, const AllPropertiesBlobs&) {}
template<> void initPropertyFromBlob<VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT>(VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT&, const AllPropertiesBlobs&) {}
template<> void initPropertyFromBlob<VkPhysicalDeviceClusterAccelerationStructurePropertiesNV>(VkPhysicalDeviceClusterAccelerationStructurePropertiesNV&, const AllPropertiesBlobs&) {}
template<> void initPropertyFromBlob<VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI>(VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI&, const AllPropertiesBlobs&) {}
template<> void initPropertyFromBlob<VkPhysicalDeviceComputeShaderDerivativesPropertiesKHR>(VkPhysicalDeviceComputeShaderDerivativesPropertiesKHR&, const AllPropertiesBlobs&) {}
template<> void initPropertyFromBlob<VkPhysicalDeviceConservativeRasterizationPropertiesEXT>(VkPhysicalDeviceConservativeRasterizationPropertiesEXT&, const AllPropertiesBlobs&) {}
template<> void initPropertyFromBlob<VkPhysicalDeviceCooperativeMatrix2PropertiesNV>(VkPhysicalDeviceCooperativeMatrix2PropertiesNV&, const AllPropertiesBlobs&) {}
template<> void initPropertyFromBlob<VkPhysicalDeviceCooperativeMatrixPropertiesKHR>(VkPhysicalDeviceCooperativeMatrixPropertiesKHR&, const AllPropertiesBlobs&) {}
template<> void initPropertyFromBlob<VkPhysicalDeviceCooperativeMatrixPropertiesNV>(VkPhysicalDeviceCooperativeMatrixPropertiesNV&, const AllPropertiesBlobs&) {}
template<> void initPropertyFromBlob<VkPhysicalDeviceCooperativeVectorPropertiesNV>(VkPhysicalDeviceCooperativeVectorPropertiesNV&, const AllPropertiesBlobs&) {}
template<> void initPropertyFromBlob<VkPhysicalDeviceCopyMemoryIndirectPropertiesNV>(VkPhysicalDeviceCopyMemoryIndirectPropertiesNV&, const AllPropertiesBlobs&) {}
template<> void initPropertyFromBlob<VkPhysicalDeviceCudaKernelLaunchPropertiesNV>(VkPhysicalDeviceCudaKernelLaunchPropertiesNV&, const AllPropertiesBlobs&) {}
template<> void initPropertyFromBlob<VkPhysicalDeviceCustomBorderColorPropertiesEXT>(VkPhysicalDeviceCustomBorderColorPropertiesEXT&, const AllPropertiesBlobs&) {}
template<> void initPropertyFromBlob<VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT>(VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT&, const AllPropertiesBlobs&) {}
template<> void initPropertyFromBlob<VkPhysicalDeviceDescriptorBufferPropertiesEXT>(VkPhysicalDeviceDescriptorBufferPropertiesEXT&, const AllPropertiesBlobs&) {}
template<> void initPropertyFromBlob<VkPhysicalDeviceDescriptorBufferTensorPropertiesARM>(VkPhysicalDeviceDescriptorBufferTensorPropertiesARM&, const AllPropertiesBlobs&) {}
template<> void initPropertyFromBlob<VkPhysicalDeviceDeviceGeneratedCommandsPropertiesEXT>(VkPhysicalDeviceDeviceGeneratedCommandsPropertiesEXT&, const AllPropertiesBlobs&) {}
template<> void initPropertyFromBlob<VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV>(VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV&, const AllPropertiesBlobs&) {}
template<> void initPropertyFromBlob<VkPhysicalDeviceDiscardRectanglePropertiesEXT>(VkPhysicalDeviceDiscardRectanglePropertiesEXT&, const AllPropertiesBlobs&) {}
template<> void initPropertyFromBlob<VkPhysicalDeviceDisplacementMicromapPropertiesNV>(VkPhysicalDeviceDisplacementMicromapPropertiesNV&, const AllPropertiesBlobs&) {}
template<> void initPropertyFromBlob<VkPhysicalDeviceDrmPropertiesEXT>(VkPhysicalDeviceDrmPropertiesEXT&, const AllPropertiesBlobs&) {}
template<> void initPropertyFromBlob<VkPhysicalDeviceExtendedDynamicState3PropertiesEXT>(VkPhysicalDeviceExtendedDynamicState3PropertiesEXT&, const AllPropertiesBlobs&) {}
template<> void initPropertyFromBlob<VkPhysicalDeviceExtendedSparseAddressSpacePropertiesNV>(VkPhysicalDeviceExtendedSparseAddressSpacePropertiesNV&, const AllPropertiesBlobs&) {}
template<> void initPropertyFromBlob<VkPhysicalDeviceExternalComputeQueuePropertiesNV>(VkPhysicalDeviceExternalComputeQueuePropertiesNV&, const AllPropertiesBlobs&) {}
template<> void initPropertyFromBlob<VkPhysicalDeviceExternalFormatResolvePropertiesANDROID>(VkPhysicalDeviceExternalFormatResolvePropertiesANDROID&, const AllPropertiesBlobs&) {}
template<> void initPropertyFromBlob<VkPhysicalDeviceExternalMemoryHostPropertiesEXT>(VkPhysicalDeviceExternalMemoryHostPropertiesEXT&, const AllPropertiesBlobs&) {}
template<> void initPropertyFromBlob<VkPhysicalDeviceFragmentDensityMap2PropertiesEXT>(VkPhysicalDeviceFragmentDensityMap2PropertiesEXT&, const AllPropertiesBlobs&) {}
template<> void initPropertyFromBlob<VkPhysicalDeviceFragmentDensityMapLayeredPropertiesVALVE>(VkPhysicalDeviceFragmentDensityMapLayeredPropertiesVALVE&, const AllPropertiesBlobs&) {}
template<> void initPropertyFromBlob<VkPhysicalDeviceFragmentDensityMapOffsetPropertiesEXT>(VkPhysicalDeviceFragmentDensityMapOffsetPropertiesEXT&, const AllPropertiesBlobs&) {}
template<> void initPropertyFromBlob<VkPhysicalDeviceFragmentDensityMapPropertiesEXT>(VkPhysicalDeviceFragmentDensityMapPropertiesEXT&, const AllPropertiesBlobs&) {}
template<> void initPropertyFromBlob<VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR>(VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR&, const AllPropertiesBlobs&) {}
template<> void initPropertyFromBlob<VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV>(VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV&, const AllPropertiesBlobs&) {}
template<> void initPropertyFromBlob<VkPhysicalDeviceFragmentShadingRatePropertiesKHR>(VkPhysicalDeviceFragmentShadingRatePropertiesKHR&, const AllPropertiesBlobs&) {}
template<> void initPropertyFromBlob<VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT>(VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT&, const AllPropertiesBlobs&) {}
template<> void initPropertyFromBlob<VkPhysicalDeviceImageAlignmentControlPropertiesMESA>(VkPhysicalDeviceImageAlignmentControlPropertiesMESA&, const AllPropertiesBlobs&) {}
template<> void initPropertyFromBlob<VkPhysicalDeviceImageProcessing2PropertiesQCOM>(VkPhysicalDeviceImageProcessing2PropertiesQCOM&, const AllPropertiesBlobs&) {}
template<> void initPropertyFromBlob<VkPhysicalDeviceImageProcessingPropertiesQCOM>(VkPhysicalDeviceImageProcessingPropertiesQCOM&, const AllPropertiesBlobs&) {}
template<> void initPropertyFromBlob<VkPhysicalDeviceLayeredApiPropertiesListKHR>(VkPhysicalDeviceLayeredApiPropertiesListKHR&, const AllPropertiesBlobs&) {}
template<> void initPropertyFromBlob<VkPhysicalDeviceLayeredDriverPropertiesMSFT>(VkPhysicalDeviceLayeredDriverPropertiesMSFT&, const AllPropertiesBlobs&) {}
template<> void initPropertyFromBlob<VkPhysicalDeviceLegacyVertexAttributesPropertiesEXT>(VkPhysicalDeviceLegacyVertexAttributesPropertiesEXT&, const AllPropertiesBlobs&) {}
template<> void initPropertyFromBlob<VkPhysicalDeviceMaintenance7PropertiesKHR>(VkPhysicalDeviceMaintenance7PropertiesKHR&, const AllPropertiesBlobs&) {}
template<> void initPropertyFromBlob<VkPhysicalDeviceMaintenance9PropertiesKHR>(VkPhysicalDeviceMaintenance9PropertiesKHR&, const AllPropertiesBlobs&) {}
template<> void initPropertyFromBlob<VkPhysicalDeviceMapMemoryPlacedPropertiesEXT>(VkPhysicalDeviceMapMemoryPlacedPropertiesEXT&, const AllPropertiesBlobs&) {}
template<> void initPropertyFromBlob<VkPhysicalDeviceMemoryDecompressionPropertiesNV>(VkPhysicalDeviceMemoryDecompressionPropertiesNV&, const AllPropertiesBlobs&) {}
template<> void initPropertyFromBlob<VkPhysicalDeviceMeshShaderPropertiesEXT>(VkPhysicalDeviceMeshShaderPropertiesEXT&, const AllPropertiesBlobs&) {}
template<> void initPropertyFromBlob<VkPhysicalDeviceMeshShaderPropertiesNV>(VkPhysicalDeviceMeshShaderPropertiesNV&, const AllPropertiesBlobs&) {}
template<> void initPropertyFromBlob<VkPhysicalDeviceMultiDrawPropertiesEXT>(VkPhysicalDeviceMultiDrawPropertiesEXT&, const AllPropertiesBlobs&) {}
template<> void initPropertyFromBlob<VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX>(VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX&, const AllPropertiesBlobs&) {}
template<> void initPropertyFromBlob<VkPhysicalDeviceNestedCommandBufferPropertiesEXT>(VkPhysicalDeviceNestedCommandBufferPropertiesEXT&, const AllPropertiesBlobs&) {}
template<> void initPropertyFromBlob<VkPhysicalDeviceOpacityMicromapPropertiesEXT>(VkPhysicalDeviceOpacityMicromapPropertiesEXT&, const AllPropertiesBlobs&) {}
template<> void initPropertyFromBlob<VkPhysicalDeviceOpticalFlowPropertiesNV>(VkPhysicalDeviceOpticalFlowPropertiesNV&, const AllPropertiesBlobs&) {}
template<> void initPropertyFromBlob<VkPhysicalDevicePCIBusInfoPropertiesEXT>(VkPhysicalDevicePCIBusInfoPropertiesEXT&, const AllPropertiesBlobs&) {}
template<> void initPropertyFromBlob<VkPhysicalDevicePartitionedAccelerationStructurePropertiesNV>(VkPhysicalDevicePartitionedAccelerationStructurePropertiesNV&, const AllPropertiesBlobs&) {}
template<> void initPropertyFromBlob<VkPhysicalDevicePerformanceQueryPropertiesKHR>(VkPhysicalDevicePerformanceQueryPropertiesKHR&, const AllPropertiesBlobs&) {}
template<> void initPropertyFromBlob<VkPhysicalDevicePipelineBinaryPropertiesKHR>(VkPhysicalDevicePipelineBinaryPropertiesKHR&, const AllPropertiesBlobs&) {}
template<> void initPropertyFromBlob<VkPhysicalDevicePortabilitySubsetPropertiesKHR>(VkPhysicalDevicePortabilitySubsetPropertiesKHR&, const AllPropertiesBlobs&) {}
template<> void initPropertyFromBlob<VkPhysicalDeviceProvokingVertexPropertiesEXT>(VkPhysicalDeviceProvokingVertexPropertiesEXT&, const AllPropertiesBlobs&) {}
template<> void initPropertyFromBlob<VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV>(VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV&, const AllPropertiesBlobs&) {}
template<> void initPropertyFromBlob<VkPhysicalDeviceRayTracingPipelinePropertiesKHR>(VkPhysicalDeviceRayTracingPipelinePropertiesKHR&, const AllPropertiesBlobs&) {}
template<> void initPropertyFromBlob<VkPhysicalDeviceRayTracingPropertiesNV>(VkPhysicalDeviceRayTracingPropertiesNV&, const AllPropertiesBlobs&) {}
template<> void initPropertyFromBlob<VkPhysicalDeviceRenderPassStripedPropertiesARM>(VkPhysicalDeviceRenderPassStripedPropertiesARM&, const AllPropertiesBlobs&) {}
template<> void initPropertyFromBlob<VkPhysicalDeviceRobustness2PropertiesKHR>(VkPhysicalDeviceRobustness2PropertiesKHR&, const AllPropertiesBlobs&) {}
template<> void initPropertyFromBlob<VkPhysicalDeviceSampleLocationsPropertiesEXT>(VkPhysicalDeviceSampleLocationsPropertiesEXT&, const AllPropertiesBlobs&) {}
template<> void initPropertyFromBlob<VkPhysicalDeviceSchedulingControlsPropertiesARM>(VkPhysicalDeviceSchedulingControlsPropertiesARM&, const AllPropertiesBlobs&) {}
template<> void initPropertyFromBlob<VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM>(VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM&, const AllPropertiesBlobs&) {}
template<> void initPropertyFromBlob<VkPhysicalDeviceShaderCoreProperties2AMD>(VkPhysicalDeviceShaderCoreProperties2AMD&, const AllPropertiesBlobs&) {}
template<> void initPropertyFromBlob<VkPhysicalDeviceShaderCorePropertiesAMD>(VkPhysicalDeviceShaderCorePropertiesAMD&, const AllPropertiesBlobs&) {}
template<> void initPropertyFromBlob<VkPhysicalDeviceShaderCorePropertiesARM>(VkPhysicalDeviceShaderCorePropertiesARM&, const AllPropertiesBlobs&) {}
template<> void initPropertyFromBlob<VkPhysicalDeviceShaderEnqueuePropertiesAMDX>(VkPhysicalDeviceShaderEnqueuePropertiesAMDX&, const AllPropertiesBlobs&) {}
template<> void initPropertyFromBlob<VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT>(VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT&, const AllPropertiesBlobs&) {}
template<> void initPropertyFromBlob<VkPhysicalDeviceShaderObjectPropertiesEXT>(VkPhysicalDeviceShaderObjectPropertiesEXT&, const AllPropertiesBlobs&) {}
template<> void initPropertyFromBlob<VkPhysicalDeviceShaderSMBuiltinsPropertiesNV>(VkPhysicalDeviceShaderSMBuiltinsPropertiesNV&, const AllPropertiesBlobs&) {}
template<> void initPropertyFromBlob<VkPhysicalDeviceShaderTileImagePropertiesEXT>(VkPhysicalDeviceShaderTileImagePropertiesEXT&, const AllPropertiesBlobs&) {}
template<> void initPropertyFromBlob<VkPhysicalDeviceShadingRateImagePropertiesNV>(VkPhysicalDeviceShadingRateImagePropertiesNV&, const AllPropertiesBlobs&) {}
template<> void initPropertyFromBlob<VkPhysicalDeviceSubpassShadingPropertiesHUAWEI>(VkPhysicalDeviceSubpassShadingPropertiesHUAWEI&, const AllPropertiesBlobs&) {}
template<> void initPropertyFromBlob<VkPhysicalDeviceTensorPropertiesARM>(VkPhysicalDeviceTensorPropertiesARM&, const AllPropertiesBlobs&) {}
template<> void initPropertyFromBlob<VkPhysicalDeviceTileMemoryHeapPropertiesQCOM>(VkPhysicalDeviceTileMemoryHeapPropertiesQCOM&, const AllPropertiesBlobs&) {}
template<> void initPropertyFromBlob<VkPhysicalDeviceTileShadingPropertiesQCOM>(VkPhysicalDeviceTileShadingPropertiesQCOM&, const AllPropertiesBlobs&) {}
template<> void initPropertyFromBlob<VkPhysicalDeviceTransformFeedbackPropertiesEXT>(VkPhysicalDeviceTransformFeedbackPropertiesEXT&, const AllPropertiesBlobs&) {}

template<> PropertyDesc makePropertyDesc<VkPhysicalDeviceAccelerationStructurePropertiesKHR>(void) { return PropertyDesc{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_PROPERTIES_KHR, VK_KHR_ACCELERATION_STRUCTURE_EXTENSION_NAME}; }
template<> PropertyDesc makePropertyDesc<VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT>(void) { return PropertyDesc{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT, VK_EXT_BLEND_OPERATION_ADVANCED_EXTENSION_NAME}; }
template<> PropertyDesc makePropertyDesc<VkPhysicalDeviceClusterAccelerationStructurePropertiesNV>(void) { return PropertyDesc{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CLUSTER_ACCELERATION_STRUCTURE_PROPERTIES_NV, VK_NV_CLUSTER_ACCELERATION_STRUCTURE_EXTENSION_NAME}; }
template<> PropertyDesc makePropertyDesc<VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI>(void) { return PropertyDesc{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CLUSTER_CULLING_SHADER_PROPERTIES_HUAWEI, VK_HUAWEI_CLUSTER_CULLING_SHADER_EXTENSION_NAME}; }
template<> PropertyDesc makePropertyDesc<VkPhysicalDeviceComputeShaderDerivativesPropertiesKHR>(void) { return PropertyDesc{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_PROPERTIES_KHR, VK_KHR_COMPUTE_SHADER_DERIVATIVES_EXTENSION_NAME}; }
template<> PropertyDesc makePropertyDesc<VkPhysicalDeviceConservativeRasterizationPropertiesEXT>(void) { return PropertyDesc{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT, VK_EXT_CONSERVATIVE_RASTERIZATION_EXTENSION_NAME}; }
template<> PropertyDesc makePropertyDesc<VkPhysicalDeviceCooperativeMatrix2PropertiesNV>(void) { return PropertyDesc{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_2_PROPERTIES_NV, VK_NV_COOPERATIVE_MATRIX_2_EXTENSION_NAME}; }
template<> PropertyDesc makePropertyDesc<VkPhysicalDeviceCooperativeMatrixPropertiesKHR>(void) { return PropertyDesc{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_KHR, VK_KHR_COOPERATIVE_MATRIX_EXTENSION_NAME}; }
template<> PropertyDesc makePropertyDesc<VkPhysicalDeviceCooperativeMatrixPropertiesNV>(void) { return PropertyDesc{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_NV, VK_NV_COOPERATIVE_MATRIX_EXTENSION_NAME}; }
template<> PropertyDesc makePropertyDesc<VkPhysicalDeviceCooperativeVectorPropertiesNV>(void) { return PropertyDesc{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_VECTOR_PROPERTIES_NV, VK_NV_COOPERATIVE_VECTOR_EXTENSION_NAME}; }
template<> PropertyDesc makePropertyDesc<VkPhysicalDeviceCopyMemoryIndirectPropertiesNV>(void) { return PropertyDesc{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COPY_MEMORY_INDIRECT_PROPERTIES_NV, VK_NV_COPY_MEMORY_INDIRECT_EXTENSION_NAME}; }
template<> PropertyDesc makePropertyDesc<VkPhysicalDeviceCudaKernelLaunchPropertiesNV>(void) { return PropertyDesc{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUDA_KERNEL_LAUNCH_PROPERTIES_NV, VK_NV_CUDA_KERNEL_LAUNCH_EXTENSION_NAME}; }
template<> PropertyDesc makePropertyDesc<VkPhysicalDeviceCustomBorderColorPropertiesEXT>(void) { return PropertyDesc{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_PROPERTIES_EXT, VK_EXT_CUSTOM_BORDER_COLOR_EXTENSION_NAME}; }
template<> PropertyDesc makePropertyDesc<VkPhysicalDeviceDepthStencilResolveProperties>(void) { return PropertyDesc{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES, VK_KHR_DEPTH_STENCIL_RESOLVE_EXTENSION_NAME}; }
template<> PropertyDesc makePropertyDesc<VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT>(void) { return PropertyDesc{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_DENSITY_MAP_PROPERTIES_EXT, VK_EXT_DESCRIPTOR_BUFFER_EXTENSION_NAME}; }
template<> PropertyDesc makePropertyDesc<VkPhysicalDeviceDescriptorBufferPropertiesEXT>(void) { return PropertyDesc{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_PROPERTIES_EXT, VK_EXT_DESCRIPTOR_BUFFER_EXTENSION_NAME}; }
template<> PropertyDesc makePropertyDesc<VkPhysicalDeviceDescriptorBufferTensorPropertiesARM>(void) { return PropertyDesc{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_TENSOR_PROPERTIES_ARM, VK_ARM_TENSORS_EXTENSION_NAME}; }
template<> PropertyDesc makePropertyDesc<VkPhysicalDeviceDescriptorIndexingProperties>(void) { return PropertyDesc{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES, VK_EXT_DESCRIPTOR_INDEXING_EXTENSION_NAME}; }
template<> PropertyDesc makePropertyDesc<VkPhysicalDeviceDeviceGeneratedCommandsPropertiesEXT>(void) { return PropertyDesc{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_PROPERTIES_EXT, VK_EXT_DEVICE_GENERATED_COMMANDS_EXTENSION_NAME}; }
template<> PropertyDesc makePropertyDesc<VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV>(void) { return PropertyDesc{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_PROPERTIES_NV, VK_NV_DEVICE_GENERATED_COMMANDS_EXTENSION_NAME}; }
template<> PropertyDesc makePropertyDesc<VkPhysicalDeviceDiscardRectanglePropertiesEXT>(void) { return PropertyDesc{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT, VK_EXT_DISCARD_RECTANGLES_EXTENSION_NAME}; }
template<> PropertyDesc makePropertyDesc<VkPhysicalDeviceDisplacementMicromapPropertiesNV>(void) { return PropertyDesc{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISPLACEMENT_MICROMAP_PROPERTIES_NV, VK_NV_DISPLACEMENT_MICROMAP_EXTENSION_NAME}; }
template<> PropertyDesc makePropertyDesc<VkPhysicalDeviceDriverProperties>(void) { return PropertyDesc{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES, VK_KHR_DRIVER_PROPERTIES_EXTENSION_NAME}; }
template<> PropertyDesc makePropertyDesc<VkPhysicalDeviceDrmPropertiesEXT>(void) { return PropertyDesc{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRM_PROPERTIES_EXT, VK_EXT_PHYSICAL_DEVICE_DRM_EXTENSION_NAME}; }
template<> PropertyDesc makePropertyDesc<VkPhysicalDeviceExtendedDynamicState3PropertiesEXT>(void) { return PropertyDesc{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_3_PROPERTIES_EXT, VK_EXT_EXTENDED_DYNAMIC_STATE_3_EXTENSION_NAME}; }
template<> PropertyDesc makePropertyDesc<VkPhysicalDeviceExtendedSparseAddressSpacePropertiesNV>(void) { return PropertyDesc{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_SPARSE_ADDRESS_SPACE_PROPERTIES_NV, VK_NV_EXTENDED_SPARSE_ADDRESS_SPACE_EXTENSION_NAME}; }
template<> PropertyDesc makePropertyDesc<VkPhysicalDeviceExternalComputeQueuePropertiesNV>(void) { return PropertyDesc{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_COMPUTE_QUEUE_PROPERTIES_NV, VK_NV_EXTERNAL_COMPUTE_QUEUE_EXTENSION_NAME}; }
template<> PropertyDesc makePropertyDesc<VkPhysicalDeviceExternalFormatResolvePropertiesANDROID>(void) { return PropertyDesc{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FORMAT_RESOLVE_PROPERTIES_ANDROID, VK_ANDROID_EXTERNAL_FORMAT_RESOLVE_EXTENSION_NAME}; }
template<> PropertyDesc makePropertyDesc<VkPhysicalDeviceExternalMemoryHostPropertiesEXT>(void) { return PropertyDesc{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT, VK_EXT_EXTERNAL_MEMORY_HOST_EXTENSION_NAME}; }
template<> PropertyDesc makePropertyDesc<VkPhysicalDeviceFloatControlsProperties>(void) { return PropertyDesc{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES, VK_KHR_SHADER_FLOAT_CONTROLS_EXTENSION_NAME}; }
template<> PropertyDesc makePropertyDesc<VkPhysicalDeviceFragmentDensityMap2PropertiesEXT>(void) { return PropertyDesc{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_PROPERTIES_EXT, VK_EXT_FRAGMENT_DENSITY_MAP_2_EXTENSION_NAME}; }
template<> PropertyDesc makePropertyDesc<VkPhysicalDeviceFragmentDensityMapLayeredPropertiesVALVE>(void) { return PropertyDesc{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_LAYERED_PROPERTIES_VALVE, VK_VALVE_FRAGMENT_DENSITY_MAP_LAYERED_EXTENSION_NAME}; }
template<> PropertyDesc makePropertyDesc<VkPhysicalDeviceFragmentDensityMapOffsetPropertiesEXT>(void) { return PropertyDesc{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_PROPERTIES_EXT, VK_EXT_FRAGMENT_DENSITY_MAP_OFFSET_EXTENSION_NAME}; }
template<> PropertyDesc makePropertyDesc<VkPhysicalDeviceFragmentDensityMapPropertiesEXT>(void) { return PropertyDesc{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_PROPERTIES_EXT, VK_EXT_FRAGMENT_DENSITY_MAP_EXTENSION_NAME}; }
template<> PropertyDesc makePropertyDesc<VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR>(void) { return PropertyDesc{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_PROPERTIES_KHR, VK_KHR_FRAGMENT_SHADER_BARYCENTRIC_EXTENSION_NAME}; }
template<> PropertyDesc makePropertyDesc<VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV>(void) { return PropertyDesc{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_PROPERTIES_NV, VK_NV_FRAGMENT_SHADING_RATE_ENUMS_EXTENSION_NAME}; }
template<> PropertyDesc makePropertyDesc<VkPhysicalDeviceFragmentShadingRatePropertiesKHR>(void) { return PropertyDesc{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_PROPERTIES_KHR, VK_KHR_FRAGMENT_SHADING_RATE_EXTENSION_NAME}; }
template<> PropertyDesc makePropertyDesc<VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT>(void) { return PropertyDesc{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GRAPHICS_PIPELINE_LIBRARY_PROPERTIES_EXT, VK_EXT_GRAPHICS_PIPELINE_LIBRARY_EXTENSION_NAME}; }
template<> PropertyDesc makePropertyDesc<VkPhysicalDeviceHostImageCopyProperties>(void) { return PropertyDesc{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_IMAGE_COPY_PROPERTIES, VK_EXT_HOST_IMAGE_COPY_EXTENSION_NAME}; }
template<> PropertyDesc makePropertyDesc<VkPhysicalDeviceIDProperties>(void) { return PropertyDesc{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES, VK_KHR_EXTERNAL_MEMORY_CAPABILITIES_EXTENSION_NAME}; }
template<> PropertyDesc makePropertyDesc<VkPhysicalDeviceImageAlignmentControlPropertiesMESA>(void) { return PropertyDesc{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ALIGNMENT_CONTROL_PROPERTIES_MESA, VK_MESA_IMAGE_ALIGNMENT_CONTROL_EXTENSION_NAME}; }
template<> PropertyDesc makePropertyDesc<VkPhysicalDeviceImageProcessing2PropertiesQCOM>(void) { return PropertyDesc{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_2_PROPERTIES_QCOM, VK_QCOM_IMAGE_PROCESSING_2_EXTENSION_NAME}; }
template<> PropertyDesc makePropertyDesc<VkPhysicalDeviceImageProcessingPropertiesQCOM>(void) { return PropertyDesc{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_PROPERTIES_QCOM, VK_QCOM_IMAGE_PROCESSING_EXTENSION_NAME}; }
template<> PropertyDesc makePropertyDesc<VkPhysicalDeviceInlineUniformBlockProperties>(void) { return PropertyDesc{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES, VK_EXT_INLINE_UNIFORM_BLOCK_EXTENSION_NAME}; }
template<> PropertyDesc makePropertyDesc<VkPhysicalDeviceLayeredApiPropertiesListKHR>(void) { return PropertyDesc{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LAYERED_API_PROPERTIES_LIST_KHR, VK_KHR_MAINTENANCE_7_EXTENSION_NAME}; }
template<> PropertyDesc makePropertyDesc<VkPhysicalDeviceLayeredDriverPropertiesMSFT>(void) { return PropertyDesc{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LAYERED_DRIVER_PROPERTIES_MSFT, VK_MSFT_LAYERED_DRIVER_EXTENSION_NAME}; }
template<> PropertyDesc makePropertyDesc<VkPhysicalDeviceLegacyVertexAttributesPropertiesEXT>(void) { return PropertyDesc{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LEGACY_VERTEX_ATTRIBUTES_PROPERTIES_EXT, VK_EXT_LEGACY_VERTEX_ATTRIBUTES_EXTENSION_NAME}; }
template<> PropertyDesc makePropertyDesc<VkPhysicalDeviceLineRasterizationProperties>(void) { return PropertyDesc{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES, VK_KHR_LINE_RASTERIZATION_EXTENSION_NAME}; }
template<> PropertyDesc makePropertyDesc<VkPhysicalDeviceMaintenance3Properties>(void) { return PropertyDesc{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES, VK_KHR_MAINTENANCE_3_EXTENSION_NAME}; }
template<> PropertyDesc makePropertyDesc<VkPhysicalDeviceMaintenance4Properties>(void) { return PropertyDesc{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_PROPERTIES, VK_KHR_MAINTENANCE_4_EXTENSION_NAME}; }
template<> PropertyDesc makePropertyDesc<VkPhysicalDeviceMaintenance5Properties>(void) { return PropertyDesc{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_5_PROPERTIES, VK_KHR_MAINTENANCE_5_EXTENSION_NAME}; }
template<> PropertyDesc makePropertyDesc<VkPhysicalDeviceMaintenance6Properties>(void) { return PropertyDesc{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_6_PROPERTIES, VK_KHR_MAINTENANCE_6_EXTENSION_NAME}; }
template<> PropertyDesc makePropertyDesc<VkPhysicalDeviceMaintenance7PropertiesKHR>(void) { return PropertyDesc{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_7_PROPERTIES_KHR, VK_KHR_MAINTENANCE_7_EXTENSION_NAME}; }
template<> PropertyDesc makePropertyDesc<VkPhysicalDeviceMaintenance9PropertiesKHR>(void) { return PropertyDesc{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_9_PROPERTIES_KHR, VK_KHR_MAINTENANCE_9_EXTENSION_NAME}; }
template<> PropertyDesc makePropertyDesc<VkPhysicalDeviceMapMemoryPlacedPropertiesEXT>(void) { return PropertyDesc{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAP_MEMORY_PLACED_PROPERTIES_EXT, VK_EXT_MAP_MEMORY_PLACED_EXTENSION_NAME}; }
template<> PropertyDesc makePropertyDesc<VkPhysicalDeviceMemoryDecompressionPropertiesNV>(void) { return PropertyDesc{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_DECOMPRESSION_PROPERTIES_NV, VK_NV_MEMORY_DECOMPRESSION_EXTENSION_NAME}; }
template<> PropertyDesc makePropertyDesc<VkPhysicalDeviceMeshShaderPropertiesEXT>(void) { return PropertyDesc{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_EXT, VK_EXT_MESH_SHADER_EXTENSION_NAME}; }
template<> PropertyDesc makePropertyDesc<VkPhysicalDeviceMeshShaderPropertiesNV>(void) { return PropertyDesc{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_NV, VK_NV_MESH_SHADER_EXTENSION_NAME}; }
template<> PropertyDesc makePropertyDesc<VkPhysicalDeviceMultiDrawPropertiesEXT>(void) { return PropertyDesc{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTI_DRAW_PROPERTIES_EXT, VK_EXT_MULTI_DRAW_EXTENSION_NAME}; }
template<> PropertyDesc makePropertyDesc<VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX>(void) { return PropertyDesc{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX, VK_NVX_MULTIVIEW_PER_VIEW_ATTRIBUTES_EXTENSION_NAME}; }
template<> PropertyDesc makePropertyDesc<VkPhysicalDeviceMultiviewProperties>(void) { return PropertyDesc{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES, VK_KHR_MULTIVIEW_EXTENSION_NAME}; }
template<> PropertyDesc makePropertyDesc<VkPhysicalDeviceNestedCommandBufferPropertiesEXT>(void) { return PropertyDesc{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_NESTED_COMMAND_BUFFER_PROPERTIES_EXT, VK_EXT_NESTED_COMMAND_BUFFER_EXTENSION_NAME}; }
template<> PropertyDesc makePropertyDesc<VkPhysicalDeviceOpacityMicromapPropertiesEXT>(void) { return PropertyDesc{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPACITY_MICROMAP_PROPERTIES_EXT, VK_EXT_OPACITY_MICROMAP_EXTENSION_NAME}; }
template<> PropertyDesc makePropertyDesc<VkPhysicalDeviceOpticalFlowPropertiesNV>(void) { return PropertyDesc{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPTICAL_FLOW_PROPERTIES_NV, VK_NV_OPTICAL_FLOW_EXTENSION_NAME}; }
template<> PropertyDesc makePropertyDesc<VkPhysicalDevicePCIBusInfoPropertiesEXT>(void) { return PropertyDesc{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT, VK_EXT_PCI_BUS_INFO_EXTENSION_NAME}; }
template<> PropertyDesc makePropertyDesc<VkPhysicalDevicePartitionedAccelerationStructurePropertiesNV>(void) { return PropertyDesc{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PARTITIONED_ACCELERATION_STRUCTURE_PROPERTIES_NV, VK_NV_PARTITIONED_ACCELERATION_STRUCTURE_EXTENSION_NAME}; }
template<> PropertyDesc makePropertyDesc<VkPhysicalDevicePerformanceQueryPropertiesKHR>(void) { return PropertyDesc{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_PROPERTIES_KHR, VK_KHR_PERFORMANCE_QUERY_EXTENSION_NAME}; }
template<> PropertyDesc makePropertyDesc<VkPhysicalDevicePipelineBinaryPropertiesKHR>(void) { return PropertyDesc{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_BINARY_PROPERTIES_KHR, VK_KHR_PIPELINE_BINARY_EXTENSION_NAME}; }
template<> PropertyDesc makePropertyDesc<VkPhysicalDevicePipelineRobustnessProperties>(void) { return PropertyDesc{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_PROPERTIES, VK_EXT_PIPELINE_ROBUSTNESS_EXTENSION_NAME}; }
template<> PropertyDesc makePropertyDesc<VkPhysicalDevicePointClippingProperties>(void) { return PropertyDesc{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES, VK_KHR_MAINTENANCE_2_EXTENSION_NAME}; }
template<> PropertyDesc makePropertyDesc<VkPhysicalDevicePortabilitySubsetPropertiesKHR>(void) { return PropertyDesc{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PORTABILITY_SUBSET_PROPERTIES_KHR, VK_KHR_PORTABILITY_SUBSET_EXTENSION_NAME}; }
template<> PropertyDesc makePropertyDesc<VkPhysicalDeviceProtectedMemoryProperties>(void) { return PropertyDesc{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES, DECL_CORE_PROPERTIES_NAME}; }
template<> PropertyDesc makePropertyDesc<VkPhysicalDeviceProvokingVertexPropertiesEXT>(void) { return PropertyDesc{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_PROPERTIES_EXT, VK_EXT_PROVOKING_VERTEX_EXTENSION_NAME}; }
template<> PropertyDesc makePropertyDesc<VkPhysicalDevicePushDescriptorProperties>(void) { return PropertyDesc{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES, VK_KHR_PUSH_DESCRIPTOR_EXTENSION_NAME}; }
template<> PropertyDesc makePropertyDesc<VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV>(void) { return PropertyDesc{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_INVOCATION_REORDER_PROPERTIES_NV, VK_NV_RAY_TRACING_INVOCATION_REORDER_EXTENSION_NAME}; }
template<> PropertyDesc makePropertyDesc<VkPhysicalDeviceRayTracingPipelinePropertiesKHR>(void) { return PropertyDesc{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_PROPERTIES_KHR, VK_KHR_RAY_TRACING_PIPELINE_EXTENSION_NAME}; }
template<> PropertyDesc makePropertyDesc<VkPhysicalDeviceRayTracingPropertiesNV>(void) { return PropertyDesc{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_NV, VK_NV_RAY_TRACING_EXTENSION_NAME}; }
template<> PropertyDesc makePropertyDesc<VkPhysicalDeviceRenderPassStripedPropertiesARM>(void) { return PropertyDesc{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RENDER_PASS_STRIPED_PROPERTIES_ARM, VK_ARM_RENDER_PASS_STRIPED_EXTENSION_NAME}; }
template<> PropertyDesc makePropertyDesc<VkPhysicalDeviceRobustness2PropertiesKHR>(void) { return PropertyDesc{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_PROPERTIES_KHR, VK_KHR_ROBUSTNESS_2_EXTENSION_NAME}; }
template<> PropertyDesc makePropertyDesc<VkPhysicalDeviceSampleLocationsPropertiesEXT>(void) { return PropertyDesc{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT, VK_EXT_SAMPLE_LOCATIONS_EXTENSION_NAME}; }
template<> PropertyDesc makePropertyDesc<VkPhysicalDeviceSamplerFilterMinmaxProperties>(void) { return PropertyDesc{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES, VK_EXT_SAMPLER_FILTER_MINMAX_EXTENSION_NAME}; }
template<> PropertyDesc makePropertyDesc<VkPhysicalDeviceSchedulingControlsPropertiesARM>(void) { return PropertyDesc{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCHEDULING_CONTROLS_PROPERTIES_ARM, VK_ARM_SCHEDULING_CONTROLS_EXTENSION_NAME}; }
template<> PropertyDesc makePropertyDesc<VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM>(void) { return PropertyDesc{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_BUILTINS_PROPERTIES_ARM, VK_ARM_SHADER_CORE_BUILTINS_EXTENSION_NAME}; }
template<> PropertyDesc makePropertyDesc<VkPhysicalDeviceShaderCoreProperties2AMD>(void) { return PropertyDesc{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_2_AMD, VK_AMD_SHADER_CORE_PROPERTIES_2_EXTENSION_NAME}; }
template<> PropertyDesc makePropertyDesc<VkPhysicalDeviceShaderCorePropertiesAMD>(void) { return PropertyDesc{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD, VK_AMD_SHADER_CORE_PROPERTIES_EXTENSION_NAME}; }
template<> PropertyDesc makePropertyDesc<VkPhysicalDeviceShaderCorePropertiesARM>(void) { return PropertyDesc{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_ARM, VK_ARM_SHADER_CORE_PROPERTIES_EXTENSION_NAME}; }
template<> PropertyDesc makePropertyDesc<VkPhysicalDeviceShaderEnqueuePropertiesAMDX>(void) { return PropertyDesc{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ENQUEUE_PROPERTIES_AMDX, VK_AMDX_SHADER_ENQUEUE_EXTENSION_NAME}; }
template<> PropertyDesc makePropertyDesc<VkPhysicalDeviceShaderIntegerDotProductProperties>(void) { return PropertyDesc{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_PROPERTIES, VK_KHR_SHADER_INTEGER_DOT_PRODUCT_EXTENSION_NAME}; }
template<> PropertyDesc makePropertyDesc<VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT>(void) { return PropertyDesc{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_MODULE_IDENTIFIER_PROPERTIES_EXT, VK_EXT_SHADER_MODULE_IDENTIFIER_EXTENSION_NAME}; }
template<> PropertyDesc makePropertyDesc<VkPhysicalDeviceShaderObjectPropertiesEXT>(void) { return PropertyDesc{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_OBJECT_PROPERTIES_EXT, VK_EXT_SHADER_OBJECT_EXTENSION_NAME}; }
template<> PropertyDesc makePropertyDesc<VkPhysicalDeviceShaderSMBuiltinsPropertiesNV>(void) { return PropertyDesc{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_PROPERTIES_NV, VK_NV_SHADER_SM_BUILTINS_EXTENSION_NAME}; }
template<> PropertyDesc makePropertyDesc<VkPhysicalDeviceShaderTileImagePropertiesEXT>(void) { return PropertyDesc{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TILE_IMAGE_PROPERTIES_EXT, VK_EXT_SHADER_TILE_IMAGE_EXTENSION_NAME}; }
template<> PropertyDesc makePropertyDesc<VkPhysicalDeviceShadingRateImagePropertiesNV>(void) { return PropertyDesc{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_PROPERTIES_NV, VK_NV_SHADING_RATE_IMAGE_EXTENSION_NAME}; }
template<> PropertyDesc makePropertyDesc<VkPhysicalDeviceSubgroupProperties>(void) { return PropertyDesc{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES, DECL_CORE_PROPERTIES_NAME}; }
template<> PropertyDesc makePropertyDesc<VkPhysicalDeviceSubgroupSizeControlProperties>(void) { return PropertyDesc{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES, VK_EXT_SUBGROUP_SIZE_CONTROL_EXTENSION_NAME}; }
template<> PropertyDesc makePropertyDesc<VkPhysicalDeviceSubpassShadingPropertiesHUAWEI>(void) { return PropertyDesc{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_SHADING_PROPERTIES_HUAWEI, VK_HUAWEI_SUBPASS_SHADING_EXTENSION_NAME}; }
template<> PropertyDesc makePropertyDesc<VkPhysicalDeviceTensorPropertiesARM>(void) { return PropertyDesc{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TENSOR_PROPERTIES_ARM, VK_ARM_TENSORS_EXTENSION_NAME}; }
template<> PropertyDesc makePropertyDesc<VkPhysicalDeviceTexelBufferAlignmentProperties>(void) { return PropertyDesc{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES, VK_EXT_TEXEL_BUFFER_ALIGNMENT_EXTENSION_NAME}; }
template<> PropertyDesc makePropertyDesc<VkPhysicalDeviceTileMemoryHeapPropertiesQCOM>(void) { return PropertyDesc{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TILE_MEMORY_HEAP_PROPERTIES_QCOM, VK_QCOM_TILE_MEMORY_HEAP_EXTENSION_NAME}; }
template<> PropertyDesc makePropertyDesc<VkPhysicalDeviceTileShadingPropertiesQCOM>(void) { return PropertyDesc{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TILE_SHADING_PROPERTIES_QCOM, VK_QCOM_TILE_SHADING_EXTENSION_NAME}; }
template<> PropertyDesc makePropertyDesc<VkPhysicalDeviceTimelineSemaphoreProperties>(void) { return PropertyDesc{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES, VK_KHR_TIMELINE_SEMAPHORE_EXTENSION_NAME}; }
template<> PropertyDesc makePropertyDesc<VkPhysicalDeviceTransformFeedbackPropertiesEXT>(void) { return PropertyDesc{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_PROPERTIES_EXT, VK_EXT_TRANSFORM_FEEDBACK_EXTENSION_NAME}; }
template<> PropertyDesc makePropertyDesc<VkPhysicalDeviceVertexAttributeDivisorProperties>(void) { return PropertyDesc{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES, VK_KHR_VERTEX_ATTRIBUTE_DIVISOR_EXTENSION_NAME}; }
template<> PropertyDesc makePropertyDesc<VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT>(void) { return PropertyDesc{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT, VK_EXT_VERTEX_ATTRIBUTE_DIVISOR_EXTENSION_NAME}; }

static const PropertyStructCreationData propertyStructCreationArray[]
{
	{ createPropertyStructWrapper<VkPhysicalDeviceAccelerationStructurePropertiesKHR>, VK_KHR_ACCELERATION_STRUCTURE_EXTENSION_NAME },
	{ createPropertyStructWrapper<VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT>, VK_EXT_BLEND_OPERATION_ADVANCED_EXTENSION_NAME },
	{ createPropertyStructWrapper<VkPhysicalDeviceClusterAccelerationStructurePropertiesNV>, VK_NV_CLUSTER_ACCELERATION_STRUCTURE_EXTENSION_NAME },
	{ createPropertyStructWrapper<VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI>, VK_HUAWEI_CLUSTER_CULLING_SHADER_EXTENSION_NAME },
	{ createPropertyStructWrapper<VkPhysicalDeviceComputeShaderDerivativesPropertiesKHR>, VK_KHR_COMPUTE_SHADER_DERIVATIVES_EXTENSION_NAME },
	{ createPropertyStructWrapper<VkPhysicalDeviceConservativeRasterizationPropertiesEXT>, VK_EXT_CONSERVATIVE_RASTERIZATION_EXTENSION_NAME },
	{ createPropertyStructWrapper<VkPhysicalDeviceCooperativeMatrix2PropertiesNV>, VK_NV_COOPERATIVE_MATRIX_2_EXTENSION_NAME },
	{ createPropertyStructWrapper<VkPhysicalDeviceCooperativeMatrixPropertiesKHR>, VK_KHR_COOPERATIVE_MATRIX_EXTENSION_NAME },
	{ createPropertyStructWrapper<VkPhysicalDeviceCooperativeMatrixPropertiesNV>, VK_NV_COOPERATIVE_MATRIX_EXTENSION_NAME },
	{ createPropertyStructWrapper<VkPhysicalDeviceCooperativeVectorPropertiesNV>, VK_NV_COOPERATIVE_VECTOR_EXTENSION_NAME },
	{ createPropertyStructWrapper<VkPhysicalDeviceCopyMemoryIndirectPropertiesNV>, VK_NV_COPY_MEMORY_INDIRECT_EXTENSION_NAME },
	{ createPropertyStructWrapper<VkPhysicalDeviceCudaKernelLaunchPropertiesNV>, VK_NV_CUDA_KERNEL_LAUNCH_EXTENSION_NAME },
	{ createPropertyStructWrapper<VkPhysicalDeviceCustomBorderColorPropertiesEXT>, VK_EXT_CUSTOM_BORDER_COLOR_EXTENSION_NAME },
	{ createPropertyStructWrapper<VkPhysicalDeviceDepthStencilResolveProperties>, VK_KHR_DEPTH_STENCIL_RESOLVE_EXTENSION_NAME },
	{ createPropertyStructWrapper<VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT>, VK_EXT_DESCRIPTOR_BUFFER_EXTENSION_NAME },
	{ createPropertyStructWrapper<VkPhysicalDeviceDescriptorBufferPropertiesEXT>, VK_EXT_DESCRIPTOR_BUFFER_EXTENSION_NAME },
	{ createPropertyStructWrapper<VkPhysicalDeviceDescriptorBufferTensorPropertiesARM>, VK_ARM_TENSORS_EXTENSION_NAME },
	{ createPropertyStructWrapper<VkPhysicalDeviceDescriptorIndexingProperties>, VK_EXT_DESCRIPTOR_INDEXING_EXTENSION_NAME },
	{ createPropertyStructWrapper<VkPhysicalDeviceDeviceGeneratedCommandsPropertiesEXT>, VK_EXT_DEVICE_GENERATED_COMMANDS_EXTENSION_NAME },
	{ createPropertyStructWrapper<VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV>, VK_NV_DEVICE_GENERATED_COMMANDS_EXTENSION_NAME },
	{ createPropertyStructWrapper<VkPhysicalDeviceDiscardRectanglePropertiesEXT>, VK_EXT_DISCARD_RECTANGLES_EXTENSION_NAME },
	{ createPropertyStructWrapper<VkPhysicalDeviceDisplacementMicromapPropertiesNV>, VK_NV_DISPLACEMENT_MICROMAP_EXTENSION_NAME },
	{ createPropertyStructWrapper<VkPhysicalDeviceDriverProperties>, VK_KHR_DRIVER_PROPERTIES_EXTENSION_NAME },
	{ createPropertyStructWrapper<VkPhysicalDeviceDrmPropertiesEXT>, VK_EXT_PHYSICAL_DEVICE_DRM_EXTENSION_NAME },
	{ createPropertyStructWrapper<VkPhysicalDeviceExtendedDynamicState3PropertiesEXT>, VK_EXT_EXTENDED_DYNAMIC_STATE_3_EXTENSION_NAME },
	{ createPropertyStructWrapper<VkPhysicalDeviceExtendedSparseAddressSpacePropertiesNV>, VK_NV_EXTENDED_SPARSE_ADDRESS_SPACE_EXTENSION_NAME },
	{ createPropertyStructWrapper<VkPhysicalDeviceExternalComputeQueuePropertiesNV>, VK_NV_EXTERNAL_COMPUTE_QUEUE_EXTENSION_NAME },
	{ createPropertyStructWrapper<VkPhysicalDeviceExternalFormatResolvePropertiesANDROID>, VK_ANDROID_EXTERNAL_FORMAT_RESOLVE_EXTENSION_NAME },
	{ createPropertyStructWrapper<VkPhysicalDeviceExternalMemoryHostPropertiesEXT>, VK_EXT_EXTERNAL_MEMORY_HOST_EXTENSION_NAME },
	{ createPropertyStructWrapper<VkPhysicalDeviceFloatControlsProperties>, VK_KHR_SHADER_FLOAT_CONTROLS_EXTENSION_NAME },
	{ createPropertyStructWrapper<VkPhysicalDeviceFragmentDensityMap2PropertiesEXT>, VK_EXT_FRAGMENT_DENSITY_MAP_2_EXTENSION_NAME },
	{ createPropertyStructWrapper<VkPhysicalDeviceFragmentDensityMapLayeredPropertiesVALVE>, VK_VALVE_FRAGMENT_DENSITY_MAP_LAYERED_EXTENSION_NAME },
	{ createPropertyStructWrapper<VkPhysicalDeviceFragmentDensityMapOffsetPropertiesEXT>, VK_EXT_FRAGMENT_DENSITY_MAP_OFFSET_EXTENSION_NAME },
	{ createPropertyStructWrapper<VkPhysicalDeviceFragmentDensityMapPropertiesEXT>, VK_EXT_FRAGMENT_DENSITY_MAP_EXTENSION_NAME },
	{ createPropertyStructWrapper<VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR>, VK_KHR_FRAGMENT_SHADER_BARYCENTRIC_EXTENSION_NAME },
	{ createPropertyStructWrapper<VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV>, VK_NV_FRAGMENT_SHADING_RATE_ENUMS_EXTENSION_NAME },
	{ createPropertyStructWrapper<VkPhysicalDeviceFragmentShadingRatePropertiesKHR>, VK_KHR_FRAGMENT_SHADING_RATE_EXTENSION_NAME },
	{ createPropertyStructWrapper<VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT>, VK_EXT_GRAPHICS_PIPELINE_LIBRARY_EXTENSION_NAME },
	{ createPropertyStructWrapper<VkPhysicalDeviceHostImageCopyProperties>, VK_EXT_HOST_IMAGE_COPY_EXTENSION_NAME },
	{ createPropertyStructWrapper<VkPhysicalDeviceIDProperties>, VK_KHR_EXTERNAL_MEMORY_CAPABILITIES_EXTENSION_NAME },
	{ createPropertyStructWrapper<VkPhysicalDeviceImageAlignmentControlPropertiesMESA>, VK_MESA_IMAGE_ALIGNMENT_CONTROL_EXTENSION_NAME },
	{ createPropertyStructWrapper<VkPhysicalDeviceImageProcessing2PropertiesQCOM>, VK_QCOM_IMAGE_PROCESSING_2_EXTENSION_NAME },
	{ createPropertyStructWrapper<VkPhysicalDeviceImageProcessingPropertiesQCOM>, VK_QCOM_IMAGE_PROCESSING_EXTENSION_NAME },
	{ createPropertyStructWrapper<VkPhysicalDeviceInlineUniformBlockProperties>, VK_EXT_INLINE_UNIFORM_BLOCK_EXTENSION_NAME },
	{ createPropertyStructWrapper<VkPhysicalDeviceLayeredApiPropertiesListKHR>, VK_KHR_MAINTENANCE_7_EXTENSION_NAME },
	{ createPropertyStructWrapper<VkPhysicalDeviceLayeredDriverPropertiesMSFT>, VK_MSFT_LAYERED_DRIVER_EXTENSION_NAME },
	{ createPropertyStructWrapper<VkPhysicalDeviceLegacyVertexAttributesPropertiesEXT>, VK_EXT_LEGACY_VERTEX_ATTRIBUTES_EXTENSION_NAME },
	{ createPropertyStructWrapper<VkPhysicalDeviceLineRasterizationProperties>, VK_KHR_LINE_RASTERIZATION_EXTENSION_NAME },
	{ createPropertyStructWrapper<VkPhysicalDeviceMaintenance3Properties>, VK_KHR_MAINTENANCE_3_EXTENSION_NAME },
	{ createPropertyStructWrapper<VkPhysicalDeviceMaintenance4Properties>, VK_KHR_MAINTENANCE_4_EXTENSION_NAME },
	{ createPropertyStructWrapper<VkPhysicalDeviceMaintenance5Properties>, VK_KHR_MAINTENANCE_5_EXTENSION_NAME },
	{ createPropertyStructWrapper<VkPhysicalDeviceMaintenance6Properties>, VK_KHR_MAINTENANCE_6_EXTENSION_NAME },
	{ createPropertyStructWrapper<VkPhysicalDeviceMaintenance7PropertiesKHR>, VK_KHR_MAINTENANCE_7_EXTENSION_NAME },
	{ createPropertyStructWrapper<VkPhysicalDeviceMaintenance9PropertiesKHR>, VK_KHR_MAINTENANCE_9_EXTENSION_NAME },
	{ createPropertyStructWrapper<VkPhysicalDeviceMapMemoryPlacedPropertiesEXT>, VK_EXT_MAP_MEMORY_PLACED_EXTENSION_NAME },
	{ createPropertyStructWrapper<VkPhysicalDeviceMemoryDecompressionPropertiesNV>, VK_NV_MEMORY_DECOMPRESSION_EXTENSION_NAME },
	{ createPropertyStructWrapper<VkPhysicalDeviceMeshShaderPropertiesEXT>, VK_EXT_MESH_SHADER_EXTENSION_NAME },
	{ createPropertyStructWrapper<VkPhysicalDeviceMeshShaderPropertiesNV>, VK_NV_MESH_SHADER_EXTENSION_NAME },
	{ createPropertyStructWrapper<VkPhysicalDeviceMultiDrawPropertiesEXT>, VK_EXT_MULTI_DRAW_EXTENSION_NAME },
	{ createPropertyStructWrapper<VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX>, VK_NVX_MULTIVIEW_PER_VIEW_ATTRIBUTES_EXTENSION_NAME },
	{ createPropertyStructWrapper<VkPhysicalDeviceMultiviewProperties>, VK_KHR_MULTIVIEW_EXTENSION_NAME },
	{ createPropertyStructWrapper<VkPhysicalDeviceNestedCommandBufferPropertiesEXT>, VK_EXT_NESTED_COMMAND_BUFFER_EXTENSION_NAME },
	{ createPropertyStructWrapper<VkPhysicalDeviceOpacityMicromapPropertiesEXT>, VK_EXT_OPACITY_MICROMAP_EXTENSION_NAME },
	{ createPropertyStructWrapper<VkPhysicalDeviceOpticalFlowPropertiesNV>, VK_NV_OPTICAL_FLOW_EXTENSION_NAME },
	{ createPropertyStructWrapper<VkPhysicalDevicePCIBusInfoPropertiesEXT>, VK_EXT_PCI_BUS_INFO_EXTENSION_NAME },
	{ createPropertyStructWrapper<VkPhysicalDevicePartitionedAccelerationStructurePropertiesNV>, VK_NV_PARTITIONED_ACCELERATION_STRUCTURE_EXTENSION_NAME },
	{ createPropertyStructWrapper<VkPhysicalDevicePerformanceQueryPropertiesKHR>, VK_KHR_PERFORMANCE_QUERY_EXTENSION_NAME },
	{ createPropertyStructWrapper<VkPhysicalDevicePipelineBinaryPropertiesKHR>, VK_KHR_PIPELINE_BINARY_EXTENSION_NAME },
	{ createPropertyStructWrapper<VkPhysicalDevicePipelineRobustnessProperties>, VK_EXT_PIPELINE_ROBUSTNESS_EXTENSION_NAME },
	{ createPropertyStructWrapper<VkPhysicalDevicePointClippingProperties>, VK_KHR_MAINTENANCE_2_EXTENSION_NAME },
	{ createPropertyStructWrapper<VkPhysicalDevicePortabilitySubsetPropertiesKHR>, VK_KHR_PORTABILITY_SUBSET_EXTENSION_NAME },
	{ createPropertyStructWrapper<VkPhysicalDeviceProtectedMemoryProperties>, DECL_CORE_PROPERTIES_NAME },
	{ createPropertyStructWrapper<VkPhysicalDeviceProvokingVertexPropertiesEXT>, VK_EXT_PROVOKING_VERTEX_EXTENSION_NAME },
	{ createPropertyStructWrapper<VkPhysicalDevicePushDescriptorProperties>, VK_KHR_PUSH_DESCRIPTOR_EXTENSION_NAME },
	{ createPropertyStructWrapper<VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV>, VK_NV_RAY_TRACING_INVOCATION_REORDER_EXTENSION_NAME },
	{ createPropertyStructWrapper<VkPhysicalDeviceRayTracingPipelinePropertiesKHR>, VK_KHR_RAY_TRACING_PIPELINE_EXTENSION_NAME },
	{ createPropertyStructWrapper<VkPhysicalDeviceRayTracingPropertiesNV>, VK_NV_RAY_TRACING_EXTENSION_NAME },
	{ createPropertyStructWrapper<VkPhysicalDeviceRenderPassStripedPropertiesARM>, VK_ARM_RENDER_PASS_STRIPED_EXTENSION_NAME },
	{ createPropertyStructWrapper<VkPhysicalDeviceRobustness2PropertiesKHR>, VK_KHR_ROBUSTNESS_2_EXTENSION_NAME },
	{ createPropertyStructWrapper<VkPhysicalDeviceSampleLocationsPropertiesEXT>, VK_EXT_SAMPLE_LOCATIONS_EXTENSION_NAME },
	{ createPropertyStructWrapper<VkPhysicalDeviceSamplerFilterMinmaxProperties>, VK_EXT_SAMPLER_FILTER_MINMAX_EXTENSION_NAME },
	{ createPropertyStructWrapper<VkPhysicalDeviceSchedulingControlsPropertiesARM>, VK_ARM_SCHEDULING_CONTROLS_EXTENSION_NAME },
	{ createPropertyStructWrapper<VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM>, VK_ARM_SHADER_CORE_BUILTINS_EXTENSION_NAME },
	{ createPropertyStructWrapper<VkPhysicalDeviceShaderCoreProperties2AMD>, VK_AMD_SHADER_CORE_PROPERTIES_2_EXTENSION_NAME },
	{ createPropertyStructWrapper<VkPhysicalDeviceShaderCorePropertiesAMD>, VK_AMD_SHADER_CORE_PROPERTIES_EXTENSION_NAME },
	{ createPropertyStructWrapper<VkPhysicalDeviceShaderCorePropertiesARM>, VK_ARM_SHADER_CORE_PROPERTIES_EXTENSION_NAME },
	{ createPropertyStructWrapper<VkPhysicalDeviceShaderEnqueuePropertiesAMDX>, VK_AMDX_SHADER_ENQUEUE_EXTENSION_NAME },
	{ createPropertyStructWrapper<VkPhysicalDeviceShaderIntegerDotProductProperties>, VK_KHR_SHADER_INTEGER_DOT_PRODUCT_EXTENSION_NAME },
	{ createPropertyStructWrapper<VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT>, VK_EXT_SHADER_MODULE_IDENTIFIER_EXTENSION_NAME },
	{ createPropertyStructWrapper<VkPhysicalDeviceShaderObjectPropertiesEXT>, VK_EXT_SHADER_OBJECT_EXTENSION_NAME },
	{ createPropertyStructWrapper<VkPhysicalDeviceShaderSMBuiltinsPropertiesNV>, VK_NV_SHADER_SM_BUILTINS_EXTENSION_NAME },
	{ createPropertyStructWrapper<VkPhysicalDeviceShaderTileImagePropertiesEXT>, VK_EXT_SHADER_TILE_IMAGE_EXTENSION_NAME },
	{ createPropertyStructWrapper<VkPhysicalDeviceShadingRateImagePropertiesNV>, VK_NV_SHADING_RATE_IMAGE_EXTENSION_NAME },
	{ createPropertyStructWrapper<VkPhysicalDeviceSubgroupProperties>, DECL_CORE_PROPERTIES_NAME },
	{ createPropertyStructWrapper<VkPhysicalDeviceSubgroupSizeControlProperties>, VK_EXT_SUBGROUP_SIZE_CONTROL_EXTENSION_NAME },
	{ createPropertyStructWrapper<VkPhysicalDeviceSubpassShadingPropertiesHUAWEI>, VK_HUAWEI_SUBPASS_SHADING_EXTENSION_NAME },
	{ createPropertyStructWrapper<VkPhysicalDeviceTensorPropertiesARM>, VK_ARM_TENSORS_EXTENSION_NAME },
	{ createPropertyStructWrapper<VkPhysicalDeviceTexelBufferAlignmentProperties>, VK_EXT_TEXEL_BUFFER_ALIGNMENT_EXTENSION_NAME },
	{ createPropertyStructWrapper<VkPhysicalDeviceTileMemoryHeapPropertiesQCOM>, VK_QCOM_TILE_MEMORY_HEAP_EXTENSION_NAME },
	{ createPropertyStructWrapper<VkPhysicalDeviceTileShadingPropertiesQCOM>, VK_QCOM_TILE_SHADING_EXTENSION_NAME },
	{ createPropertyStructWrapper<VkPhysicalDeviceTimelineSemaphoreProperties>, VK_KHR_TIMELINE_SEMAPHORE_EXTENSION_NAME },
	{ createPropertyStructWrapper<VkPhysicalDeviceTransformFeedbackPropertiesEXT>, VK_EXT_TRANSFORM_FEEDBACK_EXTENSION_NAME },
	{ createPropertyStructWrapper<VkPhysicalDeviceVertexAttributeDivisorProperties>, VK_KHR_VERTEX_ATTRIBUTE_DIVISOR_EXTENSION_NAME },
	{ createPropertyStructWrapper<VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT>, VK_EXT_VERTEX_ATTRIBUTE_DIVISOR_EXTENSION_NAME },
};

const std::string getPreviousPropertyExtName (const std::string &name)
{
	const std::map<std::string, std::string> previousExtensionsMap {
		{ "VK_EXT_fragment_density_map_offset", "VK_QCOM_fragment_density_map_offset" },
		{ "VK_KHR_external_memory_capabilities", "VK_KHR_external_semaphore_capabilities" },
		{ "VK_KHR_line_rasterization", "VK_EXT_line_rasterization" },
		{ "VK_KHR_robustness2", "VK_EXT_robustness2" },

	};

	auto it = previousExtensionsMap.find(name);
	if(it == previousExtensionsMap.end())
		return {};
	return it->second;
}

static const std::map<VkStructureType, uint32_t> sTypeBlobMap
{
	// VkPhysicalDeviceVulkan11Properties
	{ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES,										VK_API_VERSION_1_1 },
	{ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES,							VK_API_VERSION_1_1 },
	{ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES,								VK_API_VERSION_1_1 },
	{ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES,							VK_API_VERSION_1_1 },
	{ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES,						VK_API_VERSION_1_1 },
	{ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES,								VK_API_VERSION_1_1 },
	// VkPhysicalDeviceVulkan12Properties
	{ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES,					VK_API_VERSION_1_2 },
	{ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES,						VK_API_VERSION_1_2 },
	{ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES,									VK_API_VERSION_1_2 },
	{ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES,							VK_API_VERSION_1_2 },
	{ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES,					VK_API_VERSION_1_2 },
	{ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES,						VK_API_VERSION_1_2 },
	// VkPhysicalDeviceVulkan13Properties
	{ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES,					VK_API_VERSION_1_3 },
	{ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_PROPERTIES,							VK_API_VERSION_1_3 },
	{ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_PROPERTIES,				VK_API_VERSION_1_3 },
	{ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES,					VK_API_VERSION_1_3 },
	{ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES,					VK_API_VERSION_1_3 },
	// VkPhysicalDeviceVulkan14Properties
	{ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_IMAGE_COPY_PROPERTIES,							VK_API_VERSION_1_4 },
	{ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES,						VK_API_VERSION_1_4 },
	{ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_5_PROPERTIES,							VK_API_VERSION_1_4 },
	{ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_6_PROPERTIES,							VK_API_VERSION_1_4 },
	{ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_PROPERTIES,						VK_API_VERSION_1_4 },
	{ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES,							VK_API_VERSION_1_4 },
	{ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES,				VK_API_VERSION_1_4 },
};


uint32_t getBlobPropertiesVersion (VkStructureType sType)
{
	auto it = sTypeBlobMap.find(sType);
	if(it == sTypeBlobMap.end())
		return 0;
	return it->second;
}

std::set<VkStructureType> getVersionBlobPropertyList (uint32_t version)
{
	std::set<VkStructureType> features;
	for (const std::pair<const VkStructureType, uint32_t> &item : sTypeBlobMap)
	{
		if (item.second == version)
			features.insert(item.first);
	}
	return features;
}

} // vk

