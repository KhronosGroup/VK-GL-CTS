/* WARNING: This is auto-generated file. Do not modify, since changes will
 * be lost! Modify the generating script instead.
 * This file was generated by /scripts/gen_framework.py
 */

m_vk.acquireFullScreenExclusiveModeEXT = (AcquireFullScreenExclusiveModeEXTFunc) GET_PROC_ADDR("vkAcquireFullScreenExclusiveModeEXT");
m_vk.acquireImageOHOS = (AcquireImageOHOSFunc) GET_PROC_ADDR("vkAcquireImageOHOS");
m_vk.acquireNextImage2KHR = (AcquireNextImage2KHRFunc) GET_PROC_ADDR("vkAcquireNextImage2KHR");
m_vk.acquireNextImageKHR = (AcquireNextImageKHRFunc) GET_PROC_ADDR("vkAcquireNextImageKHR");
m_vk.acquirePerformanceConfigurationINTEL = (AcquirePerformanceConfigurationINTELFunc) GET_PROC_ADDR("vkAcquirePerformanceConfigurationINTEL");
m_vk.acquireProfilingLockKHR = (AcquireProfilingLockKHRFunc) GET_PROC_ADDR("vkAcquireProfilingLockKHR");
m_vk.allocateCommandBuffers = (AllocateCommandBuffersFunc) GET_PROC_ADDR("vkAllocateCommandBuffers");
m_vk.allocateDescriptorSets = (AllocateDescriptorSetsFunc) GET_PROC_ADDR("vkAllocateDescriptorSets");
m_vk.allocateMemory = (AllocateMemoryFunc) GET_PROC_ADDR("vkAllocateMemory");
m_vk.antiLagUpdateAMD = (AntiLagUpdateAMDFunc) GET_PROC_ADDR("vkAntiLagUpdateAMD");
m_vk.beginCommandBuffer = (BeginCommandBufferFunc) GET_PROC_ADDR("vkBeginCommandBuffer");
m_vk.bindAccelerationStructureMemoryNV = (BindAccelerationStructureMemoryNVFunc) GET_PROC_ADDR("vkBindAccelerationStructureMemoryNV");
m_vk.bindBufferMemory = (BindBufferMemoryFunc) GET_PROC_ADDR("vkBindBufferMemory");
if (usedApiVersion >= VK_MAKE_API_VERSION(0, 1, 1, 0))
    m_vk.bindBufferMemory2 = (BindBufferMemory2Func) GET_PROC_ADDR("vkBindBufferMemory2");
if (!m_vk.bindBufferMemory2)
    m_vk.bindBufferMemory2 = (BindBufferMemory2Func) GET_PROC_ADDR("vkBindBufferMemory2KHR");
m_vk.bindDataGraphPipelineSessionMemoryARM = (BindDataGraphPipelineSessionMemoryARMFunc) GET_PROC_ADDR("vkBindDataGraphPipelineSessionMemoryARM");
m_vk.bindImageMemory = (BindImageMemoryFunc) GET_PROC_ADDR("vkBindImageMemory");
if (usedApiVersion >= VK_MAKE_API_VERSION(0, 1, 1, 0))
    m_vk.bindImageMemory2 = (BindImageMemory2Func) GET_PROC_ADDR("vkBindImageMemory2");
if (!m_vk.bindImageMemory2)
    m_vk.bindImageMemory2 = (BindImageMemory2Func) GET_PROC_ADDR("vkBindImageMemory2KHR");
m_vk.bindOpticalFlowSessionImageNV = (BindOpticalFlowSessionImageNVFunc) GET_PROC_ADDR("vkBindOpticalFlowSessionImageNV");
m_vk.bindTensorMemoryARM = (BindTensorMemoryARMFunc) GET_PROC_ADDR("vkBindTensorMemoryARM");
m_vk.bindVideoSessionMemoryKHR = (BindVideoSessionMemoryKHRFunc) GET_PROC_ADDR("vkBindVideoSessionMemoryKHR");
m_vk.buildAccelerationStructuresKHR = (BuildAccelerationStructuresKHRFunc) GET_PROC_ADDR("vkBuildAccelerationStructuresKHR");
m_vk.buildMicromapsEXT = (BuildMicromapsEXTFunc) GET_PROC_ADDR("vkBuildMicromapsEXT");
m_vk.cmdBeginConditionalRenderingEXT = (CmdBeginConditionalRenderingEXTFunc) GET_PROC_ADDR("vkCmdBeginConditionalRenderingEXT");
m_vk.cmdBeginDebugUtilsLabelEXT = (CmdBeginDebugUtilsLabelEXTFunc) GET_PROC_ADDR("vkCmdBeginDebugUtilsLabelEXT");
m_vk.cmdBeginPerTileExecutionQCOM = (CmdBeginPerTileExecutionQCOMFunc) GET_PROC_ADDR("vkCmdBeginPerTileExecutionQCOM");
m_vk.cmdBeginQuery = (CmdBeginQueryFunc) GET_PROC_ADDR("vkCmdBeginQuery");
m_vk.cmdBeginQueryIndexedEXT = (CmdBeginQueryIndexedEXTFunc) GET_PROC_ADDR("vkCmdBeginQueryIndexedEXT");
m_vk.cmdBeginRenderPass = (CmdBeginRenderPassFunc) GET_PROC_ADDR("vkCmdBeginRenderPass");
if (usedApiVersion >= VK_MAKE_API_VERSION(0, 1, 2, 0))
    m_vk.cmdBeginRenderPass2 = (CmdBeginRenderPass2Func) GET_PROC_ADDR("vkCmdBeginRenderPass2");
if (!m_vk.cmdBeginRenderPass2)
    m_vk.cmdBeginRenderPass2 = (CmdBeginRenderPass2Func) GET_PROC_ADDR("vkCmdBeginRenderPass2KHR");
if (usedApiVersion >= VK_MAKE_API_VERSION(0, 1, 3, 0))
    m_vk.cmdBeginRendering = (CmdBeginRenderingFunc) GET_PROC_ADDR("vkCmdBeginRendering");
if (!m_vk.cmdBeginRendering)
    m_vk.cmdBeginRendering = (CmdBeginRenderingFunc) GET_PROC_ADDR("vkCmdBeginRenderingKHR");
m_vk.cmdBeginTransformFeedbackEXT = (CmdBeginTransformFeedbackEXTFunc) GET_PROC_ADDR("vkCmdBeginTransformFeedbackEXT");
m_vk.cmdBeginVideoCodingKHR = (CmdBeginVideoCodingKHRFunc) GET_PROC_ADDR("vkCmdBeginVideoCodingKHR");
m_vk.cmdBindDescriptorBufferEmbeddedSamplers2EXT = (CmdBindDescriptorBufferEmbeddedSamplers2EXTFunc) GET_PROC_ADDR("vkCmdBindDescriptorBufferEmbeddedSamplers2EXT");
m_vk.cmdBindDescriptorBufferEmbeddedSamplersEXT = (CmdBindDescriptorBufferEmbeddedSamplersEXTFunc) GET_PROC_ADDR("vkCmdBindDescriptorBufferEmbeddedSamplersEXT");
m_vk.cmdBindDescriptorBuffersEXT = (CmdBindDescriptorBuffersEXTFunc) GET_PROC_ADDR("vkCmdBindDescriptorBuffersEXT");
m_vk.cmdBindDescriptorSets = (CmdBindDescriptorSetsFunc) GET_PROC_ADDR("vkCmdBindDescriptorSets");
if (usedApiVersion >= VK_MAKE_API_VERSION(0, 1, 4, 0))
    m_vk.cmdBindDescriptorSets2 = (CmdBindDescriptorSets2Func) GET_PROC_ADDR("vkCmdBindDescriptorSets2");
if (!m_vk.cmdBindDescriptorSets2)
    m_vk.cmdBindDescriptorSets2 = (CmdBindDescriptorSets2Func) GET_PROC_ADDR("vkCmdBindDescriptorSets2KHR");
m_vk.cmdBindIndexBuffer = (CmdBindIndexBufferFunc) GET_PROC_ADDR("vkCmdBindIndexBuffer");
if (usedApiVersion >= VK_MAKE_API_VERSION(0, 1, 4, 0))
    m_vk.cmdBindIndexBuffer2 = (CmdBindIndexBuffer2Func) GET_PROC_ADDR("vkCmdBindIndexBuffer2");
if (!m_vk.cmdBindIndexBuffer2)
    m_vk.cmdBindIndexBuffer2 = (CmdBindIndexBuffer2Func) GET_PROC_ADDR("vkCmdBindIndexBuffer2KHR");
m_vk.cmdBindInvocationMaskHUAWEI = (CmdBindInvocationMaskHUAWEIFunc) GET_PROC_ADDR("vkCmdBindInvocationMaskHUAWEI");
m_vk.cmdBindPipeline = (CmdBindPipelineFunc) GET_PROC_ADDR("vkCmdBindPipeline");
m_vk.cmdBindPipelineShaderGroupNV = (CmdBindPipelineShaderGroupNVFunc) GET_PROC_ADDR("vkCmdBindPipelineShaderGroupNV");
m_vk.cmdBindShadersEXT = (CmdBindShadersEXTFunc) GET_PROC_ADDR("vkCmdBindShadersEXT");
m_vk.cmdBindShadingRateImageNV = (CmdBindShadingRateImageNVFunc) GET_PROC_ADDR("vkCmdBindShadingRateImageNV");
m_vk.cmdBindTileMemoryQCOM = (CmdBindTileMemoryQCOMFunc) GET_PROC_ADDR("vkCmdBindTileMemoryQCOM");
m_vk.cmdBindTransformFeedbackBuffersEXT = (CmdBindTransformFeedbackBuffersEXTFunc) GET_PROC_ADDR("vkCmdBindTransformFeedbackBuffersEXT");
m_vk.cmdBindVertexBuffers = (CmdBindVertexBuffersFunc) GET_PROC_ADDR("vkCmdBindVertexBuffers");
if (usedApiVersion >= VK_MAKE_API_VERSION(0, 1, 3, 0))
    m_vk.cmdBindVertexBuffers2 = (CmdBindVertexBuffers2Func) GET_PROC_ADDR("vkCmdBindVertexBuffers2");
if (!m_vk.cmdBindVertexBuffers2)
    m_vk.cmdBindVertexBuffers2 = (CmdBindVertexBuffers2Func) GET_PROC_ADDR("vkCmdBindVertexBuffers2EXT");
m_vk.cmdBlitImage = (CmdBlitImageFunc) GET_PROC_ADDR("vkCmdBlitImage");
if (usedApiVersion >= VK_MAKE_API_VERSION(0, 1, 3, 0))
    m_vk.cmdBlitImage2 = (CmdBlitImage2Func) GET_PROC_ADDR("vkCmdBlitImage2");
if (!m_vk.cmdBlitImage2)
    m_vk.cmdBlitImage2 = (CmdBlitImage2Func) GET_PROC_ADDR("vkCmdBlitImage2KHR");
m_vk.cmdBuildAccelerationStructureNV = (CmdBuildAccelerationStructureNVFunc) GET_PROC_ADDR("vkCmdBuildAccelerationStructureNV");
m_vk.cmdBuildAccelerationStructuresIndirectKHR = (CmdBuildAccelerationStructuresIndirectKHRFunc) GET_PROC_ADDR("vkCmdBuildAccelerationStructuresIndirectKHR");
m_vk.cmdBuildAccelerationStructuresKHR = (CmdBuildAccelerationStructuresKHRFunc) GET_PROC_ADDR("vkCmdBuildAccelerationStructuresKHR");
m_vk.cmdBuildClusterAccelerationStructureIndirectNV = (CmdBuildClusterAccelerationStructureIndirectNVFunc) GET_PROC_ADDR("vkCmdBuildClusterAccelerationStructureIndirectNV");
m_vk.cmdBuildMicromapsEXT = (CmdBuildMicromapsEXTFunc) GET_PROC_ADDR("vkCmdBuildMicromapsEXT");
m_vk.cmdBuildPartitionedAccelerationStructuresNV = (CmdBuildPartitionedAccelerationStructuresNVFunc) GET_PROC_ADDR("vkCmdBuildPartitionedAccelerationStructuresNV");
m_vk.cmdClearAttachments = (CmdClearAttachmentsFunc) GET_PROC_ADDR("vkCmdClearAttachments");
m_vk.cmdClearColorImage = (CmdClearColorImageFunc) GET_PROC_ADDR("vkCmdClearColorImage");
m_vk.cmdClearDepthStencilImage = (CmdClearDepthStencilImageFunc) GET_PROC_ADDR("vkCmdClearDepthStencilImage");
m_vk.cmdControlVideoCodingKHR = (CmdControlVideoCodingKHRFunc) GET_PROC_ADDR("vkCmdControlVideoCodingKHR");
m_vk.cmdConvertCooperativeVectorMatrixNV = (CmdConvertCooperativeVectorMatrixNVFunc) GET_PROC_ADDR("vkCmdConvertCooperativeVectorMatrixNV");
m_vk.cmdCopyAccelerationStructureKHR = (CmdCopyAccelerationStructureKHRFunc) GET_PROC_ADDR("vkCmdCopyAccelerationStructureKHR");
m_vk.cmdCopyAccelerationStructureNV = (CmdCopyAccelerationStructureNVFunc) GET_PROC_ADDR("vkCmdCopyAccelerationStructureNV");
m_vk.cmdCopyAccelerationStructureToMemoryKHR = (CmdCopyAccelerationStructureToMemoryKHRFunc) GET_PROC_ADDR("vkCmdCopyAccelerationStructureToMemoryKHR");
m_vk.cmdCopyBuffer = (CmdCopyBufferFunc) GET_PROC_ADDR("vkCmdCopyBuffer");
if (usedApiVersion >= VK_MAKE_API_VERSION(0, 1, 3, 0))
    m_vk.cmdCopyBuffer2 = (CmdCopyBuffer2Func) GET_PROC_ADDR("vkCmdCopyBuffer2");
if (!m_vk.cmdCopyBuffer2)
    m_vk.cmdCopyBuffer2 = (CmdCopyBuffer2Func) GET_PROC_ADDR("vkCmdCopyBuffer2KHR");
m_vk.cmdCopyBufferToImage = (CmdCopyBufferToImageFunc) GET_PROC_ADDR("vkCmdCopyBufferToImage");
if (usedApiVersion >= VK_MAKE_API_VERSION(0, 1, 3, 0))
    m_vk.cmdCopyBufferToImage2 = (CmdCopyBufferToImage2Func) GET_PROC_ADDR("vkCmdCopyBufferToImage2");
if (!m_vk.cmdCopyBufferToImage2)
    m_vk.cmdCopyBufferToImage2 = (CmdCopyBufferToImage2Func) GET_PROC_ADDR("vkCmdCopyBufferToImage2KHR");
m_vk.cmdCopyImage = (CmdCopyImageFunc) GET_PROC_ADDR("vkCmdCopyImage");
if (usedApiVersion >= VK_MAKE_API_VERSION(0, 1, 3, 0))
    m_vk.cmdCopyImage2 = (CmdCopyImage2Func) GET_PROC_ADDR("vkCmdCopyImage2");
if (!m_vk.cmdCopyImage2)
    m_vk.cmdCopyImage2 = (CmdCopyImage2Func) GET_PROC_ADDR("vkCmdCopyImage2KHR");
m_vk.cmdCopyImageToBuffer = (CmdCopyImageToBufferFunc) GET_PROC_ADDR("vkCmdCopyImageToBuffer");
if (usedApiVersion >= VK_MAKE_API_VERSION(0, 1, 3, 0))
    m_vk.cmdCopyImageToBuffer2 = (CmdCopyImageToBuffer2Func) GET_PROC_ADDR("vkCmdCopyImageToBuffer2");
if (!m_vk.cmdCopyImageToBuffer2)
    m_vk.cmdCopyImageToBuffer2 = (CmdCopyImageToBuffer2Func) GET_PROC_ADDR("vkCmdCopyImageToBuffer2KHR");
m_vk.cmdCopyMemoryIndirectKHR = (CmdCopyMemoryIndirectKHRFunc) GET_PROC_ADDR("vkCmdCopyMemoryIndirectKHR");
m_vk.cmdCopyMemoryIndirectNV = (CmdCopyMemoryIndirectNVFunc) GET_PROC_ADDR("vkCmdCopyMemoryIndirectNV");
m_vk.cmdCopyMemoryToAccelerationStructureKHR = (CmdCopyMemoryToAccelerationStructureKHRFunc) GET_PROC_ADDR("vkCmdCopyMemoryToAccelerationStructureKHR");
m_vk.cmdCopyMemoryToImageIndirectKHR = (CmdCopyMemoryToImageIndirectKHRFunc) GET_PROC_ADDR("vkCmdCopyMemoryToImageIndirectKHR");
m_vk.cmdCopyMemoryToImageIndirectNV = (CmdCopyMemoryToImageIndirectNVFunc) GET_PROC_ADDR("vkCmdCopyMemoryToImageIndirectNV");
m_vk.cmdCopyMemoryToMicromapEXT = (CmdCopyMemoryToMicromapEXTFunc) GET_PROC_ADDR("vkCmdCopyMemoryToMicromapEXT");
m_vk.cmdCopyMicromapEXT = (CmdCopyMicromapEXTFunc) GET_PROC_ADDR("vkCmdCopyMicromapEXT");
m_vk.cmdCopyMicromapToMemoryEXT = (CmdCopyMicromapToMemoryEXTFunc) GET_PROC_ADDR("vkCmdCopyMicromapToMemoryEXT");
m_vk.cmdCopyQueryPoolResults = (CmdCopyQueryPoolResultsFunc) GET_PROC_ADDR("vkCmdCopyQueryPoolResults");
m_vk.cmdCopyTensorARM = (CmdCopyTensorARMFunc) GET_PROC_ADDR("vkCmdCopyTensorARM");
m_vk.cmdCuLaunchKernelNVX = (CmdCuLaunchKernelNVXFunc) GET_PROC_ADDR("vkCmdCuLaunchKernelNVX");
m_vk.cmdCudaLaunchKernelNV = (CmdCudaLaunchKernelNVFunc) GET_PROC_ADDR("vkCmdCudaLaunchKernelNV");
m_vk.cmdDebugMarkerBeginEXT = (CmdDebugMarkerBeginEXTFunc) GET_PROC_ADDR("vkCmdDebugMarkerBeginEXT");
m_vk.cmdDebugMarkerEndEXT = (CmdDebugMarkerEndEXTFunc) GET_PROC_ADDR("vkCmdDebugMarkerEndEXT");
m_vk.cmdDebugMarkerInsertEXT = (CmdDebugMarkerInsertEXTFunc) GET_PROC_ADDR("vkCmdDebugMarkerInsertEXT");
m_vk.cmdDecodeVideoKHR = (CmdDecodeVideoKHRFunc) GET_PROC_ADDR("vkCmdDecodeVideoKHR");
m_vk.cmdDecompressMemoryEXT = (CmdDecompressMemoryEXTFunc) GET_PROC_ADDR("vkCmdDecompressMemoryEXT");
m_vk.cmdDecompressMemoryIndirectCountEXT = (CmdDecompressMemoryIndirectCountEXTFunc) GET_PROC_ADDR("vkCmdDecompressMemoryIndirectCountEXT");
m_vk.cmdDecompressMemoryIndirectCountNV = (CmdDecompressMemoryIndirectCountNVFunc) GET_PROC_ADDR("vkCmdDecompressMemoryIndirectCountNV");
m_vk.cmdDecompressMemoryNV = (CmdDecompressMemoryNVFunc) GET_PROC_ADDR("vkCmdDecompressMemoryNV");
m_vk.cmdDispatch = (CmdDispatchFunc) GET_PROC_ADDR("vkCmdDispatch");
if (usedApiVersion >= VK_MAKE_API_VERSION(0, 1, 1, 0))
    m_vk.cmdDispatchBase = (CmdDispatchBaseFunc) GET_PROC_ADDR("vkCmdDispatchBase");
if (!m_vk.cmdDispatchBase)
    m_vk.cmdDispatchBase = (CmdDispatchBaseFunc) GET_PROC_ADDR("vkCmdDispatchBaseKHR");
m_vk.cmdDispatchDataGraphARM = (CmdDispatchDataGraphARMFunc) GET_PROC_ADDR("vkCmdDispatchDataGraphARM");
m_vk.cmdDispatchGraphAMDX = (CmdDispatchGraphAMDXFunc) GET_PROC_ADDR("vkCmdDispatchGraphAMDX");
m_vk.cmdDispatchGraphIndirectAMDX = (CmdDispatchGraphIndirectAMDXFunc) GET_PROC_ADDR("vkCmdDispatchGraphIndirectAMDX");
m_vk.cmdDispatchGraphIndirectCountAMDX = (CmdDispatchGraphIndirectCountAMDXFunc) GET_PROC_ADDR("vkCmdDispatchGraphIndirectCountAMDX");
m_vk.cmdDispatchIndirect = (CmdDispatchIndirectFunc) GET_PROC_ADDR("vkCmdDispatchIndirect");
m_vk.cmdDispatchTileQCOM = (CmdDispatchTileQCOMFunc) GET_PROC_ADDR("vkCmdDispatchTileQCOM");
m_vk.cmdDraw = (CmdDrawFunc) GET_PROC_ADDR("vkCmdDraw");
m_vk.cmdDrawClusterHUAWEI = (CmdDrawClusterHUAWEIFunc) GET_PROC_ADDR("vkCmdDrawClusterHUAWEI");
m_vk.cmdDrawClusterIndirectHUAWEI = (CmdDrawClusterIndirectHUAWEIFunc) GET_PROC_ADDR("vkCmdDrawClusterIndirectHUAWEI");
m_vk.cmdDrawIndexed = (CmdDrawIndexedFunc) GET_PROC_ADDR("vkCmdDrawIndexed");
m_vk.cmdDrawIndexedIndirect = (CmdDrawIndexedIndirectFunc) GET_PROC_ADDR("vkCmdDrawIndexedIndirect");
if (usedApiVersion >= VK_MAKE_API_VERSION(0, 1, 2, 0))
    m_vk.cmdDrawIndexedIndirectCount = (CmdDrawIndexedIndirectCountFunc) GET_PROC_ADDR("vkCmdDrawIndexedIndirectCount");
if (!m_vk.cmdDrawIndexedIndirectCount)
    m_vk.cmdDrawIndexedIndirectCount = (CmdDrawIndexedIndirectCountFunc) GET_PROC_ADDR("vkCmdDrawIndexedIndirectCountKHR");
if (!m_vk.cmdDrawIndexedIndirectCount)
    m_vk.cmdDrawIndexedIndirectCount = (CmdDrawIndexedIndirectCountFunc) GET_PROC_ADDR("vkCmdDrawIndexedIndirectCountAMD");
m_vk.cmdDrawIndirect = (CmdDrawIndirectFunc) GET_PROC_ADDR("vkCmdDrawIndirect");
m_vk.cmdDrawIndirectByteCountEXT = (CmdDrawIndirectByteCountEXTFunc) GET_PROC_ADDR("vkCmdDrawIndirectByteCountEXT");
if (usedApiVersion >= VK_MAKE_API_VERSION(0, 1, 2, 0))
    m_vk.cmdDrawIndirectCount = (CmdDrawIndirectCountFunc) GET_PROC_ADDR("vkCmdDrawIndirectCount");
if (!m_vk.cmdDrawIndirectCount)
    m_vk.cmdDrawIndirectCount = (CmdDrawIndirectCountFunc) GET_PROC_ADDR("vkCmdDrawIndirectCountKHR");
if (!m_vk.cmdDrawIndirectCount)
    m_vk.cmdDrawIndirectCount = (CmdDrawIndirectCountFunc) GET_PROC_ADDR("vkCmdDrawIndirectCountAMD");
m_vk.cmdDrawMeshTasksEXT = (CmdDrawMeshTasksEXTFunc) GET_PROC_ADDR("vkCmdDrawMeshTasksEXT");
m_vk.cmdDrawMeshTasksIndirectCountEXT = (CmdDrawMeshTasksIndirectCountEXTFunc) GET_PROC_ADDR("vkCmdDrawMeshTasksIndirectCountEXT");
m_vk.cmdDrawMeshTasksIndirectCountNV = (CmdDrawMeshTasksIndirectCountNVFunc) GET_PROC_ADDR("vkCmdDrawMeshTasksIndirectCountNV");
m_vk.cmdDrawMeshTasksIndirectEXT = (CmdDrawMeshTasksIndirectEXTFunc) GET_PROC_ADDR("vkCmdDrawMeshTasksIndirectEXT");
m_vk.cmdDrawMeshTasksIndirectNV = (CmdDrawMeshTasksIndirectNVFunc) GET_PROC_ADDR("vkCmdDrawMeshTasksIndirectNV");
m_vk.cmdDrawMeshTasksNV = (CmdDrawMeshTasksNVFunc) GET_PROC_ADDR("vkCmdDrawMeshTasksNV");
m_vk.cmdDrawMultiEXT = (CmdDrawMultiEXTFunc) GET_PROC_ADDR("vkCmdDrawMultiEXT");
m_vk.cmdDrawMultiIndexedEXT = (CmdDrawMultiIndexedEXTFunc) GET_PROC_ADDR("vkCmdDrawMultiIndexedEXT");
m_vk.cmdEncodeVideoKHR = (CmdEncodeVideoKHRFunc) GET_PROC_ADDR("vkCmdEncodeVideoKHR");
m_vk.cmdEndConditionalRenderingEXT = (CmdEndConditionalRenderingEXTFunc) GET_PROC_ADDR("vkCmdEndConditionalRenderingEXT");
m_vk.cmdEndDebugUtilsLabelEXT = (CmdEndDebugUtilsLabelEXTFunc) GET_PROC_ADDR("vkCmdEndDebugUtilsLabelEXT");
m_vk.cmdEndPerTileExecutionQCOM = (CmdEndPerTileExecutionQCOMFunc) GET_PROC_ADDR("vkCmdEndPerTileExecutionQCOM");
m_vk.cmdEndQuery = (CmdEndQueryFunc) GET_PROC_ADDR("vkCmdEndQuery");
m_vk.cmdEndQueryIndexedEXT = (CmdEndQueryIndexedEXTFunc) GET_PROC_ADDR("vkCmdEndQueryIndexedEXT");
m_vk.cmdEndRenderPass = (CmdEndRenderPassFunc) GET_PROC_ADDR("vkCmdEndRenderPass");
if (usedApiVersion >= VK_MAKE_API_VERSION(0, 1, 2, 0))
    m_vk.cmdEndRenderPass2 = (CmdEndRenderPass2Func) GET_PROC_ADDR("vkCmdEndRenderPass2");
if (!m_vk.cmdEndRenderPass2)
    m_vk.cmdEndRenderPass2 = (CmdEndRenderPass2Func) GET_PROC_ADDR("vkCmdEndRenderPass2KHR");
if (usedApiVersion >= VK_MAKE_API_VERSION(0, 1, 3, 0))
    m_vk.cmdEndRendering = (CmdEndRenderingFunc) GET_PROC_ADDR("vkCmdEndRendering");
if (!m_vk.cmdEndRendering)
    m_vk.cmdEndRendering = (CmdEndRenderingFunc) GET_PROC_ADDR("vkCmdEndRenderingKHR");
m_vk.cmdEndRendering2KHR = (CmdEndRendering2KHRFunc) GET_PROC_ADDR("vkCmdEndRendering2KHR");
if (!m_vk.cmdEndRendering2KHR)
    m_vk.cmdEndRendering2KHR = (CmdEndRendering2KHRFunc) GET_PROC_ADDR("vkCmdEndRendering2EXT");
m_vk.cmdEndTransformFeedbackEXT = (CmdEndTransformFeedbackEXTFunc) GET_PROC_ADDR("vkCmdEndTransformFeedbackEXT");
m_vk.cmdEndVideoCodingKHR = (CmdEndVideoCodingKHRFunc) GET_PROC_ADDR("vkCmdEndVideoCodingKHR");
m_vk.cmdExecuteCommands = (CmdExecuteCommandsFunc) GET_PROC_ADDR("vkCmdExecuteCommands");
m_vk.cmdExecuteGeneratedCommandsEXT = (CmdExecuteGeneratedCommandsEXTFunc) GET_PROC_ADDR("vkCmdExecuteGeneratedCommandsEXT");
m_vk.cmdExecuteGeneratedCommandsNV = (CmdExecuteGeneratedCommandsNVFunc) GET_PROC_ADDR("vkCmdExecuteGeneratedCommandsNV");
m_vk.cmdFillBuffer = (CmdFillBufferFunc) GET_PROC_ADDR("vkCmdFillBuffer");
m_vk.cmdInitializeGraphScratchMemoryAMDX = (CmdInitializeGraphScratchMemoryAMDXFunc) GET_PROC_ADDR("vkCmdInitializeGraphScratchMemoryAMDX");
m_vk.cmdInsertDebugUtilsLabelEXT = (CmdInsertDebugUtilsLabelEXTFunc) GET_PROC_ADDR("vkCmdInsertDebugUtilsLabelEXT");
m_vk.cmdNextSubpass = (CmdNextSubpassFunc) GET_PROC_ADDR("vkCmdNextSubpass");
if (usedApiVersion >= VK_MAKE_API_VERSION(0, 1, 2, 0))
    m_vk.cmdNextSubpass2 = (CmdNextSubpass2Func) GET_PROC_ADDR("vkCmdNextSubpass2");
if (!m_vk.cmdNextSubpass2)
    m_vk.cmdNextSubpass2 = (CmdNextSubpass2Func) GET_PROC_ADDR("vkCmdNextSubpass2KHR");
m_vk.cmdOpticalFlowExecuteNV = (CmdOpticalFlowExecuteNVFunc) GET_PROC_ADDR("vkCmdOpticalFlowExecuteNV");
m_vk.cmdPipelineBarrier = (CmdPipelineBarrierFunc) GET_PROC_ADDR("vkCmdPipelineBarrier");
if (usedApiVersion >= VK_MAKE_API_VERSION(0, 1, 3, 0))
    m_vk.cmdPipelineBarrier2 = (CmdPipelineBarrier2Func) GET_PROC_ADDR("vkCmdPipelineBarrier2");
if (!m_vk.cmdPipelineBarrier2)
    m_vk.cmdPipelineBarrier2 = (CmdPipelineBarrier2Func) GET_PROC_ADDR("vkCmdPipelineBarrier2KHR");
m_vk.cmdPreprocessGeneratedCommandsEXT = (CmdPreprocessGeneratedCommandsEXTFunc) GET_PROC_ADDR("vkCmdPreprocessGeneratedCommandsEXT");
m_vk.cmdPreprocessGeneratedCommandsNV = (CmdPreprocessGeneratedCommandsNVFunc) GET_PROC_ADDR("vkCmdPreprocessGeneratedCommandsNV");
m_vk.cmdPushConstants = (CmdPushConstantsFunc) GET_PROC_ADDR("vkCmdPushConstants");
if (usedApiVersion >= VK_MAKE_API_VERSION(0, 1, 4, 0))
    m_vk.cmdPushConstants2 = (CmdPushConstants2Func) GET_PROC_ADDR("vkCmdPushConstants2");
if (!m_vk.cmdPushConstants2)
    m_vk.cmdPushConstants2 = (CmdPushConstants2Func) GET_PROC_ADDR("vkCmdPushConstants2KHR");
if (usedApiVersion >= VK_MAKE_API_VERSION(0, 1, 4, 0))
    m_vk.cmdPushDescriptorSet = (CmdPushDescriptorSetFunc) GET_PROC_ADDR("vkCmdPushDescriptorSet");
if (!m_vk.cmdPushDescriptorSet)
    m_vk.cmdPushDescriptorSet = (CmdPushDescriptorSetFunc) GET_PROC_ADDR("vkCmdPushDescriptorSetKHR");
if (usedApiVersion >= VK_MAKE_API_VERSION(0, 1, 4, 0))
    m_vk.cmdPushDescriptorSet2 = (CmdPushDescriptorSet2Func) GET_PROC_ADDR("vkCmdPushDescriptorSet2");
if (!m_vk.cmdPushDescriptorSet2)
    m_vk.cmdPushDescriptorSet2 = (CmdPushDescriptorSet2Func) GET_PROC_ADDR("vkCmdPushDescriptorSet2KHR");
if (usedApiVersion >= VK_MAKE_API_VERSION(0, 1, 4, 0))
    m_vk.cmdPushDescriptorSetWithTemplate = (CmdPushDescriptorSetWithTemplateFunc) GET_PROC_ADDR("vkCmdPushDescriptorSetWithTemplate");
if (!m_vk.cmdPushDescriptorSetWithTemplate)
    m_vk.cmdPushDescriptorSetWithTemplate = (CmdPushDescriptorSetWithTemplateFunc) GET_PROC_ADDR("vkCmdPushDescriptorSetWithTemplateKHR");
if (usedApiVersion >= VK_MAKE_API_VERSION(0, 1, 4, 0))
    m_vk.cmdPushDescriptorSetWithTemplate2 = (CmdPushDescriptorSetWithTemplate2Func) GET_PROC_ADDR("vkCmdPushDescriptorSetWithTemplate2");
if (!m_vk.cmdPushDescriptorSetWithTemplate2)
    m_vk.cmdPushDescriptorSetWithTemplate2 = (CmdPushDescriptorSetWithTemplate2Func) GET_PROC_ADDR("vkCmdPushDescriptorSetWithTemplate2KHR");
m_vk.cmdResetEvent = (CmdResetEventFunc) GET_PROC_ADDR("vkCmdResetEvent");
if (usedApiVersion >= VK_MAKE_API_VERSION(0, 1, 3, 0))
    m_vk.cmdResetEvent2 = (CmdResetEvent2Func) GET_PROC_ADDR("vkCmdResetEvent2");
if (!m_vk.cmdResetEvent2)
    m_vk.cmdResetEvent2 = (CmdResetEvent2Func) GET_PROC_ADDR("vkCmdResetEvent2KHR");
m_vk.cmdResetQueryPool = (CmdResetQueryPoolFunc) GET_PROC_ADDR("vkCmdResetQueryPool");
m_vk.cmdResolveImage = (CmdResolveImageFunc) GET_PROC_ADDR("vkCmdResolveImage");
if (usedApiVersion >= VK_MAKE_API_VERSION(0, 1, 3, 0))
    m_vk.cmdResolveImage2 = (CmdResolveImage2Func) GET_PROC_ADDR("vkCmdResolveImage2");
if (!m_vk.cmdResolveImage2)
    m_vk.cmdResolveImage2 = (CmdResolveImage2Func) GET_PROC_ADDR("vkCmdResolveImage2KHR");
m_vk.cmdSetAlphaToCoverageEnableEXT = (CmdSetAlphaToCoverageEnableEXTFunc) GET_PROC_ADDR("vkCmdSetAlphaToCoverageEnableEXT");
m_vk.cmdSetAlphaToOneEnableEXT = (CmdSetAlphaToOneEnableEXTFunc) GET_PROC_ADDR("vkCmdSetAlphaToOneEnableEXT");
m_vk.cmdSetAttachmentFeedbackLoopEnableEXT = (CmdSetAttachmentFeedbackLoopEnableEXTFunc) GET_PROC_ADDR("vkCmdSetAttachmentFeedbackLoopEnableEXT");
m_vk.cmdSetBlendConstants = (CmdSetBlendConstantsFunc) GET_PROC_ADDR("vkCmdSetBlendConstants");
m_vk.cmdSetCheckpointNV = (CmdSetCheckpointNVFunc) GET_PROC_ADDR("vkCmdSetCheckpointNV");
m_vk.cmdSetCoarseSampleOrderNV = (CmdSetCoarseSampleOrderNVFunc) GET_PROC_ADDR("vkCmdSetCoarseSampleOrderNV");
m_vk.cmdSetColorBlendAdvancedEXT = (CmdSetColorBlendAdvancedEXTFunc) GET_PROC_ADDR("vkCmdSetColorBlendAdvancedEXT");
m_vk.cmdSetColorBlendEnableEXT = (CmdSetColorBlendEnableEXTFunc) GET_PROC_ADDR("vkCmdSetColorBlendEnableEXT");
m_vk.cmdSetColorBlendEquationEXT = (CmdSetColorBlendEquationEXTFunc) GET_PROC_ADDR("vkCmdSetColorBlendEquationEXT");
m_vk.cmdSetColorWriteEnableEXT = (CmdSetColorWriteEnableEXTFunc) GET_PROC_ADDR("vkCmdSetColorWriteEnableEXT");
m_vk.cmdSetColorWriteMaskEXT = (CmdSetColorWriteMaskEXTFunc) GET_PROC_ADDR("vkCmdSetColorWriteMaskEXT");
m_vk.cmdSetConservativeRasterizationModeEXT = (CmdSetConservativeRasterizationModeEXTFunc) GET_PROC_ADDR("vkCmdSetConservativeRasterizationModeEXT");
m_vk.cmdSetCoverageModulationModeNV = (CmdSetCoverageModulationModeNVFunc) GET_PROC_ADDR("vkCmdSetCoverageModulationModeNV");
m_vk.cmdSetCoverageModulationTableEnableNV = (CmdSetCoverageModulationTableEnableNVFunc) GET_PROC_ADDR("vkCmdSetCoverageModulationTableEnableNV");
m_vk.cmdSetCoverageModulationTableNV = (CmdSetCoverageModulationTableNVFunc) GET_PROC_ADDR("vkCmdSetCoverageModulationTableNV");
m_vk.cmdSetCoverageReductionModeNV = (CmdSetCoverageReductionModeNVFunc) GET_PROC_ADDR("vkCmdSetCoverageReductionModeNV");
m_vk.cmdSetCoverageToColorEnableNV = (CmdSetCoverageToColorEnableNVFunc) GET_PROC_ADDR("vkCmdSetCoverageToColorEnableNV");
m_vk.cmdSetCoverageToColorLocationNV = (CmdSetCoverageToColorLocationNVFunc) GET_PROC_ADDR("vkCmdSetCoverageToColorLocationNV");
if (usedApiVersion >= VK_MAKE_API_VERSION(0, 1, 3, 0))
    m_vk.cmdSetCullMode = (CmdSetCullModeFunc) GET_PROC_ADDR("vkCmdSetCullMode");
if (!m_vk.cmdSetCullMode)
    m_vk.cmdSetCullMode = (CmdSetCullModeFunc) GET_PROC_ADDR("vkCmdSetCullModeEXT");
m_vk.cmdSetDepthBias = (CmdSetDepthBiasFunc) GET_PROC_ADDR("vkCmdSetDepthBias");
m_vk.cmdSetDepthBias2EXT = (CmdSetDepthBias2EXTFunc) GET_PROC_ADDR("vkCmdSetDepthBias2EXT");
if (usedApiVersion >= VK_MAKE_API_VERSION(0, 1, 3, 0))
    m_vk.cmdSetDepthBiasEnable = (CmdSetDepthBiasEnableFunc) GET_PROC_ADDR("vkCmdSetDepthBiasEnable");
if (!m_vk.cmdSetDepthBiasEnable)
    m_vk.cmdSetDepthBiasEnable = (CmdSetDepthBiasEnableFunc) GET_PROC_ADDR("vkCmdSetDepthBiasEnableEXT");
m_vk.cmdSetDepthBounds = (CmdSetDepthBoundsFunc) GET_PROC_ADDR("vkCmdSetDepthBounds");
if (usedApiVersion >= VK_MAKE_API_VERSION(0, 1, 3, 0))
    m_vk.cmdSetDepthBoundsTestEnable = (CmdSetDepthBoundsTestEnableFunc) GET_PROC_ADDR("vkCmdSetDepthBoundsTestEnable");
if (!m_vk.cmdSetDepthBoundsTestEnable)
    m_vk.cmdSetDepthBoundsTestEnable = (CmdSetDepthBoundsTestEnableFunc) GET_PROC_ADDR("vkCmdSetDepthBoundsTestEnableEXT");
m_vk.cmdSetDepthClampEnableEXT = (CmdSetDepthClampEnableEXTFunc) GET_PROC_ADDR("vkCmdSetDepthClampEnableEXT");
m_vk.cmdSetDepthClampRangeEXT = (CmdSetDepthClampRangeEXTFunc) GET_PROC_ADDR("vkCmdSetDepthClampRangeEXT");
m_vk.cmdSetDepthClipEnableEXT = (CmdSetDepthClipEnableEXTFunc) GET_PROC_ADDR("vkCmdSetDepthClipEnableEXT");
m_vk.cmdSetDepthClipNegativeOneToOneEXT = (CmdSetDepthClipNegativeOneToOneEXTFunc) GET_PROC_ADDR("vkCmdSetDepthClipNegativeOneToOneEXT");
if (usedApiVersion >= VK_MAKE_API_VERSION(0, 1, 3, 0))
    m_vk.cmdSetDepthCompareOp = (CmdSetDepthCompareOpFunc) GET_PROC_ADDR("vkCmdSetDepthCompareOp");
if (!m_vk.cmdSetDepthCompareOp)
    m_vk.cmdSetDepthCompareOp = (CmdSetDepthCompareOpFunc) GET_PROC_ADDR("vkCmdSetDepthCompareOpEXT");
if (usedApiVersion >= VK_MAKE_API_VERSION(0, 1, 3, 0))
    m_vk.cmdSetDepthTestEnable = (CmdSetDepthTestEnableFunc) GET_PROC_ADDR("vkCmdSetDepthTestEnable");
if (!m_vk.cmdSetDepthTestEnable)
    m_vk.cmdSetDepthTestEnable = (CmdSetDepthTestEnableFunc) GET_PROC_ADDR("vkCmdSetDepthTestEnableEXT");
if (usedApiVersion >= VK_MAKE_API_VERSION(0, 1, 3, 0))
    m_vk.cmdSetDepthWriteEnable = (CmdSetDepthWriteEnableFunc) GET_PROC_ADDR("vkCmdSetDepthWriteEnable");
if (!m_vk.cmdSetDepthWriteEnable)
    m_vk.cmdSetDepthWriteEnable = (CmdSetDepthWriteEnableFunc) GET_PROC_ADDR("vkCmdSetDepthWriteEnableEXT");
m_vk.cmdSetDescriptorBufferOffsets2EXT = (CmdSetDescriptorBufferOffsets2EXTFunc) GET_PROC_ADDR("vkCmdSetDescriptorBufferOffsets2EXT");
m_vk.cmdSetDescriptorBufferOffsetsEXT = (CmdSetDescriptorBufferOffsetsEXTFunc) GET_PROC_ADDR("vkCmdSetDescriptorBufferOffsetsEXT");
if (usedApiVersion >= VK_MAKE_API_VERSION(0, 1, 1, 0))
    m_vk.cmdSetDeviceMask = (CmdSetDeviceMaskFunc) GET_PROC_ADDR("vkCmdSetDeviceMask");
if (!m_vk.cmdSetDeviceMask)
    m_vk.cmdSetDeviceMask = (CmdSetDeviceMaskFunc) GET_PROC_ADDR("vkCmdSetDeviceMaskKHR");
m_vk.cmdSetDiscardRectangleEXT = (CmdSetDiscardRectangleEXTFunc) GET_PROC_ADDR("vkCmdSetDiscardRectangleEXT");
m_vk.cmdSetDiscardRectangleEnableEXT = (CmdSetDiscardRectangleEnableEXTFunc) GET_PROC_ADDR("vkCmdSetDiscardRectangleEnableEXT");
m_vk.cmdSetDiscardRectangleModeEXT = (CmdSetDiscardRectangleModeEXTFunc) GET_PROC_ADDR("vkCmdSetDiscardRectangleModeEXT");
m_vk.cmdSetEvent = (CmdSetEventFunc) GET_PROC_ADDR("vkCmdSetEvent");
if (usedApiVersion >= VK_MAKE_API_VERSION(0, 1, 3, 0))
    m_vk.cmdSetEvent2 = (CmdSetEvent2Func) GET_PROC_ADDR("vkCmdSetEvent2");
if (!m_vk.cmdSetEvent2)
    m_vk.cmdSetEvent2 = (CmdSetEvent2Func) GET_PROC_ADDR("vkCmdSetEvent2KHR");
m_vk.cmdSetExclusiveScissorEnableNV = (CmdSetExclusiveScissorEnableNVFunc) GET_PROC_ADDR("vkCmdSetExclusiveScissorEnableNV");
m_vk.cmdSetExclusiveScissorNV = (CmdSetExclusiveScissorNVFunc) GET_PROC_ADDR("vkCmdSetExclusiveScissorNV");
m_vk.cmdSetExtraPrimitiveOverestimationSizeEXT = (CmdSetExtraPrimitiveOverestimationSizeEXTFunc) GET_PROC_ADDR("vkCmdSetExtraPrimitiveOverestimationSizeEXT");
m_vk.cmdSetFragmentShadingRateEnumNV = (CmdSetFragmentShadingRateEnumNVFunc) GET_PROC_ADDR("vkCmdSetFragmentShadingRateEnumNV");
m_vk.cmdSetFragmentShadingRateKHR = (CmdSetFragmentShadingRateKHRFunc) GET_PROC_ADDR("vkCmdSetFragmentShadingRateKHR");
if (usedApiVersion >= VK_MAKE_API_VERSION(0, 1, 3, 0))
    m_vk.cmdSetFrontFace = (CmdSetFrontFaceFunc) GET_PROC_ADDR("vkCmdSetFrontFace");
if (!m_vk.cmdSetFrontFace)
    m_vk.cmdSetFrontFace = (CmdSetFrontFaceFunc) GET_PROC_ADDR("vkCmdSetFrontFaceEXT");
m_vk.cmdSetLineRasterizationModeEXT = (CmdSetLineRasterizationModeEXTFunc) GET_PROC_ADDR("vkCmdSetLineRasterizationModeEXT");
if (usedApiVersion >= VK_MAKE_API_VERSION(0, 1, 4, 0))
    m_vk.cmdSetLineStipple = (CmdSetLineStippleFunc) GET_PROC_ADDR("vkCmdSetLineStipple");
if (!m_vk.cmdSetLineStipple)
    m_vk.cmdSetLineStipple = (CmdSetLineStippleFunc) GET_PROC_ADDR("vkCmdSetLineStippleKHR");
if (!m_vk.cmdSetLineStipple)
    m_vk.cmdSetLineStipple = (CmdSetLineStippleFunc) GET_PROC_ADDR("vkCmdSetLineStippleEXT");
m_vk.cmdSetLineStippleEnableEXT = (CmdSetLineStippleEnableEXTFunc) GET_PROC_ADDR("vkCmdSetLineStippleEnableEXT");
m_vk.cmdSetLineWidth = (CmdSetLineWidthFunc) GET_PROC_ADDR("vkCmdSetLineWidth");
m_vk.cmdSetLogicOpEXT = (CmdSetLogicOpEXTFunc) GET_PROC_ADDR("vkCmdSetLogicOpEXT");
m_vk.cmdSetLogicOpEnableEXT = (CmdSetLogicOpEnableEXTFunc) GET_PROC_ADDR("vkCmdSetLogicOpEnableEXT");
m_vk.cmdSetPatchControlPointsEXT = (CmdSetPatchControlPointsEXTFunc) GET_PROC_ADDR("vkCmdSetPatchControlPointsEXT");
m_vk.cmdSetPerformanceMarkerINTEL = (CmdSetPerformanceMarkerINTELFunc) GET_PROC_ADDR("vkCmdSetPerformanceMarkerINTEL");
m_vk.cmdSetPerformanceOverrideINTEL = (CmdSetPerformanceOverrideINTELFunc) GET_PROC_ADDR("vkCmdSetPerformanceOverrideINTEL");
m_vk.cmdSetPerformanceStreamMarkerINTEL = (CmdSetPerformanceStreamMarkerINTELFunc) GET_PROC_ADDR("vkCmdSetPerformanceStreamMarkerINTEL");
m_vk.cmdSetPolygonModeEXT = (CmdSetPolygonModeEXTFunc) GET_PROC_ADDR("vkCmdSetPolygonModeEXT");
if (usedApiVersion >= VK_MAKE_API_VERSION(0, 1, 3, 0))
    m_vk.cmdSetPrimitiveRestartEnable = (CmdSetPrimitiveRestartEnableFunc) GET_PROC_ADDR("vkCmdSetPrimitiveRestartEnable");
if (!m_vk.cmdSetPrimitiveRestartEnable)
    m_vk.cmdSetPrimitiveRestartEnable = (CmdSetPrimitiveRestartEnableFunc) GET_PROC_ADDR("vkCmdSetPrimitiveRestartEnableEXT");
if (usedApiVersion >= VK_MAKE_API_VERSION(0, 1, 3, 0))
    m_vk.cmdSetPrimitiveTopology = (CmdSetPrimitiveTopologyFunc) GET_PROC_ADDR("vkCmdSetPrimitiveTopology");
if (!m_vk.cmdSetPrimitiveTopology)
    m_vk.cmdSetPrimitiveTopology = (CmdSetPrimitiveTopologyFunc) GET_PROC_ADDR("vkCmdSetPrimitiveTopologyEXT");
m_vk.cmdSetProvokingVertexModeEXT = (CmdSetProvokingVertexModeEXTFunc) GET_PROC_ADDR("vkCmdSetProvokingVertexModeEXT");
m_vk.cmdSetRasterizationSamplesEXT = (CmdSetRasterizationSamplesEXTFunc) GET_PROC_ADDR("vkCmdSetRasterizationSamplesEXT");
m_vk.cmdSetRasterizationStreamEXT = (CmdSetRasterizationStreamEXTFunc) GET_PROC_ADDR("vkCmdSetRasterizationStreamEXT");
if (usedApiVersion >= VK_MAKE_API_VERSION(0, 1, 3, 0))
    m_vk.cmdSetRasterizerDiscardEnable = (CmdSetRasterizerDiscardEnableFunc) GET_PROC_ADDR("vkCmdSetRasterizerDiscardEnable");
if (!m_vk.cmdSetRasterizerDiscardEnable)
    m_vk.cmdSetRasterizerDiscardEnable = (CmdSetRasterizerDiscardEnableFunc) GET_PROC_ADDR("vkCmdSetRasterizerDiscardEnableEXT");
m_vk.cmdSetRayTracingPipelineStackSizeKHR = (CmdSetRayTracingPipelineStackSizeKHRFunc) GET_PROC_ADDR("vkCmdSetRayTracingPipelineStackSizeKHR");
if (usedApiVersion >= VK_MAKE_API_VERSION(0, 1, 4, 0))
    m_vk.cmdSetRenderingAttachmentLocations = (CmdSetRenderingAttachmentLocationsFunc) GET_PROC_ADDR("vkCmdSetRenderingAttachmentLocations");
if (!m_vk.cmdSetRenderingAttachmentLocations)
    m_vk.cmdSetRenderingAttachmentLocations = (CmdSetRenderingAttachmentLocationsFunc) GET_PROC_ADDR("vkCmdSetRenderingAttachmentLocationsKHR");
if (usedApiVersion >= VK_MAKE_API_VERSION(0, 1, 4, 0))
    m_vk.cmdSetRenderingInputAttachmentIndices = (CmdSetRenderingInputAttachmentIndicesFunc) GET_PROC_ADDR("vkCmdSetRenderingInputAttachmentIndices");
if (!m_vk.cmdSetRenderingInputAttachmentIndices)
    m_vk.cmdSetRenderingInputAttachmentIndices = (CmdSetRenderingInputAttachmentIndicesFunc) GET_PROC_ADDR("vkCmdSetRenderingInputAttachmentIndicesKHR");
m_vk.cmdSetRepresentativeFragmentTestEnableNV = (CmdSetRepresentativeFragmentTestEnableNVFunc) GET_PROC_ADDR("vkCmdSetRepresentativeFragmentTestEnableNV");
m_vk.cmdSetSampleLocationsEXT = (CmdSetSampleLocationsEXTFunc) GET_PROC_ADDR("vkCmdSetSampleLocationsEXT");
m_vk.cmdSetSampleLocationsEnableEXT = (CmdSetSampleLocationsEnableEXTFunc) GET_PROC_ADDR("vkCmdSetSampleLocationsEnableEXT");
m_vk.cmdSetSampleMaskEXT = (CmdSetSampleMaskEXTFunc) GET_PROC_ADDR("vkCmdSetSampleMaskEXT");
m_vk.cmdSetScissor = (CmdSetScissorFunc) GET_PROC_ADDR("vkCmdSetScissor");
if (usedApiVersion >= VK_MAKE_API_VERSION(0, 1, 3, 0))
    m_vk.cmdSetScissorWithCount = (CmdSetScissorWithCountFunc) GET_PROC_ADDR("vkCmdSetScissorWithCount");
if (!m_vk.cmdSetScissorWithCount)
    m_vk.cmdSetScissorWithCount = (CmdSetScissorWithCountFunc) GET_PROC_ADDR("vkCmdSetScissorWithCountEXT");
m_vk.cmdSetShadingRateImageEnableNV = (CmdSetShadingRateImageEnableNVFunc) GET_PROC_ADDR("vkCmdSetShadingRateImageEnableNV");
m_vk.cmdSetStencilCompareMask = (CmdSetStencilCompareMaskFunc) GET_PROC_ADDR("vkCmdSetStencilCompareMask");
if (usedApiVersion >= VK_MAKE_API_VERSION(0, 1, 3, 0))
    m_vk.cmdSetStencilOp = (CmdSetStencilOpFunc) GET_PROC_ADDR("vkCmdSetStencilOp");
if (!m_vk.cmdSetStencilOp)
    m_vk.cmdSetStencilOp = (CmdSetStencilOpFunc) GET_PROC_ADDR("vkCmdSetStencilOpEXT");
m_vk.cmdSetStencilReference = (CmdSetStencilReferenceFunc) GET_PROC_ADDR("vkCmdSetStencilReference");
if (usedApiVersion >= VK_MAKE_API_VERSION(0, 1, 3, 0))
    m_vk.cmdSetStencilTestEnable = (CmdSetStencilTestEnableFunc) GET_PROC_ADDR("vkCmdSetStencilTestEnable");
if (!m_vk.cmdSetStencilTestEnable)
    m_vk.cmdSetStencilTestEnable = (CmdSetStencilTestEnableFunc) GET_PROC_ADDR("vkCmdSetStencilTestEnableEXT");
m_vk.cmdSetStencilWriteMask = (CmdSetStencilWriteMaskFunc) GET_PROC_ADDR("vkCmdSetStencilWriteMask");
m_vk.cmdSetTessellationDomainOriginEXT = (CmdSetTessellationDomainOriginEXTFunc) GET_PROC_ADDR("vkCmdSetTessellationDomainOriginEXT");
m_vk.cmdSetVertexInputEXT = (CmdSetVertexInputEXTFunc) GET_PROC_ADDR("vkCmdSetVertexInputEXT");
m_vk.cmdSetViewport = (CmdSetViewportFunc) GET_PROC_ADDR("vkCmdSetViewport");
m_vk.cmdSetViewportShadingRatePaletteNV = (CmdSetViewportShadingRatePaletteNVFunc) GET_PROC_ADDR("vkCmdSetViewportShadingRatePaletteNV");
m_vk.cmdSetViewportSwizzleNV = (CmdSetViewportSwizzleNVFunc) GET_PROC_ADDR("vkCmdSetViewportSwizzleNV");
m_vk.cmdSetViewportWScalingEnableNV = (CmdSetViewportWScalingEnableNVFunc) GET_PROC_ADDR("vkCmdSetViewportWScalingEnableNV");
m_vk.cmdSetViewportWScalingNV = (CmdSetViewportWScalingNVFunc) GET_PROC_ADDR("vkCmdSetViewportWScalingNV");
if (usedApiVersion >= VK_MAKE_API_VERSION(0, 1, 3, 0))
    m_vk.cmdSetViewportWithCount = (CmdSetViewportWithCountFunc) GET_PROC_ADDR("vkCmdSetViewportWithCount");
if (!m_vk.cmdSetViewportWithCount)
    m_vk.cmdSetViewportWithCount = (CmdSetViewportWithCountFunc) GET_PROC_ADDR("vkCmdSetViewportWithCountEXT");
m_vk.cmdSubpassShadingHUAWEI = (CmdSubpassShadingHUAWEIFunc) GET_PROC_ADDR("vkCmdSubpassShadingHUAWEI");
m_vk.cmdTraceRaysIndirect2KHR = (CmdTraceRaysIndirect2KHRFunc) GET_PROC_ADDR("vkCmdTraceRaysIndirect2KHR");
m_vk.cmdTraceRaysIndirectKHR = (CmdTraceRaysIndirectKHRFunc) GET_PROC_ADDR("vkCmdTraceRaysIndirectKHR");
m_vk.cmdTraceRaysKHR = (CmdTraceRaysKHRFunc) GET_PROC_ADDR("vkCmdTraceRaysKHR");
m_vk.cmdTraceRaysNV = (CmdTraceRaysNVFunc) GET_PROC_ADDR("vkCmdTraceRaysNV");
m_vk.cmdUpdateBuffer = (CmdUpdateBufferFunc) GET_PROC_ADDR("vkCmdUpdateBuffer");
m_vk.cmdUpdatePipelineIndirectBufferNV = (CmdUpdatePipelineIndirectBufferNVFunc) GET_PROC_ADDR("vkCmdUpdatePipelineIndirectBufferNV");
m_vk.cmdWaitEvents = (CmdWaitEventsFunc) GET_PROC_ADDR("vkCmdWaitEvents");
if (usedApiVersion >= VK_MAKE_API_VERSION(0, 1, 3, 0))
    m_vk.cmdWaitEvents2 = (CmdWaitEvents2Func) GET_PROC_ADDR("vkCmdWaitEvents2");
if (!m_vk.cmdWaitEvents2)
    m_vk.cmdWaitEvents2 = (CmdWaitEvents2Func) GET_PROC_ADDR("vkCmdWaitEvents2KHR");
m_vk.cmdWriteAccelerationStructuresPropertiesKHR = (CmdWriteAccelerationStructuresPropertiesKHRFunc) GET_PROC_ADDR("vkCmdWriteAccelerationStructuresPropertiesKHR");
m_vk.cmdWriteAccelerationStructuresPropertiesNV = (CmdWriteAccelerationStructuresPropertiesNVFunc) GET_PROC_ADDR("vkCmdWriteAccelerationStructuresPropertiesNV");
m_vk.cmdWriteBufferMarker2AMD = (CmdWriteBufferMarker2AMDFunc) GET_PROC_ADDR("vkCmdWriteBufferMarker2AMD");
m_vk.cmdWriteBufferMarkerAMD = (CmdWriteBufferMarkerAMDFunc) GET_PROC_ADDR("vkCmdWriteBufferMarkerAMD");
m_vk.cmdWriteMicromapsPropertiesEXT = (CmdWriteMicromapsPropertiesEXTFunc) GET_PROC_ADDR("vkCmdWriteMicromapsPropertiesEXT");
m_vk.cmdWriteTimestamp = (CmdWriteTimestampFunc) GET_PROC_ADDR("vkCmdWriteTimestamp");
if (usedApiVersion >= VK_MAKE_API_VERSION(0, 1, 3, 0))
    m_vk.cmdWriteTimestamp2 = (CmdWriteTimestamp2Func) GET_PROC_ADDR("vkCmdWriteTimestamp2");
if (!m_vk.cmdWriteTimestamp2)
    m_vk.cmdWriteTimestamp2 = (CmdWriteTimestamp2Func) GET_PROC_ADDR("vkCmdWriteTimestamp2KHR");
m_vk.compileDeferredNV = (CompileDeferredNVFunc) GET_PROC_ADDR("vkCompileDeferredNV");
m_vk.convertCooperativeVectorMatrixNV = (ConvertCooperativeVectorMatrixNVFunc) GET_PROC_ADDR("vkConvertCooperativeVectorMatrixNV");
m_vk.copyAccelerationStructureKHR = (CopyAccelerationStructureKHRFunc) GET_PROC_ADDR("vkCopyAccelerationStructureKHR");
m_vk.copyAccelerationStructureToMemoryKHR = (CopyAccelerationStructureToMemoryKHRFunc) GET_PROC_ADDR("vkCopyAccelerationStructureToMemoryKHR");
if (usedApiVersion >= VK_MAKE_API_VERSION(0, 1, 4, 0))
    m_vk.copyImageToImage = (CopyImageToImageFunc) GET_PROC_ADDR("vkCopyImageToImage");
if (!m_vk.copyImageToImage)
    m_vk.copyImageToImage = (CopyImageToImageFunc) GET_PROC_ADDR("vkCopyImageToImageEXT");
if (usedApiVersion >= VK_MAKE_API_VERSION(0, 1, 4, 0))
    m_vk.copyImageToMemory = (CopyImageToMemoryFunc) GET_PROC_ADDR("vkCopyImageToMemory");
if (!m_vk.copyImageToMemory)
    m_vk.copyImageToMemory = (CopyImageToMemoryFunc) GET_PROC_ADDR("vkCopyImageToMemoryEXT");
m_vk.copyMemoryToAccelerationStructureKHR = (CopyMemoryToAccelerationStructureKHRFunc) GET_PROC_ADDR("vkCopyMemoryToAccelerationStructureKHR");
if (usedApiVersion >= VK_MAKE_API_VERSION(0, 1, 4, 0))
    m_vk.copyMemoryToImage = (CopyMemoryToImageFunc) GET_PROC_ADDR("vkCopyMemoryToImage");
if (!m_vk.copyMemoryToImage)
    m_vk.copyMemoryToImage = (CopyMemoryToImageFunc) GET_PROC_ADDR("vkCopyMemoryToImageEXT");
m_vk.copyMemoryToMicromapEXT = (CopyMemoryToMicromapEXTFunc) GET_PROC_ADDR("vkCopyMemoryToMicromapEXT");
m_vk.copyMicromapEXT = (CopyMicromapEXTFunc) GET_PROC_ADDR("vkCopyMicromapEXT");
m_vk.copyMicromapToMemoryEXT = (CopyMicromapToMemoryEXTFunc) GET_PROC_ADDR("vkCopyMicromapToMemoryEXT");
m_vk.createAccelerationStructureKHR = (CreateAccelerationStructureKHRFunc) GET_PROC_ADDR("vkCreateAccelerationStructureKHR");
m_vk.createAccelerationStructureNV = (CreateAccelerationStructureNVFunc) GET_PROC_ADDR("vkCreateAccelerationStructureNV");
m_vk.createBuffer = (CreateBufferFunc) GET_PROC_ADDR("vkCreateBuffer");
m_vk.createBufferCollectionFUCHSIA = (CreateBufferCollectionFUCHSIAFunc) GET_PROC_ADDR("vkCreateBufferCollectionFUCHSIA");
m_vk.createBufferView = (CreateBufferViewFunc) GET_PROC_ADDR("vkCreateBufferView");
m_vk.createCommandPool = (CreateCommandPoolFunc) GET_PROC_ADDR("vkCreateCommandPool");
m_vk.createComputePipelines = (CreateComputePipelinesFunc) GET_PROC_ADDR("vkCreateComputePipelines");
m_vk.createCuFunctionNVX = (CreateCuFunctionNVXFunc) GET_PROC_ADDR("vkCreateCuFunctionNVX");
m_vk.createCuModuleNVX = (CreateCuModuleNVXFunc) GET_PROC_ADDR("vkCreateCuModuleNVX");
m_vk.createCudaFunctionNV = (CreateCudaFunctionNVFunc) GET_PROC_ADDR("vkCreateCudaFunctionNV");
m_vk.createCudaModuleNV = (CreateCudaModuleNVFunc) GET_PROC_ADDR("vkCreateCudaModuleNV");
m_vk.createDataGraphPipelineSessionARM = (CreateDataGraphPipelineSessionARMFunc) GET_PROC_ADDR("vkCreateDataGraphPipelineSessionARM");
m_vk.createDataGraphPipelinesARM = (CreateDataGraphPipelinesARMFunc) GET_PROC_ADDR("vkCreateDataGraphPipelinesARM");
m_vk.createDeferredOperationKHR = (CreateDeferredOperationKHRFunc) GET_PROC_ADDR("vkCreateDeferredOperationKHR");
m_vk.createDescriptorPool = (CreateDescriptorPoolFunc) GET_PROC_ADDR("vkCreateDescriptorPool");
m_vk.createDescriptorSetLayout = (CreateDescriptorSetLayoutFunc) GET_PROC_ADDR("vkCreateDescriptorSetLayout");
if (usedApiVersion >= VK_MAKE_API_VERSION(0, 1, 1, 0))
    m_vk.createDescriptorUpdateTemplate = (CreateDescriptorUpdateTemplateFunc) GET_PROC_ADDR("vkCreateDescriptorUpdateTemplate");
if (!m_vk.createDescriptorUpdateTemplate)
    m_vk.createDescriptorUpdateTemplate = (CreateDescriptorUpdateTemplateFunc) GET_PROC_ADDR("vkCreateDescriptorUpdateTemplateKHR");
m_vk.createEvent = (CreateEventFunc) GET_PROC_ADDR("vkCreateEvent");
m_vk.createExecutionGraphPipelinesAMDX = (CreateExecutionGraphPipelinesAMDXFunc) GET_PROC_ADDR("vkCreateExecutionGraphPipelinesAMDX");
m_vk.createExternalComputeQueueNV = (CreateExternalComputeQueueNVFunc) GET_PROC_ADDR("vkCreateExternalComputeQueueNV");
m_vk.createFence = (CreateFenceFunc) GET_PROC_ADDR("vkCreateFence");
m_vk.createFramebuffer = (CreateFramebufferFunc) GET_PROC_ADDR("vkCreateFramebuffer");
m_vk.createGraphicsPipelines = (CreateGraphicsPipelinesFunc) GET_PROC_ADDR("vkCreateGraphicsPipelines");
m_vk.createImage = (CreateImageFunc) GET_PROC_ADDR("vkCreateImage");
m_vk.createImageView = (CreateImageViewFunc) GET_PROC_ADDR("vkCreateImageView");
m_vk.createIndirectCommandsLayoutEXT = (CreateIndirectCommandsLayoutEXTFunc) GET_PROC_ADDR("vkCreateIndirectCommandsLayoutEXT");
m_vk.createIndirectCommandsLayoutNV = (CreateIndirectCommandsLayoutNVFunc) GET_PROC_ADDR("vkCreateIndirectCommandsLayoutNV");
m_vk.createIndirectExecutionSetEXT = (CreateIndirectExecutionSetEXTFunc) GET_PROC_ADDR("vkCreateIndirectExecutionSetEXT");
m_vk.createMicromapEXT = (CreateMicromapEXTFunc) GET_PROC_ADDR("vkCreateMicromapEXT");
m_vk.createOpticalFlowSessionNV = (CreateOpticalFlowSessionNVFunc) GET_PROC_ADDR("vkCreateOpticalFlowSessionNV");
m_vk.createPipelineBinariesKHR = (CreatePipelineBinariesKHRFunc) GET_PROC_ADDR("vkCreatePipelineBinariesKHR");
m_vk.createPipelineCache = (CreatePipelineCacheFunc) GET_PROC_ADDR("vkCreatePipelineCache");
m_vk.createPipelineLayout = (CreatePipelineLayoutFunc) GET_PROC_ADDR("vkCreatePipelineLayout");
if (usedApiVersion >= VK_MAKE_API_VERSION(0, 1, 3, 0))
    m_vk.createPrivateDataSlot = (CreatePrivateDataSlotFunc) GET_PROC_ADDR("vkCreatePrivateDataSlot");
if (!m_vk.createPrivateDataSlot)
    m_vk.createPrivateDataSlot = (CreatePrivateDataSlotFunc) GET_PROC_ADDR("vkCreatePrivateDataSlotEXT");
m_vk.createQueryPool = (CreateQueryPoolFunc) GET_PROC_ADDR("vkCreateQueryPool");
m_vk.createRayTracingPipelinesKHR = (CreateRayTracingPipelinesKHRFunc) GET_PROC_ADDR("vkCreateRayTracingPipelinesKHR");
m_vk.createRayTracingPipelinesNV = (CreateRayTracingPipelinesNVFunc) GET_PROC_ADDR("vkCreateRayTracingPipelinesNV");
m_vk.createRenderPass = (CreateRenderPassFunc) GET_PROC_ADDR("vkCreateRenderPass");
if (usedApiVersion >= VK_MAKE_API_VERSION(0, 1, 2, 0))
    m_vk.createRenderPass2 = (CreateRenderPass2Func) GET_PROC_ADDR("vkCreateRenderPass2");
if (!m_vk.createRenderPass2)
    m_vk.createRenderPass2 = (CreateRenderPass2Func) GET_PROC_ADDR("vkCreateRenderPass2KHR");
m_vk.createSampler = (CreateSamplerFunc) GET_PROC_ADDR("vkCreateSampler");
if (usedApiVersion >= VK_MAKE_API_VERSION(0, 1, 1, 0))
    m_vk.createSamplerYcbcrConversion = (CreateSamplerYcbcrConversionFunc) GET_PROC_ADDR("vkCreateSamplerYcbcrConversion");
if (!m_vk.createSamplerYcbcrConversion)
    m_vk.createSamplerYcbcrConversion = (CreateSamplerYcbcrConversionFunc) GET_PROC_ADDR("vkCreateSamplerYcbcrConversionKHR");
m_vk.createSemaphore = (CreateSemaphoreFunc) GET_PROC_ADDR("vkCreateSemaphore");
m_vk.createShaderModule = (CreateShaderModuleFunc) GET_PROC_ADDR("vkCreateShaderModule");
m_vk.createShadersEXT = (CreateShadersEXTFunc) GET_PROC_ADDR("vkCreateShadersEXT");
m_vk.createSharedSwapchainsKHR = (CreateSharedSwapchainsKHRFunc) GET_PROC_ADDR("vkCreateSharedSwapchainsKHR");
m_vk.createSwapchainKHR = (CreateSwapchainKHRFunc) GET_PROC_ADDR("vkCreateSwapchainKHR");
m_vk.createTensorARM = (CreateTensorARMFunc) GET_PROC_ADDR("vkCreateTensorARM");
m_vk.createTensorViewARM = (CreateTensorViewARMFunc) GET_PROC_ADDR("vkCreateTensorViewARM");
m_vk.createValidationCacheEXT = (CreateValidationCacheEXTFunc) GET_PROC_ADDR("vkCreateValidationCacheEXT");
m_vk.createVideoSessionKHR = (CreateVideoSessionKHRFunc) GET_PROC_ADDR("vkCreateVideoSessionKHR");
m_vk.createVideoSessionParametersKHR = (CreateVideoSessionParametersKHRFunc) GET_PROC_ADDR("vkCreateVideoSessionParametersKHR");
m_vk.debugMarkerSetObjectNameEXT = (DebugMarkerSetObjectNameEXTFunc) GET_PROC_ADDR("vkDebugMarkerSetObjectNameEXT");
m_vk.debugMarkerSetObjectTagEXT = (DebugMarkerSetObjectTagEXTFunc) GET_PROC_ADDR("vkDebugMarkerSetObjectTagEXT");
m_vk.deferredOperationJoinKHR = (DeferredOperationJoinKHRFunc) GET_PROC_ADDR("vkDeferredOperationJoinKHR");
m_vk.destroyAccelerationStructureKHR = (DestroyAccelerationStructureKHRFunc) GET_PROC_ADDR("vkDestroyAccelerationStructureKHR");
m_vk.destroyAccelerationStructureNV = (DestroyAccelerationStructureNVFunc) GET_PROC_ADDR("vkDestroyAccelerationStructureNV");
m_vk.destroyBuffer = (DestroyBufferFunc) GET_PROC_ADDR("vkDestroyBuffer");
m_vk.destroyBufferCollectionFUCHSIA = (DestroyBufferCollectionFUCHSIAFunc) GET_PROC_ADDR("vkDestroyBufferCollectionFUCHSIA");
m_vk.destroyBufferView = (DestroyBufferViewFunc) GET_PROC_ADDR("vkDestroyBufferView");
m_vk.destroyCommandPool = (DestroyCommandPoolFunc) GET_PROC_ADDR("vkDestroyCommandPool");
m_vk.destroyCuFunctionNVX = (DestroyCuFunctionNVXFunc) GET_PROC_ADDR("vkDestroyCuFunctionNVX");
m_vk.destroyCuModuleNVX = (DestroyCuModuleNVXFunc) GET_PROC_ADDR("vkDestroyCuModuleNVX");
m_vk.destroyCudaFunctionNV = (DestroyCudaFunctionNVFunc) GET_PROC_ADDR("vkDestroyCudaFunctionNV");
m_vk.destroyCudaModuleNV = (DestroyCudaModuleNVFunc) GET_PROC_ADDR("vkDestroyCudaModuleNV");
m_vk.destroyDataGraphPipelineSessionARM = (DestroyDataGraphPipelineSessionARMFunc) GET_PROC_ADDR("vkDestroyDataGraphPipelineSessionARM");
m_vk.destroyDeferredOperationKHR = (DestroyDeferredOperationKHRFunc) GET_PROC_ADDR("vkDestroyDeferredOperationKHR");
m_vk.destroyDescriptorPool = (DestroyDescriptorPoolFunc) GET_PROC_ADDR("vkDestroyDescriptorPool");
m_vk.destroyDescriptorSetLayout = (DestroyDescriptorSetLayoutFunc) GET_PROC_ADDR("vkDestroyDescriptorSetLayout");
if (usedApiVersion >= VK_MAKE_API_VERSION(0, 1, 1, 0))
    m_vk.destroyDescriptorUpdateTemplate = (DestroyDescriptorUpdateTemplateFunc) GET_PROC_ADDR("vkDestroyDescriptorUpdateTemplate");
if (!m_vk.destroyDescriptorUpdateTemplate)
    m_vk.destroyDescriptorUpdateTemplate = (DestroyDescriptorUpdateTemplateFunc) GET_PROC_ADDR("vkDestroyDescriptorUpdateTemplateKHR");
m_vk.destroyDevice = (DestroyDeviceFunc) GET_PROC_ADDR("vkDestroyDevice");
m_vk.destroyEvent = (DestroyEventFunc) GET_PROC_ADDR("vkDestroyEvent");
m_vk.destroyExternalComputeQueueNV = (DestroyExternalComputeQueueNVFunc) GET_PROC_ADDR("vkDestroyExternalComputeQueueNV");
m_vk.destroyFence = (DestroyFenceFunc) GET_PROC_ADDR("vkDestroyFence");
m_vk.destroyFramebuffer = (DestroyFramebufferFunc) GET_PROC_ADDR("vkDestroyFramebuffer");
m_vk.destroyImage = (DestroyImageFunc) GET_PROC_ADDR("vkDestroyImage");
m_vk.destroyImageView = (DestroyImageViewFunc) GET_PROC_ADDR("vkDestroyImageView");
m_vk.destroyIndirectCommandsLayoutEXT = (DestroyIndirectCommandsLayoutEXTFunc) GET_PROC_ADDR("vkDestroyIndirectCommandsLayoutEXT");
m_vk.destroyIndirectCommandsLayoutNV = (DestroyIndirectCommandsLayoutNVFunc) GET_PROC_ADDR("vkDestroyIndirectCommandsLayoutNV");
m_vk.destroyIndirectExecutionSetEXT = (DestroyIndirectExecutionSetEXTFunc) GET_PROC_ADDR("vkDestroyIndirectExecutionSetEXT");
m_vk.destroyMicromapEXT = (DestroyMicromapEXTFunc) GET_PROC_ADDR("vkDestroyMicromapEXT");
m_vk.destroyOpticalFlowSessionNV = (DestroyOpticalFlowSessionNVFunc) GET_PROC_ADDR("vkDestroyOpticalFlowSessionNV");
m_vk.destroyPipeline = (DestroyPipelineFunc) GET_PROC_ADDR("vkDestroyPipeline");
m_vk.destroyPipelineBinaryKHR = (DestroyPipelineBinaryKHRFunc) GET_PROC_ADDR("vkDestroyPipelineBinaryKHR");
m_vk.destroyPipelineCache = (DestroyPipelineCacheFunc) GET_PROC_ADDR("vkDestroyPipelineCache");
m_vk.destroyPipelineLayout = (DestroyPipelineLayoutFunc) GET_PROC_ADDR("vkDestroyPipelineLayout");
if (usedApiVersion >= VK_MAKE_API_VERSION(0, 1, 3, 0))
    m_vk.destroyPrivateDataSlot = (DestroyPrivateDataSlotFunc) GET_PROC_ADDR("vkDestroyPrivateDataSlot");
if (!m_vk.destroyPrivateDataSlot)
    m_vk.destroyPrivateDataSlot = (DestroyPrivateDataSlotFunc) GET_PROC_ADDR("vkDestroyPrivateDataSlotEXT");
m_vk.destroyQueryPool = (DestroyQueryPoolFunc) GET_PROC_ADDR("vkDestroyQueryPool");
m_vk.destroyRenderPass = (DestroyRenderPassFunc) GET_PROC_ADDR("vkDestroyRenderPass");
m_vk.destroySampler = (DestroySamplerFunc) GET_PROC_ADDR("vkDestroySampler");
if (usedApiVersion >= VK_MAKE_API_VERSION(0, 1, 1, 0))
    m_vk.destroySamplerYcbcrConversion = (DestroySamplerYcbcrConversionFunc) GET_PROC_ADDR("vkDestroySamplerYcbcrConversion");
if (!m_vk.destroySamplerYcbcrConversion)
    m_vk.destroySamplerYcbcrConversion = (DestroySamplerYcbcrConversionFunc) GET_PROC_ADDR("vkDestroySamplerYcbcrConversionKHR");
m_vk.destroySemaphore = (DestroySemaphoreFunc) GET_PROC_ADDR("vkDestroySemaphore");
m_vk.destroyShaderEXT = (DestroyShaderEXTFunc) GET_PROC_ADDR("vkDestroyShaderEXT");
m_vk.destroyShaderModule = (DestroyShaderModuleFunc) GET_PROC_ADDR("vkDestroyShaderModule");
m_vk.destroySwapchainKHR = (DestroySwapchainKHRFunc) GET_PROC_ADDR("vkDestroySwapchainKHR");
m_vk.destroyTensorARM = (DestroyTensorARMFunc) GET_PROC_ADDR("vkDestroyTensorARM");
m_vk.destroyTensorViewARM = (DestroyTensorViewARMFunc) GET_PROC_ADDR("vkDestroyTensorViewARM");
m_vk.destroyValidationCacheEXT = (DestroyValidationCacheEXTFunc) GET_PROC_ADDR("vkDestroyValidationCacheEXT");
m_vk.destroyVideoSessionKHR = (DestroyVideoSessionKHRFunc) GET_PROC_ADDR("vkDestroyVideoSessionKHR");
m_vk.destroyVideoSessionParametersKHR = (DestroyVideoSessionParametersKHRFunc) GET_PROC_ADDR("vkDestroyVideoSessionParametersKHR");
m_vk.deviceWaitIdle = (DeviceWaitIdleFunc) GET_PROC_ADDR("vkDeviceWaitIdle");
m_vk.displayPowerControlEXT = (DisplayPowerControlEXTFunc) GET_PROC_ADDR("vkDisplayPowerControlEXT");
m_vk.endCommandBuffer = (EndCommandBufferFunc) GET_PROC_ADDR("vkEndCommandBuffer");
m_vk.exportMetalObjectsEXT = (ExportMetalObjectsEXTFunc) GET_PROC_ADDR("vkExportMetalObjectsEXT");
m_vk.flushMappedMemoryRanges = (FlushMappedMemoryRangesFunc) GET_PROC_ADDR("vkFlushMappedMemoryRanges");
m_vk.freeCommandBuffers = (FreeCommandBuffersFunc) GET_PROC_ADDR("vkFreeCommandBuffers");
m_vk.freeDescriptorSets = (FreeDescriptorSetsFunc) GET_PROC_ADDR("vkFreeDescriptorSets");
m_vk.freeMemory = (FreeMemoryFunc) GET_PROC_ADDR("vkFreeMemory");
m_vk.getAccelerationStructureBuildSizesKHR = (GetAccelerationStructureBuildSizesKHRFunc) GET_PROC_ADDR("vkGetAccelerationStructureBuildSizesKHR");
m_vk.getAccelerationStructureDeviceAddressKHR = (GetAccelerationStructureDeviceAddressKHRFunc) GET_PROC_ADDR("vkGetAccelerationStructureDeviceAddressKHR");
m_vk.getAccelerationStructureHandleNV = (GetAccelerationStructureHandleNVFunc) GET_PROC_ADDR("vkGetAccelerationStructureHandleNV");
m_vk.getAccelerationStructureMemoryRequirementsNV = (GetAccelerationStructureMemoryRequirementsNVFunc) GET_PROC_ADDR("vkGetAccelerationStructureMemoryRequirementsNV");
m_vk.getAccelerationStructureOpaqueCaptureDescriptorDataEXT = (GetAccelerationStructureOpaqueCaptureDescriptorDataEXTFunc) GET_PROC_ADDR("vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT");
m_vk.getAndroidHardwareBufferPropertiesANDROID = (GetAndroidHardwareBufferPropertiesANDROIDFunc) GET_PROC_ADDR("vkGetAndroidHardwareBufferPropertiesANDROID");
m_vk.getBufferCollectionPropertiesFUCHSIA = (GetBufferCollectionPropertiesFUCHSIAFunc) GET_PROC_ADDR("vkGetBufferCollectionPropertiesFUCHSIA");
if (usedApiVersion >= VK_MAKE_API_VERSION(0, 1, 2, 0))
    m_vk.getBufferDeviceAddress = (GetBufferDeviceAddressFunc) GET_PROC_ADDR("vkGetBufferDeviceAddress");
if (!m_vk.getBufferDeviceAddress)
    m_vk.getBufferDeviceAddress = (GetBufferDeviceAddressFunc) GET_PROC_ADDR("vkGetBufferDeviceAddressKHR");
if (!m_vk.getBufferDeviceAddress)
    m_vk.getBufferDeviceAddress = (GetBufferDeviceAddressFunc) GET_PROC_ADDR("vkGetBufferDeviceAddressEXT");
m_vk.getBufferMemoryRequirements = (GetBufferMemoryRequirementsFunc) GET_PROC_ADDR("vkGetBufferMemoryRequirements");
if (usedApiVersion >= VK_MAKE_API_VERSION(0, 1, 1, 0))
    m_vk.getBufferMemoryRequirements2 = (GetBufferMemoryRequirements2Func) GET_PROC_ADDR("vkGetBufferMemoryRequirements2");
if (!m_vk.getBufferMemoryRequirements2)
    m_vk.getBufferMemoryRequirements2 = (GetBufferMemoryRequirements2Func) GET_PROC_ADDR("vkGetBufferMemoryRequirements2KHR");
if (usedApiVersion >= VK_MAKE_API_VERSION(0, 1, 2, 0))
    m_vk.getBufferOpaqueCaptureAddress = (GetBufferOpaqueCaptureAddressFunc) GET_PROC_ADDR("vkGetBufferOpaqueCaptureAddress");
if (!m_vk.getBufferOpaqueCaptureAddress)
    m_vk.getBufferOpaqueCaptureAddress = (GetBufferOpaqueCaptureAddressFunc) GET_PROC_ADDR("vkGetBufferOpaqueCaptureAddressKHR");
m_vk.getBufferOpaqueCaptureDescriptorDataEXT = (GetBufferOpaqueCaptureDescriptorDataEXTFunc) GET_PROC_ADDR("vkGetBufferOpaqueCaptureDescriptorDataEXT");
m_vk.getCalibratedTimestampsKHR = (GetCalibratedTimestampsKHRFunc) GET_PROC_ADDR("vkGetCalibratedTimestampsKHR");
if (!m_vk.getCalibratedTimestampsKHR)
    m_vk.getCalibratedTimestampsKHR = (GetCalibratedTimestampsKHRFunc) GET_PROC_ADDR("vkGetCalibratedTimestampsEXT");
m_vk.getClusterAccelerationStructureBuildSizesNV = (GetClusterAccelerationStructureBuildSizesNVFunc) GET_PROC_ADDR("vkGetClusterAccelerationStructureBuildSizesNV");
m_vk.getCudaModuleCacheNV = (GetCudaModuleCacheNVFunc) GET_PROC_ADDR("vkGetCudaModuleCacheNV");
m_vk.getDataGraphPipelineAvailablePropertiesARM = (GetDataGraphPipelineAvailablePropertiesARMFunc) GET_PROC_ADDR("vkGetDataGraphPipelineAvailablePropertiesARM");
m_vk.getDataGraphPipelinePropertiesARM = (GetDataGraphPipelinePropertiesARMFunc) GET_PROC_ADDR("vkGetDataGraphPipelinePropertiesARM");
m_vk.getDataGraphPipelineSessionBindPointRequirementsARM = (GetDataGraphPipelineSessionBindPointRequirementsARMFunc) GET_PROC_ADDR("vkGetDataGraphPipelineSessionBindPointRequirementsARM");
m_vk.getDataGraphPipelineSessionMemoryRequirementsARM = (GetDataGraphPipelineSessionMemoryRequirementsARMFunc) GET_PROC_ADDR("vkGetDataGraphPipelineSessionMemoryRequirementsARM");
m_vk.getDeferredOperationMaxConcurrencyKHR = (GetDeferredOperationMaxConcurrencyKHRFunc) GET_PROC_ADDR("vkGetDeferredOperationMaxConcurrencyKHR");
m_vk.getDeferredOperationResultKHR = (GetDeferredOperationResultKHRFunc) GET_PROC_ADDR("vkGetDeferredOperationResultKHR");
m_vk.getDescriptorEXT = (GetDescriptorEXTFunc) GET_PROC_ADDR("vkGetDescriptorEXT");
m_vk.getDescriptorSetHostMappingVALVE = (GetDescriptorSetHostMappingVALVEFunc) GET_PROC_ADDR("vkGetDescriptorSetHostMappingVALVE");
m_vk.getDescriptorSetLayoutBindingOffsetEXT = (GetDescriptorSetLayoutBindingOffsetEXTFunc) GET_PROC_ADDR("vkGetDescriptorSetLayoutBindingOffsetEXT");
m_vk.getDescriptorSetLayoutHostMappingInfoVALVE = (GetDescriptorSetLayoutHostMappingInfoVALVEFunc) GET_PROC_ADDR("vkGetDescriptorSetLayoutHostMappingInfoVALVE");
m_vk.getDescriptorSetLayoutSizeEXT = (GetDescriptorSetLayoutSizeEXTFunc) GET_PROC_ADDR("vkGetDescriptorSetLayoutSizeEXT");
if (usedApiVersion >= VK_MAKE_API_VERSION(0, 1, 1, 0))
    m_vk.getDescriptorSetLayoutSupport = (GetDescriptorSetLayoutSupportFunc) GET_PROC_ADDR("vkGetDescriptorSetLayoutSupport");
if (!m_vk.getDescriptorSetLayoutSupport)
    m_vk.getDescriptorSetLayoutSupport = (GetDescriptorSetLayoutSupportFunc) GET_PROC_ADDR("vkGetDescriptorSetLayoutSupportKHR");
m_vk.getDeviceAccelerationStructureCompatibilityKHR = (GetDeviceAccelerationStructureCompatibilityKHRFunc) GET_PROC_ADDR("vkGetDeviceAccelerationStructureCompatibilityKHR");
if (usedApiVersion >= VK_MAKE_API_VERSION(0, 1, 3, 0))
    m_vk.getDeviceBufferMemoryRequirements = (GetDeviceBufferMemoryRequirementsFunc) GET_PROC_ADDR("vkGetDeviceBufferMemoryRequirements");
if (!m_vk.getDeviceBufferMemoryRequirements)
    m_vk.getDeviceBufferMemoryRequirements = (GetDeviceBufferMemoryRequirementsFunc) GET_PROC_ADDR("vkGetDeviceBufferMemoryRequirementsKHR");
m_vk.getDeviceFaultInfoEXT = (GetDeviceFaultInfoEXTFunc) GET_PROC_ADDR("vkGetDeviceFaultInfoEXT");
if (usedApiVersion >= VK_MAKE_API_VERSION(0, 1, 1, 0))
    m_vk.getDeviceGroupPeerMemoryFeatures = (GetDeviceGroupPeerMemoryFeaturesFunc) GET_PROC_ADDR("vkGetDeviceGroupPeerMemoryFeatures");
if (!m_vk.getDeviceGroupPeerMemoryFeatures)
    m_vk.getDeviceGroupPeerMemoryFeatures = (GetDeviceGroupPeerMemoryFeaturesFunc) GET_PROC_ADDR("vkGetDeviceGroupPeerMemoryFeaturesKHR");
m_vk.getDeviceGroupPresentCapabilitiesKHR = (GetDeviceGroupPresentCapabilitiesKHRFunc) GET_PROC_ADDR("vkGetDeviceGroupPresentCapabilitiesKHR");
m_vk.getDeviceGroupSurfacePresentModes2EXT = (GetDeviceGroupSurfacePresentModes2EXTFunc) GET_PROC_ADDR("vkGetDeviceGroupSurfacePresentModes2EXT");
m_vk.getDeviceGroupSurfacePresentModesKHR = (GetDeviceGroupSurfacePresentModesKHRFunc) GET_PROC_ADDR("vkGetDeviceGroupSurfacePresentModesKHR");
if (usedApiVersion >= VK_MAKE_API_VERSION(0, 1, 3, 0))
    m_vk.getDeviceImageMemoryRequirements = (GetDeviceImageMemoryRequirementsFunc) GET_PROC_ADDR("vkGetDeviceImageMemoryRequirements");
if (!m_vk.getDeviceImageMemoryRequirements)
    m_vk.getDeviceImageMemoryRequirements = (GetDeviceImageMemoryRequirementsFunc) GET_PROC_ADDR("vkGetDeviceImageMemoryRequirementsKHR");
if (usedApiVersion >= VK_MAKE_API_VERSION(0, 1, 3, 0))
    m_vk.getDeviceImageSparseMemoryRequirements = (GetDeviceImageSparseMemoryRequirementsFunc) GET_PROC_ADDR("vkGetDeviceImageSparseMemoryRequirements");
if (!m_vk.getDeviceImageSparseMemoryRequirements)
    m_vk.getDeviceImageSparseMemoryRequirements = (GetDeviceImageSparseMemoryRequirementsFunc) GET_PROC_ADDR("vkGetDeviceImageSparseMemoryRequirementsKHR");
if (usedApiVersion >= VK_MAKE_API_VERSION(0, 1, 4, 0))
    m_vk.getDeviceImageSubresourceLayout = (GetDeviceImageSubresourceLayoutFunc) GET_PROC_ADDR("vkGetDeviceImageSubresourceLayout");
if (!m_vk.getDeviceImageSubresourceLayout)
    m_vk.getDeviceImageSubresourceLayout = (GetDeviceImageSubresourceLayoutFunc) GET_PROC_ADDR("vkGetDeviceImageSubresourceLayoutKHR");
m_vk.getDeviceMemoryCommitment = (GetDeviceMemoryCommitmentFunc) GET_PROC_ADDR("vkGetDeviceMemoryCommitment");
if (usedApiVersion >= VK_MAKE_API_VERSION(0, 1, 2, 0))
    m_vk.getDeviceMemoryOpaqueCaptureAddress = (GetDeviceMemoryOpaqueCaptureAddressFunc) GET_PROC_ADDR("vkGetDeviceMemoryOpaqueCaptureAddress");
if (!m_vk.getDeviceMemoryOpaqueCaptureAddress)
    m_vk.getDeviceMemoryOpaqueCaptureAddress = (GetDeviceMemoryOpaqueCaptureAddressFunc) GET_PROC_ADDR("vkGetDeviceMemoryOpaqueCaptureAddressKHR");
m_vk.getDeviceMicromapCompatibilityEXT = (GetDeviceMicromapCompatibilityEXTFunc) GET_PROC_ADDR("vkGetDeviceMicromapCompatibilityEXT");
m_vk.getDeviceProcAddr = (GetDeviceProcAddrFunc) GET_PROC_ADDR("vkGetDeviceProcAddr");
m_vk.getDeviceQueue = (GetDeviceQueueFunc) GET_PROC_ADDR("vkGetDeviceQueue");
if (usedApiVersion >= VK_MAKE_API_VERSION(0, 1, 1, 0))
    m_vk.getDeviceQueue2 = (GetDeviceQueue2Func) GET_PROC_ADDR("vkGetDeviceQueue2");
m_vk.getDeviceSubpassShadingMaxWorkgroupSizeHUAWEI = (GetDeviceSubpassShadingMaxWorkgroupSizeHUAWEIFunc) GET_PROC_ADDR("vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI");
m_vk.getDeviceTensorMemoryRequirementsARM = (GetDeviceTensorMemoryRequirementsARMFunc) GET_PROC_ADDR("vkGetDeviceTensorMemoryRequirementsARM");
m_vk.getDynamicRenderingTilePropertiesQCOM = (GetDynamicRenderingTilePropertiesQCOMFunc) GET_PROC_ADDR("vkGetDynamicRenderingTilePropertiesQCOM");
m_vk.getEncodedVideoSessionParametersKHR = (GetEncodedVideoSessionParametersKHRFunc) GET_PROC_ADDR("vkGetEncodedVideoSessionParametersKHR");
m_vk.getEventStatus = (GetEventStatusFunc) GET_PROC_ADDR("vkGetEventStatus");
m_vk.getExecutionGraphPipelineNodeIndexAMDX = (GetExecutionGraphPipelineNodeIndexAMDXFunc) GET_PROC_ADDR("vkGetExecutionGraphPipelineNodeIndexAMDX");
m_vk.getExecutionGraphPipelineScratchSizeAMDX = (GetExecutionGraphPipelineScratchSizeAMDXFunc) GET_PROC_ADDR("vkGetExecutionGraphPipelineScratchSizeAMDX");
m_vk.getExternalComputeQueueDataNV = (GetExternalComputeQueueDataNVFunc) GET_PROC_ADDR("vkGetExternalComputeQueueDataNV");
m_vk.getFenceFdKHR = (GetFenceFdKHRFunc) GET_PROC_ADDR("vkGetFenceFdKHR");
m_vk.getFenceStatus = (GetFenceStatusFunc) GET_PROC_ADDR("vkGetFenceStatus");
m_vk.getFenceWin32HandleKHR = (GetFenceWin32HandleKHRFunc) GET_PROC_ADDR("vkGetFenceWin32HandleKHR");
m_vk.getFramebufferTilePropertiesQCOM = (GetFramebufferTilePropertiesQCOMFunc) GET_PROC_ADDR("vkGetFramebufferTilePropertiesQCOM");
m_vk.getGeneratedCommandsMemoryRequirementsEXT = (GetGeneratedCommandsMemoryRequirementsEXTFunc) GET_PROC_ADDR("vkGetGeneratedCommandsMemoryRequirementsEXT");
m_vk.getGeneratedCommandsMemoryRequirementsNV = (GetGeneratedCommandsMemoryRequirementsNVFunc) GET_PROC_ADDR("vkGetGeneratedCommandsMemoryRequirementsNV");
m_vk.getImageDrmFormatModifierPropertiesEXT = (GetImageDrmFormatModifierPropertiesEXTFunc) GET_PROC_ADDR("vkGetImageDrmFormatModifierPropertiesEXT");
m_vk.getImageMemoryRequirements = (GetImageMemoryRequirementsFunc) GET_PROC_ADDR("vkGetImageMemoryRequirements");
if (usedApiVersion >= VK_MAKE_API_VERSION(0, 1, 1, 0))
    m_vk.getImageMemoryRequirements2 = (GetImageMemoryRequirements2Func) GET_PROC_ADDR("vkGetImageMemoryRequirements2");
if (!m_vk.getImageMemoryRequirements2)
    m_vk.getImageMemoryRequirements2 = (GetImageMemoryRequirements2Func) GET_PROC_ADDR("vkGetImageMemoryRequirements2KHR");
m_vk.getImageOpaqueCaptureDescriptorDataEXT = (GetImageOpaqueCaptureDescriptorDataEXTFunc) GET_PROC_ADDR("vkGetImageOpaqueCaptureDescriptorDataEXT");
m_vk.getImageSparseMemoryRequirements = (GetImageSparseMemoryRequirementsFunc) GET_PROC_ADDR("vkGetImageSparseMemoryRequirements");
if (usedApiVersion >= VK_MAKE_API_VERSION(0, 1, 1, 0))
    m_vk.getImageSparseMemoryRequirements2 = (GetImageSparseMemoryRequirements2Func) GET_PROC_ADDR("vkGetImageSparseMemoryRequirements2");
if (!m_vk.getImageSparseMemoryRequirements2)
    m_vk.getImageSparseMemoryRequirements2 = (GetImageSparseMemoryRequirements2Func) GET_PROC_ADDR("vkGetImageSparseMemoryRequirements2KHR");
m_vk.getImageSubresourceLayout = (GetImageSubresourceLayoutFunc) GET_PROC_ADDR("vkGetImageSubresourceLayout");
if (usedApiVersion >= VK_MAKE_API_VERSION(0, 1, 4, 0))
    m_vk.getImageSubresourceLayout2 = (GetImageSubresourceLayout2Func) GET_PROC_ADDR("vkGetImageSubresourceLayout2");
if (!m_vk.getImageSubresourceLayout2)
    m_vk.getImageSubresourceLayout2 = (GetImageSubresourceLayout2Func) GET_PROC_ADDR("vkGetImageSubresourceLayout2KHR");
if (!m_vk.getImageSubresourceLayout2)
    m_vk.getImageSubresourceLayout2 = (GetImageSubresourceLayout2Func) GET_PROC_ADDR("vkGetImageSubresourceLayout2EXT");
m_vk.getImageViewAddressNVX = (GetImageViewAddressNVXFunc) GET_PROC_ADDR("vkGetImageViewAddressNVX");
m_vk.getImageViewHandle64NVX = (GetImageViewHandle64NVXFunc) GET_PROC_ADDR("vkGetImageViewHandle64NVX");
m_vk.getImageViewHandleNVX = (GetImageViewHandleNVXFunc) GET_PROC_ADDR("vkGetImageViewHandleNVX");
m_vk.getImageViewOpaqueCaptureDescriptorDataEXT = (GetImageViewOpaqueCaptureDescriptorDataEXTFunc) GET_PROC_ADDR("vkGetImageViewOpaqueCaptureDescriptorDataEXT");
m_vk.getLatencyTimingsNV = (GetLatencyTimingsNVFunc) GET_PROC_ADDR("vkGetLatencyTimingsNV");
m_vk.getMemoryAndroidHardwareBufferANDROID = (GetMemoryAndroidHardwareBufferANDROIDFunc) GET_PROC_ADDR("vkGetMemoryAndroidHardwareBufferANDROID");
m_vk.getMemoryFdKHR = (GetMemoryFdKHRFunc) GET_PROC_ADDR("vkGetMemoryFdKHR");
m_vk.getMemoryFdPropertiesKHR = (GetMemoryFdPropertiesKHRFunc) GET_PROC_ADDR("vkGetMemoryFdPropertiesKHR");
m_vk.getMemoryHostPointerPropertiesEXT = (GetMemoryHostPointerPropertiesEXTFunc) GET_PROC_ADDR("vkGetMemoryHostPointerPropertiesEXT");
m_vk.getMemoryMetalHandleEXT = (GetMemoryMetalHandleEXTFunc) GET_PROC_ADDR("vkGetMemoryMetalHandleEXT");
m_vk.getMemoryMetalHandlePropertiesEXT = (GetMemoryMetalHandlePropertiesEXTFunc) GET_PROC_ADDR("vkGetMemoryMetalHandlePropertiesEXT");
m_vk.getMemoryRemoteAddressNV = (GetMemoryRemoteAddressNVFunc) GET_PROC_ADDR("vkGetMemoryRemoteAddressNV");
m_vk.getMemoryWin32HandleKHR = (GetMemoryWin32HandleKHRFunc) GET_PROC_ADDR("vkGetMemoryWin32HandleKHR");
m_vk.getMemoryWin32HandleNV = (GetMemoryWin32HandleNVFunc) GET_PROC_ADDR("vkGetMemoryWin32HandleNV");
m_vk.getMemoryWin32HandlePropertiesKHR = (GetMemoryWin32HandlePropertiesKHRFunc) GET_PROC_ADDR("vkGetMemoryWin32HandlePropertiesKHR");
m_vk.getMemoryZirconHandleFUCHSIA = (GetMemoryZirconHandleFUCHSIAFunc) GET_PROC_ADDR("vkGetMemoryZirconHandleFUCHSIA");
m_vk.getMemoryZirconHandlePropertiesFUCHSIA = (GetMemoryZirconHandlePropertiesFUCHSIAFunc) GET_PROC_ADDR("vkGetMemoryZirconHandlePropertiesFUCHSIA");
m_vk.getMicromapBuildSizesEXT = (GetMicromapBuildSizesEXTFunc) GET_PROC_ADDR("vkGetMicromapBuildSizesEXT");
m_vk.getPartitionedAccelerationStructuresBuildSizesNV = (GetPartitionedAccelerationStructuresBuildSizesNVFunc) GET_PROC_ADDR("vkGetPartitionedAccelerationStructuresBuildSizesNV");
m_vk.getPastPresentationTimingGOOGLE = (GetPastPresentationTimingGOOGLEFunc) GET_PROC_ADDR("vkGetPastPresentationTimingGOOGLE");
m_vk.getPerformanceParameterINTEL = (GetPerformanceParameterINTELFunc) GET_PROC_ADDR("vkGetPerformanceParameterINTEL");
m_vk.getPipelineBinaryDataKHR = (GetPipelineBinaryDataKHRFunc) GET_PROC_ADDR("vkGetPipelineBinaryDataKHR");
m_vk.getPipelineCacheData = (GetPipelineCacheDataFunc) GET_PROC_ADDR("vkGetPipelineCacheData");
m_vk.getPipelineExecutableInternalRepresentationsKHR = (GetPipelineExecutableInternalRepresentationsKHRFunc) GET_PROC_ADDR("vkGetPipelineExecutableInternalRepresentationsKHR");
m_vk.getPipelineExecutablePropertiesKHR = (GetPipelineExecutablePropertiesKHRFunc) GET_PROC_ADDR("vkGetPipelineExecutablePropertiesKHR");
m_vk.getPipelineExecutableStatisticsKHR = (GetPipelineExecutableStatisticsKHRFunc) GET_PROC_ADDR("vkGetPipelineExecutableStatisticsKHR");
m_vk.getPipelineIndirectDeviceAddressNV = (GetPipelineIndirectDeviceAddressNVFunc) GET_PROC_ADDR("vkGetPipelineIndirectDeviceAddressNV");
m_vk.getPipelineIndirectMemoryRequirementsNV = (GetPipelineIndirectMemoryRequirementsNVFunc) GET_PROC_ADDR("vkGetPipelineIndirectMemoryRequirementsNV");
m_vk.getPipelineKeyKHR = (GetPipelineKeyKHRFunc) GET_PROC_ADDR("vkGetPipelineKeyKHR");
m_vk.getPipelinePropertiesEXT = (GetPipelinePropertiesEXTFunc) GET_PROC_ADDR("vkGetPipelinePropertiesEXT");
if (usedApiVersion >= VK_MAKE_API_VERSION(0, 1, 3, 0))
    m_vk.getPrivateData = (GetPrivateDataFunc) GET_PROC_ADDR("vkGetPrivateData");
if (!m_vk.getPrivateData)
    m_vk.getPrivateData = (GetPrivateDataFunc) GET_PROC_ADDR("vkGetPrivateDataEXT");
m_vk.getQueryPoolResults = (GetQueryPoolResultsFunc) GET_PROC_ADDR("vkGetQueryPoolResults");
m_vk.getQueueCheckpointData2NV = (GetQueueCheckpointData2NVFunc) GET_PROC_ADDR("vkGetQueueCheckpointData2NV");
m_vk.getQueueCheckpointDataNV = (GetQueueCheckpointDataNVFunc) GET_PROC_ADDR("vkGetQueueCheckpointDataNV");
m_vk.getRayTracingCaptureReplayShaderGroupHandlesKHR = (GetRayTracingCaptureReplayShaderGroupHandlesKHRFunc) GET_PROC_ADDR("vkGetRayTracingCaptureReplayShaderGroupHandlesKHR");
m_vk.getRayTracingShaderGroupHandlesKHR = (GetRayTracingShaderGroupHandlesKHRFunc) GET_PROC_ADDR("vkGetRayTracingShaderGroupHandlesKHR");
if (!m_vk.getRayTracingShaderGroupHandlesKHR)
    m_vk.getRayTracingShaderGroupHandlesKHR = (GetRayTracingShaderGroupHandlesKHRFunc) GET_PROC_ADDR("vkGetRayTracingShaderGroupHandlesNV");
m_vk.getRayTracingShaderGroupStackSizeKHR = (GetRayTracingShaderGroupStackSizeKHRFunc) GET_PROC_ADDR("vkGetRayTracingShaderGroupStackSizeKHR");
m_vk.getRefreshCycleDurationGOOGLE = (GetRefreshCycleDurationGOOGLEFunc) GET_PROC_ADDR("vkGetRefreshCycleDurationGOOGLE");
m_vk.getRenderAreaGranularity = (GetRenderAreaGranularityFunc) GET_PROC_ADDR("vkGetRenderAreaGranularity");
if (usedApiVersion >= VK_MAKE_API_VERSION(0, 1, 4, 0))
    m_vk.getRenderingAreaGranularity = (GetRenderingAreaGranularityFunc) GET_PROC_ADDR("vkGetRenderingAreaGranularity");
if (!m_vk.getRenderingAreaGranularity)
    m_vk.getRenderingAreaGranularity = (GetRenderingAreaGranularityFunc) GET_PROC_ADDR("vkGetRenderingAreaGranularityKHR");
m_vk.getSamplerOpaqueCaptureDescriptorDataEXT = (GetSamplerOpaqueCaptureDescriptorDataEXTFunc) GET_PROC_ADDR("vkGetSamplerOpaqueCaptureDescriptorDataEXT");
m_vk.getScreenBufferPropertiesQNX = (GetScreenBufferPropertiesQNXFunc) GET_PROC_ADDR("vkGetScreenBufferPropertiesQNX");
if (usedApiVersion >= VK_MAKE_API_VERSION(0, 1, 2, 0))
    m_vk.getSemaphoreCounterValue = (GetSemaphoreCounterValueFunc) GET_PROC_ADDR("vkGetSemaphoreCounterValue");
if (!m_vk.getSemaphoreCounterValue)
    m_vk.getSemaphoreCounterValue = (GetSemaphoreCounterValueFunc) GET_PROC_ADDR("vkGetSemaphoreCounterValueKHR");
m_vk.getSemaphoreFdKHR = (GetSemaphoreFdKHRFunc) GET_PROC_ADDR("vkGetSemaphoreFdKHR");
m_vk.getSemaphoreWin32HandleKHR = (GetSemaphoreWin32HandleKHRFunc) GET_PROC_ADDR("vkGetSemaphoreWin32HandleKHR");
m_vk.getSemaphoreZirconHandleFUCHSIA = (GetSemaphoreZirconHandleFUCHSIAFunc) GET_PROC_ADDR("vkGetSemaphoreZirconHandleFUCHSIA");
m_vk.getShaderBinaryDataEXT = (GetShaderBinaryDataEXTFunc) GET_PROC_ADDR("vkGetShaderBinaryDataEXT");
m_vk.getShaderInfoAMD = (GetShaderInfoAMDFunc) GET_PROC_ADDR("vkGetShaderInfoAMD");
m_vk.getShaderModuleCreateInfoIdentifierEXT = (GetShaderModuleCreateInfoIdentifierEXTFunc) GET_PROC_ADDR("vkGetShaderModuleCreateInfoIdentifierEXT");
m_vk.getShaderModuleIdentifierEXT = (GetShaderModuleIdentifierEXTFunc) GET_PROC_ADDR("vkGetShaderModuleIdentifierEXT");
m_vk.getSwapchainCounterEXT = (GetSwapchainCounterEXTFunc) GET_PROC_ADDR("vkGetSwapchainCounterEXT");
m_vk.getSwapchainGrallocUsageOHOS = (GetSwapchainGrallocUsageOHOSFunc) GET_PROC_ADDR("vkGetSwapchainGrallocUsageOHOS");
m_vk.getSwapchainImagesKHR = (GetSwapchainImagesKHRFunc) GET_PROC_ADDR("vkGetSwapchainImagesKHR");
m_vk.getSwapchainStatusKHR = (GetSwapchainStatusKHRFunc) GET_PROC_ADDR("vkGetSwapchainStatusKHR");
m_vk.getTensorMemoryRequirementsARM = (GetTensorMemoryRequirementsARMFunc) GET_PROC_ADDR("vkGetTensorMemoryRequirementsARM");
m_vk.getTensorOpaqueCaptureDescriptorDataARM = (GetTensorOpaqueCaptureDescriptorDataARMFunc) GET_PROC_ADDR("vkGetTensorOpaqueCaptureDescriptorDataARM");
m_vk.getTensorViewOpaqueCaptureDescriptorDataARM = (GetTensorViewOpaqueCaptureDescriptorDataARMFunc) GET_PROC_ADDR("vkGetTensorViewOpaqueCaptureDescriptorDataARM");
m_vk.getValidationCacheDataEXT = (GetValidationCacheDataEXTFunc) GET_PROC_ADDR("vkGetValidationCacheDataEXT");
m_vk.getVideoSessionMemoryRequirementsKHR = (GetVideoSessionMemoryRequirementsKHRFunc) GET_PROC_ADDR("vkGetVideoSessionMemoryRequirementsKHR");
m_vk.importFenceFdKHR = (ImportFenceFdKHRFunc) GET_PROC_ADDR("vkImportFenceFdKHR");
m_vk.importFenceWin32HandleKHR = (ImportFenceWin32HandleKHRFunc) GET_PROC_ADDR("vkImportFenceWin32HandleKHR");
m_vk.importSemaphoreFdKHR = (ImportSemaphoreFdKHRFunc) GET_PROC_ADDR("vkImportSemaphoreFdKHR");
m_vk.importSemaphoreWin32HandleKHR = (ImportSemaphoreWin32HandleKHRFunc) GET_PROC_ADDR("vkImportSemaphoreWin32HandleKHR");
m_vk.importSemaphoreZirconHandleFUCHSIA = (ImportSemaphoreZirconHandleFUCHSIAFunc) GET_PROC_ADDR("vkImportSemaphoreZirconHandleFUCHSIA");
m_vk.initializePerformanceApiINTEL = (InitializePerformanceApiINTELFunc) GET_PROC_ADDR("vkInitializePerformanceApiINTEL");
m_vk.invalidateMappedMemoryRanges = (InvalidateMappedMemoryRangesFunc) GET_PROC_ADDR("vkInvalidateMappedMemoryRanges");
m_vk.latencySleepNV = (LatencySleepNVFunc) GET_PROC_ADDR("vkLatencySleepNV");
m_vk.mapMemory = (MapMemoryFunc) GET_PROC_ADDR("vkMapMemory");
if (usedApiVersion >= VK_MAKE_API_VERSION(0, 1, 4, 0))
    m_vk.mapMemory2 = (MapMemory2Func) GET_PROC_ADDR("vkMapMemory2");
if (!m_vk.mapMemory2)
    m_vk.mapMemory2 = (MapMemory2Func) GET_PROC_ADDR("vkMapMemory2KHR");
m_vk.mergePipelineCaches = (MergePipelineCachesFunc) GET_PROC_ADDR("vkMergePipelineCaches");
m_vk.mergeValidationCachesEXT = (MergeValidationCachesEXTFunc) GET_PROC_ADDR("vkMergeValidationCachesEXT");
m_vk.queueBeginDebugUtilsLabelEXT = (QueueBeginDebugUtilsLabelEXTFunc) GET_PROC_ADDR("vkQueueBeginDebugUtilsLabelEXT");
m_vk.queueBindSparse = (QueueBindSparseFunc) GET_PROC_ADDR("vkQueueBindSparse");
m_vk.queueEndDebugUtilsLabelEXT = (QueueEndDebugUtilsLabelEXTFunc) GET_PROC_ADDR("vkQueueEndDebugUtilsLabelEXT");
m_vk.queueInsertDebugUtilsLabelEXT = (QueueInsertDebugUtilsLabelEXTFunc) GET_PROC_ADDR("vkQueueInsertDebugUtilsLabelEXT");
m_vk.queueNotifyOutOfBandNV = (QueueNotifyOutOfBandNVFunc) GET_PROC_ADDR("vkQueueNotifyOutOfBandNV");
m_vk.queuePresentKHR = (QueuePresentKHRFunc) GET_PROC_ADDR("vkQueuePresentKHR");
m_vk.queueSetPerformanceConfigurationINTEL = (QueueSetPerformanceConfigurationINTELFunc) GET_PROC_ADDR("vkQueueSetPerformanceConfigurationINTEL");
m_vk.queueSignalReleaseImageOHOS = (QueueSignalReleaseImageOHOSFunc) GET_PROC_ADDR("vkQueueSignalReleaseImageOHOS");
m_vk.queueSubmit = (QueueSubmitFunc) GET_PROC_ADDR("vkQueueSubmit");
if (usedApiVersion >= VK_MAKE_API_VERSION(0, 1, 3, 0))
    m_vk.queueSubmit2 = (QueueSubmit2Func) GET_PROC_ADDR("vkQueueSubmit2");
if (!m_vk.queueSubmit2)
    m_vk.queueSubmit2 = (QueueSubmit2Func) GET_PROC_ADDR("vkQueueSubmit2KHR");
m_vk.queueWaitIdle = (QueueWaitIdleFunc) GET_PROC_ADDR("vkQueueWaitIdle");
m_vk.registerDeviceEventEXT = (RegisterDeviceEventEXTFunc) GET_PROC_ADDR("vkRegisterDeviceEventEXT");
m_vk.registerDisplayEventEXT = (RegisterDisplayEventEXTFunc) GET_PROC_ADDR("vkRegisterDisplayEventEXT");
m_vk.releaseCapturedPipelineDataKHR = (ReleaseCapturedPipelineDataKHRFunc) GET_PROC_ADDR("vkReleaseCapturedPipelineDataKHR");
m_vk.releaseFullScreenExclusiveModeEXT = (ReleaseFullScreenExclusiveModeEXTFunc) GET_PROC_ADDR("vkReleaseFullScreenExclusiveModeEXT");
m_vk.releasePerformanceConfigurationINTEL = (ReleasePerformanceConfigurationINTELFunc) GET_PROC_ADDR("vkReleasePerformanceConfigurationINTEL");
m_vk.releaseProfilingLockKHR = (ReleaseProfilingLockKHRFunc) GET_PROC_ADDR("vkReleaseProfilingLockKHR");
m_vk.releaseSwapchainImagesKHR = (ReleaseSwapchainImagesKHRFunc) GET_PROC_ADDR("vkReleaseSwapchainImagesKHR");
if (!m_vk.releaseSwapchainImagesKHR)
    m_vk.releaseSwapchainImagesKHR = (ReleaseSwapchainImagesKHRFunc) GET_PROC_ADDR("vkReleaseSwapchainImagesEXT");
m_vk.resetCommandBuffer = (ResetCommandBufferFunc) GET_PROC_ADDR("vkResetCommandBuffer");
m_vk.resetCommandPool = (ResetCommandPoolFunc) GET_PROC_ADDR("vkResetCommandPool");
m_vk.resetDescriptorPool = (ResetDescriptorPoolFunc) GET_PROC_ADDR("vkResetDescriptorPool");
m_vk.resetEvent = (ResetEventFunc) GET_PROC_ADDR("vkResetEvent");
m_vk.resetFences = (ResetFencesFunc) GET_PROC_ADDR("vkResetFences");
if (usedApiVersion >= VK_MAKE_API_VERSION(0, 1, 2, 0))
    m_vk.resetQueryPool = (ResetQueryPoolFunc) GET_PROC_ADDR("vkResetQueryPool");
if (!m_vk.resetQueryPool)
    m_vk.resetQueryPool = (ResetQueryPoolFunc) GET_PROC_ADDR("vkResetQueryPoolEXT");
m_vk.setBufferCollectionBufferConstraintsFUCHSIA = (SetBufferCollectionBufferConstraintsFUCHSIAFunc) GET_PROC_ADDR("vkSetBufferCollectionBufferConstraintsFUCHSIA");
m_vk.setBufferCollectionImageConstraintsFUCHSIA = (SetBufferCollectionImageConstraintsFUCHSIAFunc) GET_PROC_ADDR("vkSetBufferCollectionImageConstraintsFUCHSIA");
m_vk.setDebugUtilsObjectNameEXT = (SetDebugUtilsObjectNameEXTFunc) GET_PROC_ADDR("vkSetDebugUtilsObjectNameEXT");
m_vk.setDebugUtilsObjectTagEXT = (SetDebugUtilsObjectTagEXTFunc) GET_PROC_ADDR("vkSetDebugUtilsObjectTagEXT");
m_vk.setDeviceMemoryPriorityEXT = (SetDeviceMemoryPriorityEXTFunc) GET_PROC_ADDR("vkSetDeviceMemoryPriorityEXT");
m_vk.setEvent = (SetEventFunc) GET_PROC_ADDR("vkSetEvent");
m_vk.setHdrMetadataEXT = (SetHdrMetadataEXTFunc) GET_PROC_ADDR("vkSetHdrMetadataEXT");
m_vk.setLatencyMarkerNV = (SetLatencyMarkerNVFunc) GET_PROC_ADDR("vkSetLatencyMarkerNV");
m_vk.setLatencySleepModeNV = (SetLatencySleepModeNVFunc) GET_PROC_ADDR("vkSetLatencySleepModeNV");
m_vk.setLocalDimmingAMD = (SetLocalDimmingAMDFunc) GET_PROC_ADDR("vkSetLocalDimmingAMD");
if (usedApiVersion >= VK_MAKE_API_VERSION(0, 1, 3, 0))
    m_vk.setPrivateData = (SetPrivateDataFunc) GET_PROC_ADDR("vkSetPrivateData");
if (!m_vk.setPrivateData)
    m_vk.setPrivateData = (SetPrivateDataFunc) GET_PROC_ADDR("vkSetPrivateDataEXT");
if (usedApiVersion >= VK_MAKE_API_VERSION(0, 1, 2, 0))
    m_vk.signalSemaphore = (SignalSemaphoreFunc) GET_PROC_ADDR("vkSignalSemaphore");
if (!m_vk.signalSemaphore)
    m_vk.signalSemaphore = (SignalSemaphoreFunc) GET_PROC_ADDR("vkSignalSemaphoreKHR");
if (usedApiVersion >= VK_MAKE_API_VERSION(0, 1, 4, 0))
    m_vk.transitionImageLayout = (TransitionImageLayoutFunc) GET_PROC_ADDR("vkTransitionImageLayout");
if (!m_vk.transitionImageLayout)
    m_vk.transitionImageLayout = (TransitionImageLayoutFunc) GET_PROC_ADDR("vkTransitionImageLayoutEXT");
if (usedApiVersion >= VK_MAKE_API_VERSION(0, 1, 1, 0))
    m_vk.trimCommandPool = (TrimCommandPoolFunc) GET_PROC_ADDR("vkTrimCommandPool");
if (!m_vk.trimCommandPool)
    m_vk.trimCommandPool = (TrimCommandPoolFunc) GET_PROC_ADDR("vkTrimCommandPoolKHR");
m_vk.uninitializePerformanceApiINTEL = (UninitializePerformanceApiINTELFunc) GET_PROC_ADDR("vkUninitializePerformanceApiINTEL");
m_vk.unmapMemory = (UnmapMemoryFunc) GET_PROC_ADDR("vkUnmapMemory");
if (usedApiVersion >= VK_MAKE_API_VERSION(0, 1, 4, 0))
    m_vk.unmapMemory2 = (UnmapMemory2Func) GET_PROC_ADDR("vkUnmapMemory2");
if (!m_vk.unmapMemory2)
    m_vk.unmapMemory2 = (UnmapMemory2Func) GET_PROC_ADDR("vkUnmapMemory2KHR");
if (usedApiVersion >= VK_MAKE_API_VERSION(0, 1, 1, 0))
    m_vk.updateDescriptorSetWithTemplate = (UpdateDescriptorSetWithTemplateFunc) GET_PROC_ADDR("vkUpdateDescriptorSetWithTemplate");
if (!m_vk.updateDescriptorSetWithTemplate)
    m_vk.updateDescriptorSetWithTemplate = (UpdateDescriptorSetWithTemplateFunc) GET_PROC_ADDR("vkUpdateDescriptorSetWithTemplateKHR");
m_vk.updateDescriptorSets = (UpdateDescriptorSetsFunc) GET_PROC_ADDR("vkUpdateDescriptorSets");
m_vk.updateIndirectExecutionSetPipelineEXT = (UpdateIndirectExecutionSetPipelineEXTFunc) GET_PROC_ADDR("vkUpdateIndirectExecutionSetPipelineEXT");
m_vk.updateIndirectExecutionSetShaderEXT = (UpdateIndirectExecutionSetShaderEXTFunc) GET_PROC_ADDR("vkUpdateIndirectExecutionSetShaderEXT");
m_vk.updateVideoSessionParametersKHR = (UpdateVideoSessionParametersKHRFunc) GET_PROC_ADDR("vkUpdateVideoSessionParametersKHR");
m_vk.waitForFences = (WaitForFencesFunc) GET_PROC_ADDR("vkWaitForFences");
m_vk.waitForPresent2KHR = (WaitForPresent2KHRFunc) GET_PROC_ADDR("vkWaitForPresent2KHR");
m_vk.waitForPresentKHR = (WaitForPresentKHRFunc) GET_PROC_ADDR("vkWaitForPresentKHR");
if (usedApiVersion >= VK_MAKE_API_VERSION(0, 1, 2, 0))
    m_vk.waitSemaphores = (WaitSemaphoresFunc) GET_PROC_ADDR("vkWaitSemaphores");
if (!m_vk.waitSemaphores)
    m_vk.waitSemaphores = (WaitSemaphoresFunc) GET_PROC_ADDR("vkWaitSemaphoresKHR");
m_vk.writeAccelerationStructuresPropertiesKHR = (WriteAccelerationStructuresPropertiesKHRFunc) GET_PROC_ADDR("vkWriteAccelerationStructuresPropertiesKHR");
m_vk.writeMicromapsPropertiesEXT = (WriteMicromapsPropertiesEXTFunc) GET_PROC_ADDR("vkWriteMicromapsPropertiesEXT");
