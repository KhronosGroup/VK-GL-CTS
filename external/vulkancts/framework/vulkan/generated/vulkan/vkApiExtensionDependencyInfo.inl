/* WARNING: This is auto-generated file. Do not modify, since changes will
 * be lost! Modify the generating script instead.
 * This file was generated by /scripts/gen_framework.py
 */

using namespace tcu;
using ExtPropVect = std::vector<vk::VkExtensionProperties>;
using IsSupportedFun = bool (*)(const tcu::UVec2&, const ExtPropVect&, const ExtPropVect&);
using DependencyCheckVect = std::vector<std::pair<const char*, IsSupportedFun> >;

bool isCompatibile(uint32_t major, uint32_t minor, const tcu::UVec2& testedApiVersion)
{
	// return true when tested api version is greater
	// or equal to version represented by two uints
	if (major == testedApiVersion.x())
		return minor <= testedApiVersion.y();
	return major < testedApiVersion.x();
}

bool isSupported(const ExtPropVect& extensions, const char* ext)
{
	return isExtensionStructSupported(extensions, vk::RequiredExtension(ext));
}

bool check_VK_KHR_display(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vDEP);

	if (!isSupported(vIEP, "VK_KHR_display"))
		return true;

	// depends attribute in xml: VK_KHR_surface
	return isSupported(vIEP, "VK_KHR_surface");
}

bool check_VK_KHR_xlib_surface(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vDEP);

	if (!isSupported(vIEP, "VK_KHR_xlib_surface"))
		return true;

	// depends attribute in xml: VK_KHR_surface
	return isSupported(vIEP, "VK_KHR_surface");
}

bool check_VK_KHR_xcb_surface(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vDEP);

	if (!isSupported(vIEP, "VK_KHR_xcb_surface"))
		return true;

	// depends attribute in xml: VK_KHR_surface
	return isSupported(vIEP, "VK_KHR_surface");
}

bool check_VK_KHR_wayland_surface(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vDEP);

	if (!isSupported(vIEP, "VK_KHR_wayland_surface"))
		return true;

	// depends attribute in xml: VK_KHR_surface
	return isSupported(vIEP, "VK_KHR_surface");
}

bool check_VK_KHR_android_surface(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vDEP);

	if (!isSupported(vIEP, "VK_KHR_android_surface"))
		return true;

	// depends attribute in xml: VK_KHR_surface
	return isSupported(vIEP, "VK_KHR_surface");
}

bool check_VK_KHR_win32_surface(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vDEP);

	if (!isSupported(vIEP, "VK_KHR_win32_surface"))
		return true;

	// depends attribute in xml: VK_KHR_surface
	return isSupported(vIEP, "VK_KHR_surface");
}

bool check_VK_GGP_stream_descriptor_surface(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vDEP);

	if (!isSupported(vIEP, "VK_GGP_stream_descriptor_surface"))
		return true;

	// depends attribute in xml: VK_KHR_surface
	return isSupported(vIEP, "VK_KHR_surface");
}

bool check_VK_NN_vi_surface(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vDEP);

	if (!isSupported(vIEP, "VK_NN_vi_surface"))
		return true;

	// depends attribute in xml: VK_KHR_surface
	return isSupported(vIEP, "VK_KHR_surface");
}

bool check_VK_KHR_external_memory_capabilities(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	if (isCompatibile(1, 1, v))
		return true;

	DE_UNREF(vDEP);

	if (!isSupported(vIEP, "VK_KHR_external_memory_capabilities"))
		return true;

	// depends attribute in xml: VK_KHR_get_physical_device_properties2,VK_VERSION_1_1
	return (isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"));
}

bool check_VK_KHR_external_semaphore_capabilities(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	if (isCompatibile(1, 1, v))
		return true;

	DE_UNREF(vDEP);

	if (!isSupported(vIEP, "VK_KHR_external_semaphore_capabilities"))
		return true;

	// depends attribute in xml: VK_KHR_get_physical_device_properties2,VK_VERSION_1_1
	return (isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"));
}

bool check_VK_EXT_direct_mode_display(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vDEP);

	if (!isSupported(vIEP, "VK_EXT_direct_mode_display"))
		return true;

	// depends attribute in xml: VK_KHR_display
	return isSupported(vIEP, "VK_KHR_display");
}

bool check_VK_EXT_acquire_xlib_display(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vDEP);

	if (!isSupported(vIEP, "VK_EXT_acquire_xlib_display"))
		return true;

	// depends attribute in xml: VK_EXT_direct_mode_display
	return isSupported(vIEP, "VK_EXT_direct_mode_display");
}

bool check_VK_EXT_display_surface_counter(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vDEP);

	if (!isSupported(vIEP, "VK_EXT_display_surface_counter"))
		return true;

	// depends attribute in xml: VK_KHR_display
	return isSupported(vIEP, "VK_KHR_display");
}

bool check_VK_EXT_swapchain_colorspace(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vDEP);

	if (!isSupported(vIEP, "VK_EXT_swapchain_colorspace"))
		return true;

	// depends attribute in xml: VK_KHR_surface
	return isSupported(vIEP, "VK_KHR_surface");
}

bool check_VK_KHR_external_fence_capabilities(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	if (isCompatibile(1, 1, v))
		return true;

	DE_UNREF(vDEP);

	if (!isSupported(vIEP, "VK_KHR_external_fence_capabilities"))
		return true;

	// depends attribute in xml: VK_KHR_get_physical_device_properties2,VK_VERSION_1_1
	return (isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"));
}

bool check_VK_KHR_get_surface_capabilities2(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vDEP);

	if (!isSupported(vIEP, "VK_KHR_get_surface_capabilities2"))
		return true;

	// depends attribute in xml: VK_KHR_surface
	return isSupported(vIEP, "VK_KHR_surface");
}

bool check_VK_KHR_get_display_properties2(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vDEP);

	if (!isSupported(vIEP, "VK_KHR_get_display_properties2"))
		return true;

	// depends attribute in xml: VK_KHR_display
	return isSupported(vIEP, "VK_KHR_display");
}

bool check_VK_MVK_ios_surface(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vDEP);

	if (!isSupported(vIEP, "VK_MVK_ios_surface"))
		return true;

	// depends attribute in xml: VK_KHR_surface
	return isSupported(vIEP, "VK_KHR_surface");
}

bool check_VK_MVK_macos_surface(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vDEP);

	if (!isSupported(vIEP, "VK_MVK_macos_surface"))
		return true;

	// depends attribute in xml: VK_KHR_surface
	return isSupported(vIEP, "VK_KHR_surface");
}

bool check_VK_FUCHSIA_imagepipe_surface(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vDEP);

	if (!isSupported(vIEP, "VK_FUCHSIA_imagepipe_surface"))
		return true;

	// depends attribute in xml: VK_KHR_surface
	return isSupported(vIEP, "VK_KHR_surface");
}

bool check_VK_EXT_metal_surface(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vDEP);

	if (!isSupported(vIEP, "VK_EXT_metal_surface"))
		return true;

	// depends attribute in xml: VK_KHR_surface
	return isSupported(vIEP, "VK_KHR_surface");
}

bool check_VK_KHR_surface_protected_capabilities(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vDEP);

	if (!isSupported(vIEP, "VK_KHR_surface_protected_capabilities"))
		return true;

	// depends attribute in xml: VK_VERSION_1_1+VK_KHR_get_surface_capabilities2
	return isCompatibile(1, 1, v) && isSupported(vIEP, "VK_KHR_get_surface_capabilities2");
}

bool check_VK_EXT_headless_surface(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vDEP);

	if (!isSupported(vIEP, "VK_EXT_headless_surface"))
		return true;

	// depends attribute in xml: VK_KHR_surface
	return isSupported(vIEP, "VK_KHR_surface");
}

bool check_VK_EXT_surface_maintenance1(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vDEP);

	if (!isSupported(vIEP, "VK_EXT_surface_maintenance1"))
		return true;

	// depends attribute in xml: VK_KHR_surface+VK_KHR_get_surface_capabilities2
	return isSupported(vIEP, "VK_KHR_surface") && isSupported(vIEP, "VK_KHR_get_surface_capabilities2");
}

bool check_VK_EXT_acquire_drm_display(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vDEP);

	if (!isSupported(vIEP, "VK_EXT_acquire_drm_display"))
		return true;

	// depends attribute in xml: VK_EXT_direct_mode_display
	return isSupported(vIEP, "VK_EXT_direct_mode_display");
}

bool check_VK_QNX_screen_surface(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vDEP);

	if (!isSupported(vIEP, "VK_QNX_screen_surface"))
		return true;

	// depends attribute in xml: VK_KHR_surface
	return isSupported(vIEP, "VK_KHR_surface");
}

bool check_VK_GOOGLE_surfaceless_query(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vDEP);

	if (!isSupported(vIEP, "VK_GOOGLE_surfaceless_query"))
		return true;

	// depends attribute in xml: VK_KHR_surface
	return isSupported(vIEP, "VK_KHR_surface");
}

static const DependencyCheckVect instanceExtensionDependencies
{
	std::make_pair("VK_KHR_display",							&check_VK_KHR_display),
	std::make_pair("VK_KHR_xlib_surface",						&check_VK_KHR_xlib_surface),
	std::make_pair("VK_KHR_xcb_surface",						&check_VK_KHR_xcb_surface),
	std::make_pair("VK_KHR_wayland_surface",					&check_VK_KHR_wayland_surface),
	std::make_pair("VK_KHR_android_surface",					&check_VK_KHR_android_surface),
	std::make_pair("VK_KHR_win32_surface",						&check_VK_KHR_win32_surface),
	std::make_pair("VK_GGP_stream_descriptor_surface",			&check_VK_GGP_stream_descriptor_surface),
	std::make_pair("VK_NN_vi_surface",							&check_VK_NN_vi_surface),
	std::make_pair("VK_KHR_external_memory_capabilities",		&check_VK_KHR_external_memory_capabilities),
	std::make_pair("VK_KHR_external_semaphore_capabilities",	&check_VK_KHR_external_semaphore_capabilities),
	std::make_pair("VK_EXT_direct_mode_display",				&check_VK_EXT_direct_mode_display),
	std::make_pair("VK_EXT_acquire_xlib_display",				&check_VK_EXT_acquire_xlib_display),
	std::make_pair("VK_EXT_display_surface_counter",			&check_VK_EXT_display_surface_counter),
	std::make_pair("VK_EXT_swapchain_colorspace",				&check_VK_EXT_swapchain_colorspace),
	std::make_pair("VK_KHR_external_fence_capabilities",		&check_VK_KHR_external_fence_capabilities),
	std::make_pair("VK_KHR_get_surface_capabilities2",			&check_VK_KHR_get_surface_capabilities2),
	std::make_pair("VK_KHR_get_display_properties2",			&check_VK_KHR_get_display_properties2),
	std::make_pair("VK_MVK_ios_surface",						&check_VK_MVK_ios_surface),
	std::make_pair("VK_MVK_macos_surface",						&check_VK_MVK_macos_surface),
	std::make_pair("VK_FUCHSIA_imagepipe_surface",				&check_VK_FUCHSIA_imagepipe_surface),
	std::make_pair("VK_EXT_metal_surface",						&check_VK_EXT_metal_surface),
	std::make_pair("VK_KHR_surface_protected_capabilities",		&check_VK_KHR_surface_protected_capabilities),
	std::make_pair("VK_EXT_headless_surface",					&check_VK_EXT_headless_surface),
	std::make_pair("VK_EXT_surface_maintenance1",				&check_VK_EXT_surface_maintenance1),
	std::make_pair("VK_EXT_acquire_drm_display",				&check_VK_EXT_acquire_drm_display),
	std::make_pair("VK_QNX_screen_surface",						&check_VK_QNX_screen_surface),
	std::make_pair("VK_GOOGLE_surfaceless_query",				&check_VK_GOOGLE_surfaceless_query),
};

bool check_VK_KHR_swapchain(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_KHR_swapchain"))
		return true;

	// depends attribute in xml: VK_KHR_surface
	return isSupported(vIEP, "VK_KHR_surface");
}

bool check_VK_KHR_display_swapchain(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_KHR_display_swapchain"))
		return true;

	// depends attribute in xml: VK_KHR_swapchain+VK_KHR_display
	return isSupported(vDEP, "VK_KHR_swapchain") && isSupported(vIEP, "VK_KHR_display");
}

bool check_VK_EXT_debug_marker(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_EXT_debug_marker"))
		return true;

	// depends attribute in xml: VK_EXT_debug_report
	return isSupported(vIEP, "VK_EXT_debug_report");
}

bool check_VK_KHR_video_queue(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_KHR_video_queue"))
		return true;

	// depends attribute in xml: (VK_VERSION_1_1+VK_KHR_synchronization2),VK_VERSION_1_3
	return (isCompatibile(1, 1, v) && (isCompatibile(1, 3, v) || isSupported(vDEP, "VK_KHR_synchronization2")));
}

bool check_VK_KHR_video_decode_queue(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_KHR_video_decode_queue"))
		return true;

	// depends attribute in xml: VK_KHR_video_queue+(VK_KHR_synchronization2,VK_VERSION_1_3)
	return isSupported(vDEP, "VK_KHR_video_queue") && ((isCompatibile(1, 3, v) || isSupported(vDEP, "VK_KHR_synchronization2")));
}

bool check_VK_EXT_transform_feedback(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_EXT_transform_feedback"))
		return true;

	// depends attribute in xml: VK_KHR_get_physical_device_properties2,VK_VERSION_1_1
	return (isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"));
}

bool check_VK_KHR_video_encode_h264(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_KHR_video_encode_h264"))
		return true;

	// depends attribute in xml: VK_KHR_video_encode_queue
	return isSupported(vDEP, "VK_KHR_video_encode_queue");
}

bool check_VK_KHR_video_encode_h265(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_KHR_video_encode_h265"))
		return true;

	// depends attribute in xml: VK_KHR_video_encode_queue
	return isSupported(vDEP, "VK_KHR_video_encode_queue");
}

bool check_VK_KHR_video_decode_h264(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_KHR_video_decode_h264"))
		return true;

	// depends attribute in xml: VK_KHR_video_decode_queue
	return isSupported(vDEP, "VK_KHR_video_decode_queue");
}

bool check_VK_AMD_texture_gather_bias_lod(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_AMD_texture_gather_bias_lod"))
		return true;

	// depends attribute in xml: VK_KHR_get_physical_device_properties2,VK_VERSION_1_1
	return (isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"));
}

bool check_VK_KHR_dynamic_rendering(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	if (isCompatibile(1, 3, v))
		return true;

	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_KHR_dynamic_rendering"))
		return true;

	// depends attribute in xml: ((VK_KHR_get_physical_device_properties2,VK_VERSION_1_1)+VK_KHR_depth_stencil_resolve),VK_VERSION_1_2
	return (((isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"))) && (isCompatibile(1, 2, v) || isSupported(vDEP, "VK_KHR_depth_stencil_resolve")));
}

bool check_VK_NV_corner_sampled_image(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_NV_corner_sampled_image"))
		return true;

	// depends attribute in xml: VK_KHR_get_physical_device_properties2,VK_VERSION_1_1
	return (isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"));
}

bool check_VK_KHR_multiview(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	if (isCompatibile(1, 1, v))
		return true;

	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_KHR_multiview"))
		return true;

	// depends attribute in xml: VK_KHR_get_physical_device_properties2,VK_VERSION_1_1
	return (isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"));
}

bool check_VK_NV_external_memory(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_NV_external_memory"))
		return true;

	// depends attribute in xml: VK_NV_external_memory_capabilities
	return isSupported(vIEP, "VK_NV_external_memory_capabilities");
}

bool check_VK_NV_external_memory_win32(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_NV_external_memory_win32"))
		return true;

	// depends attribute in xml: VK_NV_external_memory
	return isSupported(vDEP, "VK_NV_external_memory");
}

bool check_VK_NV_win32_keyed_mutex(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_NV_win32_keyed_mutex"))
		return true;

	// depends attribute in xml: VK_NV_external_memory_win32
	return isSupported(vDEP, "VK_NV_external_memory_win32");
}

bool check_VK_KHR_device_group(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	if (isCompatibile(1, 1, v))
		return true;

	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_KHR_device_group"))
		return true;

	// depends attribute in xml: VK_KHR_device_group_creation
	return (isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_device_group_creation"));
}

bool check_VK_EXT_texture_compression_astc_hdr(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	if (isCompatibile(1, 3, v))
		return true;

	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_EXT_texture_compression_astc_hdr"))
		return true;

	// depends attribute in xml: VK_KHR_get_physical_device_properties2,VK_VERSION_1_1
	return (isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"));
}

bool check_VK_EXT_astc_decode_mode(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_EXT_astc_decode_mode"))
		return true;

	// depends attribute in xml: VK_KHR_get_physical_device_properties2,VK_VERSION_1_1
	return (isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"));
}

bool check_VK_EXT_pipeline_robustness(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_EXT_pipeline_robustness"))
		return true;

	// depends attribute in xml: VK_KHR_get_physical_device_properties2,VK_VERSION_1_1
	return (isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"));
}

bool check_VK_KHR_external_memory(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	if (isCompatibile(1, 1, v))
		return true;

	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_KHR_external_memory"))
		return true;

	// depends attribute in xml: VK_KHR_external_memory_capabilities,VK_VERSION_1_1
	return (isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_external_memory_capabilities"));
}

bool check_VK_KHR_external_memory_win32(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_KHR_external_memory_win32"))
		return true;

	// depends attribute in xml: VK_KHR_external_memory,VK_VERSION_1_1
	return (isCompatibile(1, 1, v) || isSupported(vDEP, "VK_KHR_external_memory"));
}

bool check_VK_KHR_external_memory_fd(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_KHR_external_memory_fd"))
		return true;

	// depends attribute in xml: VK_KHR_external_memory,VK_VERSION_1_1
	return (isCompatibile(1, 1, v) || isSupported(vDEP, "VK_KHR_external_memory"));
}

bool check_VK_KHR_win32_keyed_mutex(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_KHR_win32_keyed_mutex"))
		return true;

	// depends attribute in xml: VK_KHR_external_memory_win32
	return isSupported(vDEP, "VK_KHR_external_memory_win32");
}

bool check_VK_KHR_external_semaphore(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	if (isCompatibile(1, 1, v))
		return true;

	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_KHR_external_semaphore"))
		return true;

	// depends attribute in xml: VK_KHR_external_semaphore_capabilities
	return (isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_external_semaphore_capabilities"));
}

bool check_VK_KHR_external_semaphore_win32(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_KHR_external_semaphore_win32"))
		return true;

	// depends attribute in xml: VK_KHR_external_semaphore
	return (isCompatibile(1, 1, v) || isSupported(vDEP, "VK_KHR_external_semaphore"));
}

bool check_VK_KHR_external_semaphore_fd(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_KHR_external_semaphore_fd"))
		return true;

	// depends attribute in xml: VK_KHR_external_semaphore,VK_VERSION_1_1
	return (isCompatibile(1, 1, v) || isSupported(vDEP, "VK_KHR_external_semaphore"));
}

bool check_VK_KHR_push_descriptor(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_KHR_push_descriptor"))
		return true;

	// depends attribute in xml: VK_KHR_get_physical_device_properties2,VK_VERSION_1_1
	return (isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"));
}

bool check_VK_EXT_conditional_rendering(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_EXT_conditional_rendering"))
		return true;

	// depends attribute in xml: VK_KHR_get_physical_device_properties2,VK_VERSION_1_1
	return (isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"));
}

bool check_VK_KHR_shader_float16_int8(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	if (isCompatibile(1, 2, v))
		return true;

	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_KHR_shader_float16_int8"))
		return true;

	// depends attribute in xml: VK_KHR_get_physical_device_properties2,VK_VERSION_1_1
	return (isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"));
}

bool check_VK_KHR_16bit_storage(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	if (isCompatibile(1, 1, v))
		return true;

	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_KHR_16bit_storage"))
		return true;

	// depends attribute in xml: (VK_KHR_get_physical_device_properties2+VK_KHR_storage_buffer_storage_class),VK_VERSION_1_1
	return ((isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2")) && (isCompatibile(1, 1, v) || isSupported(vDEP, "VK_KHR_storage_buffer_storage_class")));
}

bool check_VK_KHR_incremental_present(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_KHR_incremental_present"))
		return true;

	// depends attribute in xml: VK_KHR_swapchain
	return isSupported(vDEP, "VK_KHR_swapchain");
}

bool check_VK_EXT_display_control(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_EXT_display_control"))
		return true;

	// depends attribute in xml: VK_EXT_display_surface_counter+VK_KHR_swapchain
	return isSupported(vIEP, "VK_EXT_display_surface_counter") && isSupported(vDEP, "VK_KHR_swapchain");
}

bool check_VK_GOOGLE_display_timing(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_GOOGLE_display_timing"))
		return true;

	// depends attribute in xml: VK_KHR_swapchain
	return isSupported(vDEP, "VK_KHR_swapchain");
}

bool check_VK_NVX_multiview_per_view_attributes(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_NVX_multiview_per_view_attributes"))
		return true;

	// depends attribute in xml: VK_KHR_multiview,VK_VERSION_1_1
	return (isCompatibile(1, 1, v) || isSupported(vDEP, "VK_KHR_multiview"));
}

bool check_VK_EXT_discard_rectangles(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_EXT_discard_rectangles"))
		return true;

	// depends attribute in xml: VK_KHR_get_physical_device_properties2,VK_VERSION_1_1
	return (isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"));
}

bool check_VK_EXT_conservative_rasterization(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_EXT_conservative_rasterization"))
		return true;

	// depends attribute in xml: VK_KHR_get_physical_device_properties2,VK_VERSION_1_1
	return (isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"));
}

bool check_VK_EXT_depth_clip_enable(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_EXT_depth_clip_enable"))
		return true;

	// depends attribute in xml: VK_KHR_get_physical_device_properties2,VK_VERSION_1_1
	return (isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"));
}

bool check_VK_EXT_hdr_metadata(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_EXT_hdr_metadata"))
		return true;

	// depends attribute in xml: VK_KHR_swapchain
	return isSupported(vDEP, "VK_KHR_swapchain");
}

bool check_VK_KHR_imageless_framebuffer(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	if (isCompatibile(1, 2, v))
		return true;

	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_KHR_imageless_framebuffer"))
		return true;

	// depends attribute in xml: (((VK_KHR_get_physical_device_properties2+VK_KHR_maintenance2),VK_VERSION_1_1)+VK_KHR_image_format_list),VK_VERSION_1_2
	return ((((isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2")) && (isCompatibile(1, 1, v) || isSupported(vDEP, "VK_KHR_maintenance2")))) && (isCompatibile(1, 2, v) || isSupported(vDEP, "VK_KHR_image_format_list")));
}

bool check_VK_KHR_create_renderpass2(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	if (isCompatibile(1, 2, v))
		return true;

	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_KHR_create_renderpass2"))
		return true;

	// depends attribute in xml: (VK_KHR_multiview+VK_KHR_maintenance2),VK_VERSION_1_1
	return ((isCompatibile(1, 1, v) || isSupported(vDEP, "VK_KHR_multiview")) && (isCompatibile(1, 1, v) || isSupported(vDEP, "VK_KHR_maintenance2")));
}

bool check_VK_IMG_relaxed_line_rasterization(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_IMG_relaxed_line_rasterization"))
		return true;

	// depends attribute in xml: VK_KHR_get_physical_device_properties2,VK_VERSION_1_1
	return (isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"));
}

bool check_VK_KHR_shared_presentable_image(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_KHR_shared_presentable_image"))
		return true;

	// depends attribute in xml: VK_KHR_swapchain+VK_KHR_get_surface_capabilities2+(VK_KHR_get_physical_device_properties2,VK_VERSION_1_1)
	return isSupported(vDEP, "VK_KHR_swapchain") && isSupported(vIEP, "VK_KHR_get_surface_capabilities2") && ((isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2")));
}

bool check_VK_KHR_external_fence(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	if (isCompatibile(1, 1, v))
		return true;

	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_KHR_external_fence"))
		return true;

	// depends attribute in xml: VK_KHR_external_fence_capabilities
	return (isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_external_fence_capabilities"));
}

bool check_VK_KHR_external_fence_win32(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_KHR_external_fence_win32"))
		return true;

	// depends attribute in xml: VK_KHR_external_fence
	return (isCompatibile(1, 1, v) || isSupported(vDEP, "VK_KHR_external_fence"));
}

bool check_VK_KHR_external_fence_fd(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_KHR_external_fence_fd"))
		return true;

	// depends attribute in xml: VK_KHR_external_fence,VK_VERSION_1_1
	return (isCompatibile(1, 1, v) || isSupported(vDEP, "VK_KHR_external_fence"));
}

bool check_VK_KHR_performance_query(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_KHR_performance_query"))
		return true;

	// depends attribute in xml: VK_KHR_get_physical_device_properties2,VK_VERSION_1_1
	return (isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"));
}

bool check_VK_KHR_variable_pointers(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	if (isCompatibile(1, 1, v))
		return true;

	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_KHR_variable_pointers"))
		return true;

	// depends attribute in xml: (VK_KHR_get_physical_device_properties2+VK_KHR_storage_buffer_storage_class),VK_VERSION_1_1
	return ((isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2")) && (isCompatibile(1, 1, v) || isSupported(vDEP, "VK_KHR_storage_buffer_storage_class")));
}

bool check_VK_EXT_external_memory_dma_buf(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_EXT_external_memory_dma_buf"))
		return true;

	// depends attribute in xml: VK_KHR_external_memory_fd
	return isSupported(vDEP, "VK_KHR_external_memory_fd");
}

bool check_VK_EXT_queue_family_foreign(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_EXT_queue_family_foreign"))
		return true;

	// depends attribute in xml: VK_KHR_external_memory,VK_VERSION_1_1
	return (isCompatibile(1, 1, v) || isSupported(vDEP, "VK_KHR_external_memory"));
}

bool check_VK_KHR_dedicated_allocation(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	if (isCompatibile(1, 1, v))
		return true;

	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_KHR_dedicated_allocation"))
		return true;

	// depends attribute in xml: VK_KHR_get_memory_requirements2,VK_VERSION_1_1
	return (isCompatibile(1, 1, v) || isSupported(vDEP, "VK_KHR_get_memory_requirements2"));
}

bool check_VK_ANDROID_external_memory_android_hardware_buffer(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_ANDROID_external_memory_android_hardware_buffer"))
		return true;

	// depends attribute in xml: ((VK_KHR_sampler_ycbcr_conversion+VK_KHR_external_memory+VK_KHR_dedicated_allocation),VK_VERSION_1_1)+VK_EXT_queue_family_foreign
	return (((isCompatibile(1, 1, v) || isSupported(vDEP, "VK_KHR_sampler_ycbcr_conversion")) && (isCompatibile(1, 1, v) || isSupported(vDEP, "VK_KHR_external_memory")) && (isCompatibile(1, 1, v) || isSupported(vDEP, "VK_KHR_dedicated_allocation")))) && isSupported(vDEP, "VK_EXT_queue_family_foreign");
}

bool check_VK_EXT_sampler_filter_minmax(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	if (isCompatibile(1, 2, v))
		return true;

	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_EXT_sampler_filter_minmax"))
		return true;

	// depends attribute in xml: VK_KHR_get_physical_device_properties2,VK_VERSION_1_1
	return (isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"));
}

bool check_VK_AMDX_shader_enqueue(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_AMDX_shader_enqueue"))
		return true;

	// depends attribute in xml: (((VK_KHR_get_physical_device_properties2,VK_VERSION_1_1)+VK_KHR_synchronization2),VK_VERSION_1_3)+VK_KHR_pipeline_library+VK_KHR_spirv_1_4
	return ((((isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"))) && (isCompatibile(1, 3, v) || isSupported(vDEP, "VK_KHR_synchronization2")))) && isSupported(vDEP, "VK_KHR_pipeline_library") && (isCompatibile(1, 2, v) || isSupported(vDEP, "VK_KHR_spirv_1_4"));
}

bool check_VK_EXT_inline_uniform_block(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	if (isCompatibile(1, 3, v))
		return true;

	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_EXT_inline_uniform_block"))
		return true;

	// depends attribute in xml: (VK_KHR_get_physical_device_properties2+VK_KHR_maintenance1),VK_VERSION_1_1
	return ((isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2")) && (isCompatibile(1, 1, v) || isSupported(vDEP, "VK_KHR_maintenance1")));
}

bool check_VK_EXT_sample_locations(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_EXT_sample_locations"))
		return true;

	// depends attribute in xml: VK_KHR_get_physical_device_properties2,VK_VERSION_1_1
	return (isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"));
}

bool check_VK_EXT_blend_operation_advanced(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_EXT_blend_operation_advanced"))
		return true;

	// depends attribute in xml: VK_KHR_get_physical_device_properties2,VK_VERSION_1_1
	return (isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"));
}

bool check_VK_KHR_acceleration_structure(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_KHR_acceleration_structure"))
		return true;

	// depends attribute in xml: ((VK_VERSION_1_1+VK_EXT_descriptor_indexing+VK_KHR_buffer_device_address),VK_VERSION_1_2)+VK_KHR_deferred_host_operations
	return ((isCompatibile(1, 1, v) && (isCompatibile(1, 2, v) || isSupported(vDEP, "VK_EXT_descriptor_indexing")) && (isCompatibile(1, 2, v) || isSupported(vDEP, "VK_KHR_buffer_device_address")))) && isSupported(vDEP, "VK_KHR_deferred_host_operations");
}

bool check_VK_KHR_ray_tracing_pipeline(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_KHR_ray_tracing_pipeline"))
		return true;

	// depends attribute in xml: VK_KHR_spirv_1_4+VK_KHR_acceleration_structure
	return (isCompatibile(1, 2, v) || isSupported(vDEP, "VK_KHR_spirv_1_4")) && isSupported(vDEP, "VK_KHR_acceleration_structure");
}

bool check_VK_KHR_ray_query(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_KHR_ray_query"))
		return true;

	// depends attribute in xml: VK_KHR_spirv_1_4+VK_KHR_acceleration_structure
	return (isCompatibile(1, 2, v) || isSupported(vDEP, "VK_KHR_spirv_1_4")) && isSupported(vDEP, "VK_KHR_acceleration_structure");
}

bool check_VK_NV_shader_sm_builtins(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_NV_shader_sm_builtins"))
		return true;

	// depends attribute in xml: VK_VERSION_1_1
	return isCompatibile(1, 1, v);
}

bool check_VK_KHR_sampler_ycbcr_conversion(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	if (isCompatibile(1, 1, v))
		return true;

	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_KHR_sampler_ycbcr_conversion"))
		return true;

	// depends attribute in xml: (VK_KHR_maintenance1+VK_KHR_bind_memory2+VK_KHR_get_memory_requirements2+VK_KHR_get_physical_device_properties2),VK_VERSION_1_1
	return ((isCompatibile(1, 1, v) || isSupported(vDEP, "VK_KHR_maintenance1")) && (isCompatibile(1, 1, v) || isSupported(vDEP, "VK_KHR_bind_memory2")) && (isCompatibile(1, 1, v) || isSupported(vDEP, "VK_KHR_get_memory_requirements2")) && (isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2")));
}

bool check_VK_EXT_image_drm_format_modifier(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_EXT_image_drm_format_modifier"))
		return true;

	// depends attribute in xml: (((VK_KHR_bind_memory2+VK_KHR_get_physical_device_properties2+VK_KHR_sampler_ycbcr_conversion),VK_VERSION_1_1)+VK_KHR_image_format_list),VK_VERSION_1_2
	return ((((isCompatibile(1, 1, v) || isSupported(vDEP, "VK_KHR_bind_memory2")) && (isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2")) && (isCompatibile(1, 1, v) || isSupported(vDEP, "VK_KHR_sampler_ycbcr_conversion")))) && (isCompatibile(1, 2, v) || isSupported(vDEP, "VK_KHR_image_format_list")));
}

bool check_VK_EXT_descriptor_indexing(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	if (isCompatibile(1, 2, v))
		return true;

	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_EXT_descriptor_indexing"))
		return true;

	// depends attribute in xml: (VK_KHR_get_physical_device_properties2+VK_KHR_maintenance3),VK_VERSION_1_1
	return ((isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2")) && (isCompatibile(1, 1, v) || isSupported(vDEP, "VK_KHR_maintenance3")));
}

bool check_VK_KHR_portability_subset(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_KHR_portability_subset"))
		return true;

	// depends attribute in xml: VK_KHR_get_physical_device_properties2,VK_VERSION_1_1
	return (isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"));
}

bool check_VK_NV_shading_rate_image(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_NV_shading_rate_image"))
		return true;

	// depends attribute in xml: VK_KHR_get_physical_device_properties2,VK_VERSION_1_1
	return (isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"));
}

bool check_VK_NV_ray_tracing(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_NV_ray_tracing"))
		return true;

	// depends attribute in xml: (VK_KHR_get_physical_device_properties2+VK_KHR_get_memory_requirements2),VK_VERSION_1_1
	return ((isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2")) && (isCompatibile(1, 1, v) || isSupported(vDEP, "VK_KHR_get_memory_requirements2")));
}

bool check_VK_NV_representative_fragment_test(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_NV_representative_fragment_test"))
		return true;

	// depends attribute in xml: VK_KHR_get_physical_device_properties2,VK_VERSION_1_1
	return (isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"));
}

bool check_VK_KHR_maintenance3(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	if (isCompatibile(1, 1, v))
		return true;

	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_KHR_maintenance3"))
		return true;

	// depends attribute in xml: VK_KHR_get_physical_device_properties2,VK_VERSION_1_1
	return (isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"));
}

bool check_VK_KHR_shader_subgroup_extended_types(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	if (isCompatibile(1, 2, v))
		return true;

	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_KHR_shader_subgroup_extended_types"))
		return true;

	// depends attribute in xml: VK_VERSION_1_1
	return isCompatibile(1, 1, v);
}

bool check_VK_KHR_8bit_storage(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	if (isCompatibile(1, 2, v))
		return true;

	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_KHR_8bit_storage"))
		return true;

	// depends attribute in xml: (VK_KHR_get_physical_device_properties2+VK_KHR_storage_buffer_storage_class),VK_VERSION_1_1
	return ((isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2")) && (isCompatibile(1, 1, v) || isSupported(vDEP, "VK_KHR_storage_buffer_storage_class")));
}

bool check_VK_EXT_external_memory_host(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_EXT_external_memory_host"))
		return true;

	// depends attribute in xml: VK_KHR_external_memory,VK_VERSION_1_1
	return (isCompatibile(1, 1, v) || isSupported(vDEP, "VK_KHR_external_memory"));
}

bool check_VK_KHR_shader_atomic_int64(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	if (isCompatibile(1, 2, v))
		return true;

	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_KHR_shader_atomic_int64"))
		return true;

	// depends attribute in xml: VK_KHR_get_physical_device_properties2,VK_VERSION_1_1
	return (isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"));
}

bool check_VK_KHR_shader_clock(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_KHR_shader_clock"))
		return true;

	// depends attribute in xml: VK_KHR_get_physical_device_properties2,VK_VERSION_1_1
	return (isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"));
}

bool check_VK_EXT_calibrated_timestamps(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_EXT_calibrated_timestamps"))
		return true;

	// depends attribute in xml: VK_KHR_get_physical_device_properties2,VK_VERSION_1_1
	return (isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"));
}

bool check_VK_AMD_shader_core_properties(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_AMD_shader_core_properties"))
		return true;

	// depends attribute in xml: VK_KHR_get_physical_device_properties2,VK_VERSION_1_1
	return (isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"));
}

bool check_VK_KHR_video_decode_h265(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_KHR_video_decode_h265"))
		return true;

	// depends attribute in xml: VK_KHR_video_decode_queue
	return isSupported(vDEP, "VK_KHR_video_decode_queue");
}

bool check_VK_KHR_global_priority(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_KHR_global_priority"))
		return true;

	// depends attribute in xml: VK_KHR_get_physical_device_properties2,VK_VERSION_1_1
	return (isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"));
}

bool check_VK_EXT_vertex_attribute_divisor(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_EXT_vertex_attribute_divisor"))
		return true;

	// depends attribute in xml: VK_KHR_get_physical_device_properties2,VK_VERSION_1_1
	return (isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"));
}

bool check_VK_GGP_frame_token(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_GGP_frame_token"))
		return true;

	// depends attribute in xml: VK_KHR_swapchain+VK_GGP_stream_descriptor_surface
	return isSupported(vDEP, "VK_KHR_swapchain") && isSupported(vIEP, "VK_GGP_stream_descriptor_surface");
}

bool check_VK_KHR_driver_properties(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	if (isCompatibile(1, 2, v))
		return true;

	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_KHR_driver_properties"))
		return true;

	// depends attribute in xml: VK_KHR_get_physical_device_properties2,VK_VERSION_1_1
	return (isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"));
}

bool check_VK_KHR_shader_float_controls(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	if (isCompatibile(1, 2, v))
		return true;

	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_KHR_shader_float_controls"))
		return true;

	// depends attribute in xml: VK_KHR_get_physical_device_properties2,VK_VERSION_1_1
	return (isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"));
}

bool check_VK_NV_shader_subgroup_partitioned(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_NV_shader_subgroup_partitioned"))
		return true;

	// depends attribute in xml: VK_VERSION_1_1
	return isCompatibile(1, 1, v);
}

bool check_VK_KHR_depth_stencil_resolve(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	if (isCompatibile(1, 2, v))
		return true;

	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_KHR_depth_stencil_resolve"))
		return true;

	// depends attribute in xml: VK_KHR_create_renderpass2,VK_VERSION_1_2
	return (isCompatibile(1, 2, v) || isSupported(vDEP, "VK_KHR_create_renderpass2"));
}

bool check_VK_KHR_swapchain_mutable_format(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_KHR_swapchain_mutable_format"))
		return true;

	// depends attribute in xml: VK_KHR_swapchain+(VK_KHR_maintenance2,VK_VERSION_1_1)+(VK_KHR_image_format_list,VK_VERSION_1_2)
	return isSupported(vDEP, "VK_KHR_swapchain") && ((isCompatibile(1, 1, v) || isSupported(vDEP, "VK_KHR_maintenance2"))) && ((isCompatibile(1, 2, v) || isSupported(vDEP, "VK_KHR_image_format_list")));
}

bool check_VK_NV_compute_shader_derivatives(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_NV_compute_shader_derivatives"))
		return true;

	// depends attribute in xml: VK_KHR_get_physical_device_properties2,VK_VERSION_1_1
	return (isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"));
}

bool check_VK_NV_mesh_shader(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_NV_mesh_shader"))
		return true;

	// depends attribute in xml: VK_KHR_get_physical_device_properties2,VK_VERSION_1_1
	return (isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"));
}

bool check_VK_NV_fragment_shader_barycentric(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_NV_fragment_shader_barycentric"))
		return true;

	// depends attribute in xml: VK_KHR_get_physical_device_properties2,VK_VERSION_1_1
	return (isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"));
}

bool check_VK_NV_shader_image_footprint(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_NV_shader_image_footprint"))
		return true;

	// depends attribute in xml: VK_KHR_get_physical_device_properties2,VK_VERSION_1_1
	return (isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"));
}

bool check_VK_NV_scissor_exclusive(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_NV_scissor_exclusive"))
		return true;

	// depends attribute in xml: VK_KHR_get_physical_device_properties2,VK_VERSION_1_1
	return (isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"));
}

bool check_VK_NV_device_diagnostic_checkpoints(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_NV_device_diagnostic_checkpoints"))
		return true;

	// depends attribute in xml: VK_KHR_get_physical_device_properties2,VK_VERSION_1_1
	return (isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"));
}

bool check_VK_KHR_timeline_semaphore(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	if (isCompatibile(1, 2, v))
		return true;

	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_KHR_timeline_semaphore"))
		return true;

	// depends attribute in xml: VK_KHR_get_physical_device_properties2,VK_VERSION_1_1
	return (isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"));
}

bool check_VK_INTEL_shader_integer_functions2(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_INTEL_shader_integer_functions2"))
		return true;

	// depends attribute in xml: VK_KHR_get_physical_device_properties2,VK_VERSION_1_1
	return (isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"));
}

bool check_VK_KHR_vulkan_memory_model(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	if (isCompatibile(1, 2, v))
		return true;

	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_KHR_vulkan_memory_model"))
		return true;

	// depends attribute in xml: VK_KHR_get_physical_device_properties2,VK_VERSION_1_1
	return (isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"));
}

bool check_VK_EXT_pci_bus_info(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_EXT_pci_bus_info"))
		return true;

	// depends attribute in xml: VK_KHR_get_physical_device_properties2,VK_VERSION_1_1
	return (isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"));
}

bool check_VK_AMD_display_native_hdr(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_AMD_display_native_hdr"))
		return true;

	// depends attribute in xml: (VK_KHR_get_physical_device_properties2,VK_VERSION_1_1)+VK_KHR_get_surface_capabilities2+VK_KHR_swapchain
	return ((isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"))) && isSupported(vIEP, "VK_KHR_get_surface_capabilities2") && isSupported(vDEP, "VK_KHR_swapchain");
}

bool check_VK_KHR_shader_terminate_invocation(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	if (isCompatibile(1, 3, v))
		return true;

	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_KHR_shader_terminate_invocation"))
		return true;

	// depends attribute in xml: VK_KHR_get_physical_device_properties2,VK_VERSION_1_1
	return (isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"));
}

bool check_VK_EXT_fragment_density_map(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_EXT_fragment_density_map"))
		return true;

	// depends attribute in xml: VK_KHR_get_physical_device_properties2,VK_VERSION_1_1
	return (isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"));
}

bool check_VK_EXT_scalar_block_layout(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	if (isCompatibile(1, 2, v))
		return true;

	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_EXT_scalar_block_layout"))
		return true;

	// depends attribute in xml: VK_KHR_get_physical_device_properties2,VK_VERSION_1_1
	return (isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"));
}

bool check_VK_EXT_subgroup_size_control(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	if (isCompatibile(1, 3, v))
		return true;

	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_EXT_subgroup_size_control"))
		return true;

	// depends attribute in xml: VK_VERSION_1_1
	return isCompatibile(1, 1, v);
}

bool check_VK_KHR_fragment_shading_rate(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_KHR_fragment_shading_rate"))
		return true;

	// depends attribute in xml: ((VK_KHR_get_physical_device_properties2,VK_VERSION_1_1)+VK_KHR_create_renderpass2),VK_VERSION_1_2
	return (((isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"))) && (isCompatibile(1, 2, v) || isSupported(vDEP, "VK_KHR_create_renderpass2")));
}

bool check_VK_AMD_shader_core_properties2(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_AMD_shader_core_properties2"))
		return true;

	// depends attribute in xml: VK_AMD_shader_core_properties
	return isSupported(vDEP, "VK_AMD_shader_core_properties");
}

bool check_VK_AMD_device_coherent_memory(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_AMD_device_coherent_memory"))
		return true;

	// depends attribute in xml: VK_KHR_get_physical_device_properties2,VK_VERSION_1_1
	return (isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"));
}

bool check_VK_KHR_dynamic_rendering_local_read(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_KHR_dynamic_rendering_local_read"))
		return true;

	// depends attribute in xml: VK_KHR_dynamic_rendering,VK_VERSION_1_3
	return (isCompatibile(1, 3, v) || isSupported(vDEP, "VK_KHR_dynamic_rendering"));
}

bool check_VK_EXT_shader_image_atomic_int64(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_EXT_shader_image_atomic_int64"))
		return true;

	// depends attribute in xml: VK_KHR_get_physical_device_properties2,VK_VERSION_1_1
	return (isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"));
}

bool check_VK_KHR_shader_quad_control(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_KHR_shader_quad_control"))
		return true;

	// depends attribute in xml: VK_VERSION_1_1+VK_KHR_vulkan_memory_model+VK_KHR_shader_maximal_reconvergence
	return isCompatibile(1, 1, v) && (isCompatibile(1, 2, v) || isSupported(vDEP, "VK_KHR_vulkan_memory_model")) && isSupported(vDEP, "VK_KHR_shader_maximal_reconvergence");
}

bool check_VK_KHR_spirv_1_4(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	if (isCompatibile(1, 2, v))
		return true;

	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_KHR_spirv_1_4"))
		return true;

	// depends attribute in xml: VK_VERSION_1_1+VK_KHR_shader_float_controls
	return isCompatibile(1, 1, v) && (isCompatibile(1, 2, v) || isSupported(vDEP, "VK_KHR_shader_float_controls"));
}

bool check_VK_EXT_memory_budget(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_EXT_memory_budget"))
		return true;

	// depends attribute in xml: VK_KHR_get_physical_device_properties2,VK_VERSION_1_1
	return (isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"));
}

bool check_VK_EXT_memory_priority(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_EXT_memory_priority"))
		return true;

	// depends attribute in xml: VK_KHR_get_physical_device_properties2,VK_VERSION_1_1
	return (isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"));
}

bool check_VK_NV_dedicated_allocation_image_aliasing(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_NV_dedicated_allocation_image_aliasing"))
		return true;

	// depends attribute in xml: (VK_KHR_dedicated_allocation+VK_KHR_get_physical_device_properties2),VK_VERSION_1_1
	return ((isCompatibile(1, 1, v) || isSupported(vDEP, "VK_KHR_dedicated_allocation")) && (isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2")));
}

bool check_VK_KHR_separate_depth_stencil_layouts(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	if (isCompatibile(1, 2, v))
		return true;

	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_KHR_separate_depth_stencil_layouts"))
		return true;

	// depends attribute in xml: ((VK_KHR_get_physical_device_properties2,VK_VERSION_1_1)+VK_KHR_create_renderpass2),VK_VERSION_1_2
	return (((isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"))) && (isCompatibile(1, 2, v) || isSupported(vDEP, "VK_KHR_create_renderpass2")));
}

bool check_VK_EXT_buffer_device_address(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_EXT_buffer_device_address"))
		return true;

	// depends attribute in xml: VK_KHR_get_physical_device_properties2,VK_VERSION_1_1
	return (isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"));
}

bool check_VK_KHR_present_wait(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_KHR_present_wait"))
		return true;

	// depends attribute in xml: VK_KHR_swapchain+VK_KHR_present_id
	return isSupported(vDEP, "VK_KHR_swapchain") && isSupported(vDEP, "VK_KHR_present_id");
}

bool check_VK_NV_cooperative_matrix(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_NV_cooperative_matrix"))
		return true;

	// depends attribute in xml: VK_KHR_get_physical_device_properties2,VK_VERSION_1_1
	return (isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"));
}

bool check_VK_NV_coverage_reduction_mode(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_NV_coverage_reduction_mode"))
		return true;

	// depends attribute in xml: VK_NV_framebuffer_mixed_samples+(VK_KHR_get_physical_device_properties2,VK_VERSION_1_1)
	return isSupported(vDEP, "VK_NV_framebuffer_mixed_samples") && ((isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2")));
}

bool check_VK_EXT_fragment_shader_interlock(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_EXT_fragment_shader_interlock"))
		return true;

	// depends attribute in xml: VK_KHR_get_physical_device_properties2,VK_VERSION_1_1
	return (isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"));
}

bool check_VK_EXT_ycbcr_image_arrays(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_EXT_ycbcr_image_arrays"))
		return true;

	// depends attribute in xml: VK_KHR_sampler_ycbcr_conversion,VK_VERSION_1_1
	return (isCompatibile(1, 1, v) || isSupported(vDEP, "VK_KHR_sampler_ycbcr_conversion"));
}

bool check_VK_KHR_uniform_buffer_standard_layout(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	if (isCompatibile(1, 2, v))
		return true;

	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_KHR_uniform_buffer_standard_layout"))
		return true;

	// depends attribute in xml: VK_KHR_get_physical_device_properties2,VK_VERSION_1_1
	return (isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"));
}

bool check_VK_EXT_provoking_vertex(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_EXT_provoking_vertex"))
		return true;

	// depends attribute in xml: VK_KHR_get_physical_device_properties2,VK_VERSION_1_1
	return (isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"));
}

bool check_VK_EXT_full_screen_exclusive(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_EXT_full_screen_exclusive"))
		return true;

	// depends attribute in xml: (VK_KHR_get_physical_device_properties2,VK_VERSION_1_1)+VK_KHR_surface+VK_KHR_get_surface_capabilities2+VK_KHR_swapchain
	return ((isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"))) && isSupported(vIEP, "VK_KHR_surface") && isSupported(vIEP, "VK_KHR_get_surface_capabilities2") && isSupported(vDEP, "VK_KHR_swapchain");
}

bool check_VK_KHR_buffer_device_address(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	if (isCompatibile(1, 2, v))
		return true;

	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_KHR_buffer_device_address"))
		return true;

	// depends attribute in xml: (VK_KHR_get_physical_device_properties2+VK_KHR_device_group),VK_VERSION_1_1
	return ((isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2")) && (isCompatibile(1, 1, v) || isSupported(vDEP, "VK_KHR_device_group")));
}

bool check_VK_EXT_line_rasterization(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_EXT_line_rasterization"))
		return true;

	// depends attribute in xml: VK_KHR_get_physical_device_properties2,VK_VERSION_1_1
	return (isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"));
}

bool check_VK_EXT_shader_atomic_float(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_EXT_shader_atomic_float"))
		return true;

	// depends attribute in xml: VK_KHR_get_physical_device_properties2,VK_VERSION_1_1
	return (isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"));
}

bool check_VK_EXT_host_query_reset(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	if (isCompatibile(1, 2, v))
		return true;

	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_EXT_host_query_reset"))
		return true;

	// depends attribute in xml: VK_KHR_get_physical_device_properties2,VK_VERSION_1_1
	return (isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"));
}

bool check_VK_EXT_index_type_uint8(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_EXT_index_type_uint8"))
		return true;

	// depends attribute in xml: VK_KHR_get_physical_device_properties2,VK_VERSION_1_1
	return (isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"));
}

bool check_VK_EXT_extended_dynamic_state(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	if (isCompatibile(1, 3, v))
		return true;

	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_EXT_extended_dynamic_state"))
		return true;

	// depends attribute in xml: VK_KHR_get_physical_device_properties2,VK_VERSION_1_1
	return (isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"));
}

bool check_VK_KHR_pipeline_executable_properties(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_KHR_pipeline_executable_properties"))
		return true;

	// depends attribute in xml: VK_KHR_get_physical_device_properties2,VK_VERSION_1_1
	return (isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"));
}

bool check_VK_EXT_host_image_copy(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_EXT_host_image_copy"))
		return true;

	// depends attribute in xml: ((VK_KHR_get_physical_device_properties2,VK_VERSION_1_1)+VK_KHR_copy_commands2+VK_KHR_format_feature_flags2),VK_VERSION_1_3
	return (((isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"))) && (isCompatibile(1, 3, v) || isSupported(vDEP, "VK_KHR_copy_commands2")) && (isCompatibile(1, 3, v) || isSupported(vDEP, "VK_KHR_format_feature_flags2")));
}

bool check_VK_EXT_map_memory_placed(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_EXT_map_memory_placed"))
		return true;

	// depends attribute in xml: VK_KHR_map_memory2
	return isSupported(vDEP, "VK_KHR_map_memory2");
}

bool check_VK_EXT_shader_atomic_float2(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_EXT_shader_atomic_float2"))
		return true;

	// depends attribute in xml: VK_EXT_shader_atomic_float
	return isSupported(vDEP, "VK_EXT_shader_atomic_float");
}

bool check_VK_EXT_swapchain_maintenance1(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_EXT_swapchain_maintenance1"))
		return true;

	// depends attribute in xml: VK_KHR_swapchain+VK_EXT_surface_maintenance1+(VK_KHR_get_physical_device_properties2,VK_VERSION_1_1)
	return isSupported(vDEP, "VK_KHR_swapchain") && isSupported(vIEP, "VK_EXT_surface_maintenance1") && ((isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2")));
}

bool check_VK_EXT_shader_demote_to_helper_invocation(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	if (isCompatibile(1, 3, v))
		return true;

	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_EXT_shader_demote_to_helper_invocation"))
		return true;

	// depends attribute in xml: VK_KHR_get_physical_device_properties2,VK_VERSION_1_1
	return (isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"));
}

bool check_VK_NV_device_generated_commands(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_NV_device_generated_commands"))
		return true;

	// depends attribute in xml: (VK_VERSION_1_1+VK_KHR_buffer_device_address),VK_VERSION_1_2
	return (isCompatibile(1, 1, v) && (isCompatibile(1, 2, v) || isSupported(vDEP, "VK_KHR_buffer_device_address")));
}

bool check_VK_NV_inherited_viewport_scissor(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_NV_inherited_viewport_scissor"))
		return true;

	// depends attribute in xml: VK_KHR_get_physical_device_properties2,VK_VERSION_1_1
	return (isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"));
}

bool check_VK_KHR_shader_integer_dot_product(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	if (isCompatibile(1, 3, v))
		return true;

	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_KHR_shader_integer_dot_product"))
		return true;

	// depends attribute in xml: VK_KHR_get_physical_device_properties2,VK_VERSION_1_1
	return (isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"));
}

bool check_VK_EXT_texel_buffer_alignment(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	if (isCompatibile(1, 3, v))
		return true;

	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_EXT_texel_buffer_alignment"))
		return true;

	// depends attribute in xml: VK_KHR_get_physical_device_properties2,VK_VERSION_1_1
	return (isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"));
}

bool check_VK_EXT_depth_bias_control(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_EXT_depth_bias_control"))
		return true;

	// depends attribute in xml: VK_KHR_get_physical_device_properties2,VK_VERSION_1_1
	return (isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"));
}

bool check_VK_EXT_device_memory_report(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_EXT_device_memory_report"))
		return true;

	// depends attribute in xml: VK_KHR_get_physical_device_properties2,VK_VERSION_1_1
	return (isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"));
}

bool check_VK_EXT_robustness2(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_EXT_robustness2"))
		return true;

	// depends attribute in xml: VK_KHR_get_physical_device_properties2,VK_VERSION_1_1
	return (isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"));
}

bool check_VK_EXT_custom_border_color(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_EXT_custom_border_color"))
		return true;

	// depends attribute in xml: VK_KHR_get_physical_device_properties2,VK_VERSION_1_1
	return (isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"));
}

bool check_VK_NV_present_barrier(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_NV_present_barrier"))
		return true;

	// depends attribute in xml: (VK_KHR_get_physical_device_properties2,VK_VERSION_1_1)+VK_KHR_surface+VK_KHR_get_surface_capabilities2+VK_KHR_swapchain
	return ((isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"))) && isSupported(vIEP, "VK_KHR_surface") && isSupported(vIEP, "VK_KHR_get_surface_capabilities2") && isSupported(vDEP, "VK_KHR_swapchain");
}

bool check_VK_KHR_present_id(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_KHR_present_id"))
		return true;

	// depends attribute in xml: VK_KHR_swapchain+VK_KHR_get_physical_device_properties2,VK_VERSION_1_1
	return isSupported(vDEP, "VK_KHR_swapchain") && (isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"));
}

bool check_VK_EXT_private_data(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	if (isCompatibile(1, 3, v))
		return true;

	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_EXT_private_data"))
		return true;

	// depends attribute in xml: VK_KHR_get_physical_device_properties2,VK_VERSION_1_1
	return (isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"));
}

bool check_VK_EXT_pipeline_creation_cache_control(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	if (isCompatibile(1, 3, v))
		return true;

	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_EXT_pipeline_creation_cache_control"))
		return true;

	// depends attribute in xml: VK_KHR_get_physical_device_properties2,VK_VERSION_1_1
	return (isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"));
}

bool check_VK_KHR_video_encode_queue(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_KHR_video_encode_queue"))
		return true;

	// depends attribute in xml: VK_KHR_video_queue+(VK_KHR_synchronization2,VK_VERSION_1_3)
	return isSupported(vDEP, "VK_KHR_video_queue") && ((isCompatibile(1, 3, v) || isSupported(vDEP, "VK_KHR_synchronization2")));
}

bool check_VK_NV_device_diagnostics_config(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_NV_device_diagnostics_config"))
		return true;

	// depends attribute in xml: VK_KHR_get_physical_device_properties2,VK_VERSION_1_1
	return (isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"));
}

bool check_VK_KHR_synchronization2(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	if (isCompatibile(1, 3, v))
		return true;

	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_KHR_synchronization2"))
		return true;

	// depends attribute in xml: VK_KHR_get_physical_device_properties2,VK_VERSION_1_1
	return (isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"));
}

bool check_VK_EXT_descriptor_buffer(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_EXT_descriptor_buffer"))
		return true;

	// depends attribute in xml: ((((VK_KHR_get_physical_device_properties2,VK_VERSION_1_1)+VK_KHR_buffer_device_address+VK_EXT_descriptor_indexing),VK_VERSION_1_2)+VK_KHR_synchronization2),VK_VERSION_1_3
	return (((((isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"))) && (isCompatibile(1, 2, v) || isSupported(vDEP, "VK_KHR_buffer_device_address")) && (isCompatibile(1, 2, v) || isSupported(vDEP, "VK_EXT_descriptor_indexing")))) && (isCompatibile(1, 3, v) || isSupported(vDEP, "VK_KHR_synchronization2")));
}

bool check_VK_EXT_graphics_pipeline_library(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_EXT_graphics_pipeline_library"))
		return true;

	// depends attribute in xml: (VK_KHR_get_physical_device_properties2,VK_VERSION_1_1)+VK_KHR_pipeline_library
	return ((isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"))) && isSupported(vDEP, "VK_KHR_pipeline_library");
}

bool check_VK_AMD_shader_early_and_late_fragment_tests(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_AMD_shader_early_and_late_fragment_tests"))
		return true;

	// depends attribute in xml: VK_KHR_get_physical_device_properties2,VK_VERSION_1_1
	return (isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"));
}

bool check_VK_KHR_fragment_shader_barycentric(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_KHR_fragment_shader_barycentric"))
		return true;

	// depends attribute in xml: VK_KHR_get_physical_device_properties2,VK_VERSION_1_1
	return (isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"));
}

bool check_VK_KHR_shader_subgroup_uniform_control_flow(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_KHR_shader_subgroup_uniform_control_flow"))
		return true;

	// depends attribute in xml: VK_VERSION_1_1
	return isCompatibile(1, 1, v);
}

bool check_VK_KHR_zero_initialize_workgroup_memory(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	if (isCompatibile(1, 3, v))
		return true;

	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_KHR_zero_initialize_workgroup_memory"))
		return true;

	// depends attribute in xml: VK_KHR_get_physical_device_properties2,VK_VERSION_1_1
	return (isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"));
}

bool check_VK_NV_fragment_shading_rate_enums(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_NV_fragment_shading_rate_enums"))
		return true;

	// depends attribute in xml: VK_KHR_fragment_shading_rate
	return isSupported(vDEP, "VK_KHR_fragment_shading_rate");
}

bool check_VK_NV_ray_tracing_motion_blur(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_NV_ray_tracing_motion_blur"))
		return true;

	// depends attribute in xml: VK_KHR_ray_tracing_pipeline
	return isSupported(vDEP, "VK_KHR_ray_tracing_pipeline");
}

bool check_VK_EXT_mesh_shader(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_EXT_mesh_shader"))
		return true;

	// depends attribute in xml: VK_KHR_spirv_1_4
	return (isCompatibile(1, 2, v) || isSupported(vDEP, "VK_KHR_spirv_1_4"));
}

bool check_VK_EXT_ycbcr_2plane_444_formats(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	if (isCompatibile(1, 3, v))
		return true;

	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_EXT_ycbcr_2plane_444_formats"))
		return true;

	// depends attribute in xml: VK_KHR_sampler_ycbcr_conversion,VK_VERSION_1_1
	return (isCompatibile(1, 1, v) || isSupported(vDEP, "VK_KHR_sampler_ycbcr_conversion"));
}

bool check_VK_EXT_fragment_density_map2(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_EXT_fragment_density_map2"))
		return true;

	// depends attribute in xml: VK_EXT_fragment_density_map
	return isSupported(vDEP, "VK_EXT_fragment_density_map");
}

bool check_VK_QCOM_rotated_copy_commands(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_QCOM_rotated_copy_commands"))
		return true;

	// depends attribute in xml: VK_KHR_copy_commands2,VK_VERSION_1_3
	return (isCompatibile(1, 3, v) || isSupported(vDEP, "VK_KHR_copy_commands2"));
}

bool check_VK_EXT_image_robustness(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	if (isCompatibile(1, 3, v))
		return true;

	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_EXT_image_robustness"))
		return true;

	// depends attribute in xml: VK_KHR_get_physical_device_properties2,VK_VERSION_1_1
	return (isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"));
}

bool check_VK_KHR_workgroup_memory_explicit_layout(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_KHR_workgroup_memory_explicit_layout"))
		return true;

	// depends attribute in xml: VK_KHR_get_physical_device_properties2,VK_VERSION_1_1
	return (isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"));
}

bool check_VK_KHR_copy_commands2(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	if (isCompatibile(1, 3, v))
		return true;

	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_KHR_copy_commands2"))
		return true;

	// depends attribute in xml: VK_KHR_get_physical_device_properties2,VK_VERSION_1_1
	return (isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"));
}

bool check_VK_EXT_image_compression_control(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_EXT_image_compression_control"))
		return true;

	// depends attribute in xml: VK_KHR_get_physical_device_properties2,VK_VERSION_1_1
	return (isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"));
}

bool check_VK_EXT_attachment_feedback_loop_layout(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_EXT_attachment_feedback_loop_layout"))
		return true;

	// depends attribute in xml: VK_KHR_get_physical_device_properties2,VK_VERSION_1_1
	return (isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"));
}

bool check_VK_EXT_4444_formats(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	if (isCompatibile(1, 3, v))
		return true;

	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_EXT_4444_formats"))
		return true;

	// depends attribute in xml: VK_KHR_get_physical_device_properties2,VK_VERSION_1_1
	return (isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"));
}

bool check_VK_EXT_device_fault(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_EXT_device_fault"))
		return true;

	// depends attribute in xml: VK_KHR_get_physical_device_properties2,VK_VERSION_1_1
	return (isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"));
}

bool check_VK_ARM_rasterization_order_attachment_access(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_ARM_rasterization_order_attachment_access"))
		return true;

	// depends attribute in xml: VK_KHR_get_physical_device_properties2,VK_VERSION_1_1
	return (isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"));
}

bool check_VK_EXT_rgba10x6_formats(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_EXT_rgba10x6_formats"))
		return true;

	// depends attribute in xml: VK_KHR_sampler_ycbcr_conversion,VK_VERSION_1_1
	return (isCompatibile(1, 1, v) || isSupported(vDEP, "VK_KHR_sampler_ycbcr_conversion"));
}

bool check_VK_NV_acquire_winrt_display(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_NV_acquire_winrt_display"))
		return true;

	// depends attribute in xml: VK_EXT_direct_mode_display
	return isSupported(vIEP, "VK_EXT_direct_mode_display");
}

bool check_VK_VALVE_mutable_descriptor_type(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_VALVE_mutable_descriptor_type"))
		return true;

	// depends attribute in xml: VK_KHR_maintenance3
	return (isCompatibile(1, 1, v) || isSupported(vDEP, "VK_KHR_maintenance3"));
}

bool check_VK_EXT_vertex_input_dynamic_state(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_EXT_vertex_input_dynamic_state"))
		return true;

	// depends attribute in xml: VK_KHR_get_physical_device_properties2,VK_VERSION_1_1
	return (isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"));
}

bool check_VK_EXT_physical_device_drm(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_EXT_physical_device_drm"))
		return true;

	// depends attribute in xml: VK_KHR_get_physical_device_properties2,VK_VERSION_1_1
	return (isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"));
}

bool check_VK_EXT_device_address_binding_report(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_EXT_device_address_binding_report"))
		return true;

	// depends attribute in xml: (VK_KHR_get_physical_device_properties2,VK_VERSION_1_1)+VK_EXT_debug_utils
	return ((isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"))) && isSupported(vIEP, "VK_EXT_debug_utils");
}

bool check_VK_EXT_depth_clip_control(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_EXT_depth_clip_control"))
		return true;

	// depends attribute in xml: VK_KHR_get_physical_device_properties2,VK_VERSION_1_1
	return (isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"));
}

bool check_VK_EXT_primitive_topology_list_restart(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_EXT_primitive_topology_list_restart"))
		return true;

	// depends attribute in xml: VK_KHR_get_physical_device_properties2,VK_VERSION_1_1
	return (isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"));
}

bool check_VK_KHR_format_feature_flags2(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	if (isCompatibile(1, 3, v))
		return true;

	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_KHR_format_feature_flags2"))
		return true;

	// depends attribute in xml: VK_KHR_get_physical_device_properties2,VK_VERSION_1_1
	return (isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"));
}

bool check_VK_FUCHSIA_external_memory(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_FUCHSIA_external_memory"))
		return true;

	// depends attribute in xml: (VK_KHR_external_memory_capabilities+VK_KHR_external_memory),VK_VERSION_1_1
	return ((isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_external_memory_capabilities")) && (isCompatibile(1, 1, v) || isSupported(vDEP, "VK_KHR_external_memory")));
}

bool check_VK_FUCHSIA_external_semaphore(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_FUCHSIA_external_semaphore"))
		return true;

	// depends attribute in xml: VK_KHR_external_semaphore_capabilities+VK_KHR_external_semaphore
	return (isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_external_semaphore_capabilities")) && (isCompatibile(1, 1, v) || isSupported(vDEP, "VK_KHR_external_semaphore"));
}

bool check_VK_FUCHSIA_buffer_collection(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_FUCHSIA_buffer_collection"))
		return true;

	// depends attribute in xml: VK_FUCHSIA_external_memory+(VK_KHR_sampler_ycbcr_conversion,VK_VERSION_1_1)
	return isSupported(vDEP, "VK_FUCHSIA_external_memory") && ((isCompatibile(1, 1, v) || isSupported(vDEP, "VK_KHR_sampler_ycbcr_conversion")));
}

bool check_VK_HUAWEI_subpass_shading(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_HUAWEI_subpass_shading"))
		return true;

	// depends attribute in xml: ((VK_KHR_create_renderpass2,VK_VERSION_1_2)+VK_KHR_synchronization2),VK_VERSION_1_3
	return (((isCompatibile(1, 2, v) || isSupported(vDEP, "VK_KHR_create_renderpass2"))) && (isCompatibile(1, 3, v) || isSupported(vDEP, "VK_KHR_synchronization2")));
}

bool check_VK_HUAWEI_invocation_mask(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_HUAWEI_invocation_mask"))
		return true;

	// depends attribute in xml: VK_KHR_ray_tracing_pipeline+(VK_KHR_synchronization2,VK_VERSION_1_3)
	return isSupported(vDEP, "VK_KHR_ray_tracing_pipeline") && ((isCompatibile(1, 3, v) || isSupported(vDEP, "VK_KHR_synchronization2")));
}

bool check_VK_NV_external_memory_rdma(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_NV_external_memory_rdma"))
		return true;

	// depends attribute in xml: VK_KHR_external_memory,VK_VERSION_1_1
	return (isCompatibile(1, 1, v) || isSupported(vDEP, "VK_KHR_external_memory"));
}

bool check_VK_EXT_pipeline_properties(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_EXT_pipeline_properties"))
		return true;

	// depends attribute in xml: VK_KHR_get_physical_device_properties2,VK_VERSION_1_1
	return (isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"));
}

bool check_VK_EXT_multisampled_render_to_single_sampled(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_EXT_multisampled_render_to_single_sampled"))
		return true;

	// depends attribute in xml: (VK_KHR_create_renderpass2+VK_KHR_depth_stencil_resolve),VK_VERSION_1_2
	return ((isCompatibile(1, 2, v) || isSupported(vDEP, "VK_KHR_create_renderpass2")) && (isCompatibile(1, 2, v) || isSupported(vDEP, "VK_KHR_depth_stencil_resolve")));
}

bool check_VK_EXT_extended_dynamic_state2(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	if (isCompatibile(1, 3, v))
		return true;

	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_EXT_extended_dynamic_state2"))
		return true;

	// depends attribute in xml: VK_KHR_get_physical_device_properties2,VK_VERSION_1_1
	return (isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"));
}

bool check_VK_EXT_color_write_enable(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_EXT_color_write_enable"))
		return true;

	// depends attribute in xml: VK_KHR_get_physical_device_properties2,VK_VERSION_1_1
	return (isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"));
}

bool check_VK_EXT_primitives_generated_query(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_EXT_primitives_generated_query"))
		return true;

	// depends attribute in xml: VK_EXT_transform_feedback
	return isSupported(vDEP, "VK_EXT_transform_feedback");
}

bool check_VK_KHR_ray_tracing_maintenance1(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_KHR_ray_tracing_maintenance1"))
		return true;

	// depends attribute in xml: VK_KHR_acceleration_structure
	return isSupported(vDEP, "VK_KHR_acceleration_structure");
}

bool check_VK_EXT_global_priority_query(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_EXT_global_priority_query"))
		return true;

	// depends attribute in xml: VK_EXT_global_priority+(VK_KHR_get_physical_device_properties2,VK_VERSION_1_1)
	return (isSupported(vDEP, "VK_EXT_global_priority") || isSupported(vDEP, "VK_EXT_global_priority")) && ((isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2")));
}

bool check_VK_EXT_image_view_min_lod(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_EXT_image_view_min_lod"))
		return true;

	// depends attribute in xml: VK_KHR_get_physical_device_properties2,VK_VERSION_1_1
	return (isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"));
}

bool check_VK_EXT_multi_draw(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_EXT_multi_draw"))
		return true;

	// depends attribute in xml: VK_KHR_get_physical_device_properties2,VK_VERSION_1_1
	return (isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"));
}

bool check_VK_EXT_image_2d_view_of_3d(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_EXT_image_2d_view_of_3d"))
		return true;

	// depends attribute in xml: (VK_KHR_maintenance1+VK_KHR_get_physical_device_properties2),VK_VERSION_1_1
	return ((isCompatibile(1, 1, v) || isSupported(vDEP, "VK_KHR_maintenance1")) && (isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2")));
}

bool check_VK_EXT_shader_tile_image(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_EXT_shader_tile_image"))
		return true;

	// depends attribute in xml: VK_VERSION_1_3
	return isCompatibile(1, 3, v);
}

bool check_VK_EXT_opacity_micromap(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_EXT_opacity_micromap"))
		return true;

	// depends attribute in xml: VK_KHR_acceleration_structure+(VK_KHR_synchronization2,VK_VERSION_1_3)
	return isSupported(vDEP, "VK_KHR_acceleration_structure") && ((isCompatibile(1, 3, v) || isSupported(vDEP, "VK_KHR_synchronization2")));
}

bool check_VK_NV_displacement_micromap(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_NV_displacement_micromap"))
		return true;

	// depends attribute in xml: VK_EXT_opacity_micromap
	return isSupported(vDEP, "VK_EXT_opacity_micromap");
}

bool check_VK_HUAWEI_cluster_culling_shader(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_HUAWEI_cluster_culling_shader"))
		return true;

	// depends attribute in xml: VK_KHR_get_physical_device_properties2,VK_VERSION_1_1
	return (isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"));
}

bool check_VK_EXT_border_color_swizzle(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_EXT_border_color_swizzle"))
		return true;

	// depends attribute in xml: VK_EXT_custom_border_color
	return isSupported(vDEP, "VK_EXT_custom_border_color");
}

bool check_VK_EXT_pageable_device_local_memory(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_EXT_pageable_device_local_memory"))
		return true;

	// depends attribute in xml: VK_EXT_memory_priority
	return isSupported(vDEP, "VK_EXT_memory_priority");
}

bool check_VK_KHR_maintenance4(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	if (isCompatibile(1, 3, v))
		return true;

	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_KHR_maintenance4"))
		return true;

	// depends attribute in xml: VK_VERSION_1_1
	return isCompatibile(1, 1, v);
}

bool check_VK_ARM_shader_core_properties(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_ARM_shader_core_properties"))
		return true;

	// depends attribute in xml: VK_VERSION_1_1
	return isCompatibile(1, 1, v);
}

bool check_VK_ARM_scheduling_controls(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_ARM_scheduling_controls"))
		return true;

	// depends attribute in xml: VK_ARM_shader_core_builtins
	return isSupported(vDEP, "VK_ARM_shader_core_builtins");
}

bool check_VK_EXT_image_sliced_view_of_3d(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_EXT_image_sliced_view_of_3d"))
		return true;

	// depends attribute in xml: (VK_KHR_maintenance1+VK_KHR_get_physical_device_properties2),VK_VERSION_1_1
	return ((isCompatibile(1, 1, v) || isSupported(vDEP, "VK_KHR_maintenance1")) && (isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2")));
}

bool check_VK_VALVE_descriptor_set_host_mapping(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_VALVE_descriptor_set_host_mapping"))
		return true;

	// depends attribute in xml: VK_KHR_get_physical_device_properties2,VK_VERSION_1_1
	return (isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"));
}

bool check_VK_EXT_depth_clamp_zero_one(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_EXT_depth_clamp_zero_one"))
		return true;

	// depends attribute in xml: VK_KHR_get_physical_device_properties2,VK_VERSION_1_1
	return (isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"));
}

bool check_VK_EXT_non_seamless_cube_map(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_EXT_non_seamless_cube_map"))
		return true;

	// depends attribute in xml: VK_KHR_get_physical_device_properties2,VK_VERSION_1_1
	return (isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"));
}

bool check_VK_ARM_render_pass_striped(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_ARM_render_pass_striped"))
		return true;

	// depends attribute in xml: ((VK_KHR_get_physical_device_properties2,VK_VERSION_1_1)+VK_KHR_synchronization2),VK_VERSION_1_3
	return (((isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"))) && (isCompatibile(1, 3, v) || isSupported(vDEP, "VK_KHR_synchronization2")));
}

bool check_VK_QCOM_fragment_density_map_offset(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_QCOM_fragment_density_map_offset"))
		return true;

	// depends attribute in xml: (VK_KHR_get_physical_device_properties2,VK_VERSION_1_1)+VK_EXT_fragment_density_map
	return ((isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"))) && isSupported(vDEP, "VK_EXT_fragment_density_map");
}

bool check_VK_NV_copy_memory_indirect(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_NV_copy_memory_indirect"))
		return true;

	// depends attribute in xml: ((VK_KHR_get_physical_device_properties2,VK_VERSION_1_1)+VK_KHR_buffer_device_address),VK_VERSION_1_2
	return (((isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"))) && (isCompatibile(1, 2, v) || isSupported(vDEP, "VK_KHR_buffer_device_address")));
}

bool check_VK_NV_memory_decompression(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_NV_memory_decompression"))
		return true;

	// depends attribute in xml: ((VK_KHR_get_physical_device_properties2,VK_VERSION_1_1)+VK_KHR_buffer_device_address),VK_VERSION_1_2
	return (((isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"))) && (isCompatibile(1, 2, v) || isSupported(vDEP, "VK_KHR_buffer_device_address")));
}

bool check_VK_NV_device_generated_commands_compute(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_NV_device_generated_commands_compute"))
		return true;

	// depends attribute in xml: VK_NV_device_generated_commands
	return isSupported(vDEP, "VK_NV_device_generated_commands");
}

bool check_VK_NV_linear_color_attachment(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_NV_linear_color_attachment"))
		return true;

	// depends attribute in xml: VK_KHR_get_physical_device_properties2,VK_VERSION_1_1
	return (isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"));
}

bool check_VK_KHR_shader_maximal_reconvergence(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_KHR_shader_maximal_reconvergence"))
		return true;

	// depends attribute in xml: VK_VERSION_1_1
	return isCompatibile(1, 1, v);
}

bool check_VK_EXT_image_compression_control_swapchain(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_EXT_image_compression_control_swapchain"))
		return true;

	// depends attribute in xml: VK_EXT_image_compression_control
	return isSupported(vDEP, "VK_EXT_image_compression_control");
}

bool check_VK_QCOM_image_processing(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_QCOM_image_processing"))
		return true;

	// depends attribute in xml: VK_KHR_format_feature_flags2,VK_VERSION_1_3
	return (isCompatibile(1, 3, v) || isSupported(vDEP, "VK_KHR_format_feature_flags2"));
}

bool check_VK_EXT_nested_command_buffer(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_EXT_nested_command_buffer"))
		return true;

	// depends attribute in xml: VK_KHR_get_physical_device_properties2,VK_VERSION_1_1
	return (isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"));
}

bool check_VK_EXT_external_memory_acquire_unmodified(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_EXT_external_memory_acquire_unmodified"))
		return true;

	// depends attribute in xml: VK_KHR_external_memory,VK_VERSION_1_1
	return (isCompatibile(1, 1, v) || isSupported(vDEP, "VK_KHR_external_memory"));
}

bool check_VK_EXT_extended_dynamic_state3(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_EXT_extended_dynamic_state3"))
		return true;

	// depends attribute in xml: VK_KHR_get_physical_device_properties2,VK_VERSION_1_1
	return (isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"));
}

bool check_VK_EXT_subpass_merge_feedback(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_EXT_subpass_merge_feedback"))
		return true;

	// depends attribute in xml: VK_KHR_get_physical_device_properties2,VK_VERSION_1_1
	return (isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"));
}

bool check_VK_EXT_shader_module_identifier(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_EXT_shader_module_identifier"))
		return true;

	// depends attribute in xml: ((VK_KHR_get_physical_device_properties2,VK_VERSION_1_1)+VK_EXT_pipeline_creation_cache_control),VK_VERSION_1_3
	return (((isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"))) && (isCompatibile(1, 3, v) || isSupported(vDEP, "VK_EXT_pipeline_creation_cache_control")));
}

bool check_VK_EXT_rasterization_order_attachment_access(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_EXT_rasterization_order_attachment_access"))
		return true;

	// depends attribute in xml: VK_KHR_get_physical_device_properties2,VK_VERSION_1_1
	return (isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"));
}

bool check_VK_NV_optical_flow(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_NV_optical_flow"))
		return true;

	// depends attribute in xml: ((VK_KHR_get_physical_device_properties2,VK_VERSION_1_1)+VK_KHR_format_feature_flags2+VK_KHR_synchronization2),VK_VERSION_1_3
	return (((isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"))) && (isCompatibile(1, 3, v) || isSupported(vDEP, "VK_KHR_format_feature_flags2")) && (isCompatibile(1, 3, v) || isSupported(vDEP, "VK_KHR_synchronization2")));
}

bool check_VK_EXT_legacy_dithering(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_EXT_legacy_dithering"))
		return true;

	// depends attribute in xml: VK_KHR_get_physical_device_properties2,VK_VERSION_1_1
	return (isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"));
}

bool check_VK_EXT_pipeline_protected_access(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_EXT_pipeline_protected_access"))
		return true;

	// depends attribute in xml: VK_KHR_get_physical_device_properties2,VK_VERSION_1_1
	return (isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"));
}

bool check_VK_ANDROID_external_format_resolve(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_ANDROID_external_format_resolve"))
		return true;

	// depends attribute in xml: VK_ANDROID_external_memory_android_hardware_buffer
	return isSupported(vDEP, "VK_ANDROID_external_memory_android_hardware_buffer");
}

bool check_VK_KHR_maintenance5(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_KHR_maintenance5"))
		return true;

	// depends attribute in xml: (VK_VERSION_1_1+VK_KHR_dynamic_rendering),VK_VERSION_1_3
	return (isCompatibile(1, 1, v) && (isCompatibile(1, 3, v) || isSupported(vDEP, "VK_KHR_dynamic_rendering")));
}

bool check_VK_KHR_ray_tracing_position_fetch(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_KHR_ray_tracing_position_fetch"))
		return true;

	// depends attribute in xml: VK_KHR_acceleration_structure
	return isSupported(vDEP, "VK_KHR_acceleration_structure");
}

bool check_VK_EXT_shader_object(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_EXT_shader_object"))
		return true;

	// depends attribute in xml: ((VK_KHR_get_physical_device_properties2,VK_VERSION_1_1)+VK_KHR_dynamic_rendering),VK_VERSION_1_3
	return (((isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"))) && (isCompatibile(1, 3, v) || isSupported(vDEP, "VK_KHR_dynamic_rendering")));
}

bool check_VK_KHR_pipeline_binary(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_KHR_pipeline_binary"))
		return true;

	// depends attribute in xml: VK_KHR_maintenance5
	return isSupported(vDEP, "VK_KHR_maintenance5");
}

bool check_VK_QCOM_tile_properties(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_QCOM_tile_properties"))
		return true;

	// depends attribute in xml: VK_KHR_get_physical_device_properties2,VK_VERSION_1_1
	return (isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"));
}

bool check_VK_SEC_amigo_profiling(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_SEC_amigo_profiling"))
		return true;

	// depends attribute in xml: VK_KHR_get_physical_device_properties2,VK_VERSION_1_1
	return (isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"));
}

bool check_VK_QCOM_multiview_per_view_viewports(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_QCOM_multiview_per_view_viewports"))
		return true;

	// depends attribute in xml: VK_KHR_get_physical_device_properties2,VK_VERSION_1_1
	return (isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"));
}

bool check_VK_NV_ray_tracing_invocation_reorder(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_NV_ray_tracing_invocation_reorder"))
		return true;

	// depends attribute in xml: VK_KHR_ray_tracing_pipeline
	return isSupported(vDEP, "VK_KHR_ray_tracing_pipeline");
}

bool check_VK_EXT_mutable_descriptor_type(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_EXT_mutable_descriptor_type"))
		return true;

	// depends attribute in xml: VK_KHR_maintenance3
	return (isCompatibile(1, 1, v) || isSupported(vDEP, "VK_KHR_maintenance3"));
}

bool check_VK_EXT_legacy_vertex_attributes(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_EXT_legacy_vertex_attributes"))
		return true;

	// depends attribute in xml: VK_EXT_vertex_input_dynamic_state
	return isSupported(vDEP, "VK_EXT_vertex_input_dynamic_state");
}

bool check_VK_ARM_shader_core_builtins(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_ARM_shader_core_builtins"))
		return true;

	// depends attribute in xml: VK_KHR_get_physical_device_properties2,VK_VERSION_1_1
	return (isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"));
}

bool check_VK_EXT_pipeline_library_group_handles(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_EXT_pipeline_library_group_handles"))
		return true;

	// depends attribute in xml: VK_KHR_ray_tracing_pipeline+VK_KHR_pipeline_library
	return isSupported(vDEP, "VK_KHR_ray_tracing_pipeline") && isSupported(vDEP, "VK_KHR_pipeline_library");
}

bool check_VK_EXT_dynamic_rendering_unused_attachments(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_EXT_dynamic_rendering_unused_attachments"))
		return true;

	// depends attribute in xml: ((VK_KHR_get_physical_device_properties2,VK_VERSION_1_1)+VK_KHR_dynamic_rendering),VK_VERSION_1_3
	return (((isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"))) && (isCompatibile(1, 3, v) || isSupported(vDEP, "VK_KHR_dynamic_rendering")));
}

bool check_VK_NV_low_latency2(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_NV_low_latency2"))
		return true;

	// depends attribute in xml: VK_VERSION_1_2,VK_KHR_timeline_semaphore
	return isCompatibile(1, 2, v) || (isCompatibile(1, 2, v) || isSupported(vDEP, "VK_KHR_timeline_semaphore"));
}

bool check_VK_KHR_cooperative_matrix(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_KHR_cooperative_matrix"))
		return true;

	// depends attribute in xml: VK_KHR_get_physical_device_properties2,VK_VERSION_1_1
	return (isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"));
}

bool check_VK_KHR_compute_shader_derivatives(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_KHR_compute_shader_derivatives"))
		return true;

	// depends attribute in xml: VK_KHR_get_physical_device_properties2
	return (isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"));
}

bool check_VK_KHR_video_decode_av1(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_KHR_video_decode_av1"))
		return true;

	// depends attribute in xml: VK_KHR_video_decode_queue
	return isSupported(vDEP, "VK_KHR_video_decode_queue");
}

bool check_VK_KHR_video_maintenance1(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_KHR_video_maintenance1"))
		return true;

	// depends attribute in xml: VK_KHR_video_queue
	return isSupported(vDEP, "VK_KHR_video_queue");
}

bool check_VK_NV_per_stage_descriptor_set(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_NV_per_stage_descriptor_set"))
		return true;

	// depends attribute in xml: VK_KHR_maintenance6
	return isSupported(vDEP, "VK_KHR_maintenance6");
}

bool check_VK_QCOM_image_processing2(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_QCOM_image_processing2"))
		return true;

	// depends attribute in xml: VK_QCOM_image_processing
	return isSupported(vDEP, "VK_QCOM_image_processing");
}

bool check_VK_QCOM_filter_cubic_weights(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_QCOM_filter_cubic_weights"))
		return true;

	// depends attribute in xml: VK_EXT_filter_cubic
	return isSupported(vDEP, "VK_EXT_filter_cubic");
}

bool check_VK_QCOM_filter_cubic_clamp(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_QCOM_filter_cubic_clamp"))
		return true;

	// depends attribute in xml: (VK_EXT_filter_cubic)+(VK_VERSION_1_2,VK_EXT_sampler_filter_minmax)
	return (isSupported(vDEP, "VK_EXT_filter_cubic")) && (isCompatibile(1, 2, v) || (isCompatibile(1, 2, v) || isSupported(vDEP, "VK_EXT_sampler_filter_minmax")));
}

bool check_VK_EXT_attachment_feedback_loop_dynamic_state(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_EXT_attachment_feedback_loop_dynamic_state"))
		return true;

	// depends attribute in xml: (VK_KHR_get_physical_device_properties2,VK_VERSION_1_1)+VK_EXT_attachment_feedback_loop_layout
	return ((isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"))) && isSupported(vDEP, "VK_EXT_attachment_feedback_loop_layout");
}

bool check_VK_KHR_vertex_attribute_divisor(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_KHR_vertex_attribute_divisor"))
		return true;

	// depends attribute in xml: VK_KHR_get_physical_device_properties2,VK_VERSION_1_1
	return (isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"));
}

bool check_VK_KHR_shader_float_controls2(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_KHR_shader_float_controls2"))
		return true;

	// depends attribute in xml: VK_VERSION_1_1+VK_KHR_shader_float_controls
	return isCompatibile(1, 1, v) && (isCompatibile(1, 2, v) || isSupported(vDEP, "VK_KHR_shader_float_controls"));
}

bool check_VK_QNX_external_memory_screen_buffer(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_QNX_external_memory_screen_buffer"))
		return true;

	// depends attribute in xml: ((VK_KHR_sampler_ycbcr_conversion+VK_KHR_external_memory+VK_KHR_dedicated_allocation),VK_VERSION_1_1)+VK_EXT_queue_family_foreign
	return (((isCompatibile(1, 1, v) || isSupported(vDEP, "VK_KHR_sampler_ycbcr_conversion")) && (isCompatibile(1, 1, v) || isSupported(vDEP, "VK_KHR_external_memory")) && (isCompatibile(1, 1, v) || isSupported(vDEP, "VK_KHR_dedicated_allocation")))) && isSupported(vDEP, "VK_EXT_queue_family_foreign");
}

bool check_VK_MSFT_layered_driver(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_MSFT_layered_driver"))
		return true;

	// depends attribute in xml: VK_KHR_get_physical_device_properties2,VK_VERSION_1_1
	return (isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"));
}

bool check_VK_KHR_index_type_uint8(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_KHR_index_type_uint8"))
		return true;

	// depends attribute in xml: VK_KHR_get_physical_device_properties2,VK_VERSION_1_1
	return (isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"));
}

bool check_VK_KHR_line_rasterization(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_KHR_line_rasterization"))
		return true;

	// depends attribute in xml: VK_KHR_get_physical_device_properties2,VK_VERSION_1_1
	return (isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"));
}

bool check_VK_KHR_calibrated_timestamps(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_KHR_calibrated_timestamps"))
		return true;

	// depends attribute in xml: VK_KHR_get_physical_device_properties2,VK_VERSION_1_1
	return (isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"));
}

bool check_VK_KHR_shader_expect_assume(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_KHR_shader_expect_assume"))
		return true;

	// depends attribute in xml: VK_KHR_get_physical_device_properties2,VK_VERSION_1_1
	return (isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"));
}

bool check_VK_KHR_maintenance6(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_KHR_maintenance6"))
		return true;

	// depends attribute in xml: VK_VERSION_1_1
	return isCompatibile(1, 1, v);
}

bool check_VK_NV_descriptor_pool_overallocation(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_NV_descriptor_pool_overallocation"))
		return true;

	// depends attribute in xml: VK_VERSION_1_1
	return isCompatibile(1, 1, v);
}

bool check_VK_KHR_maintenance7(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_KHR_maintenance7"))
		return true;

	// depends attribute in xml: VK_VERSION_1_1
	return isCompatibile(1, 1, v);
}

bool check_VK_EXT_device_generated_commands(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_EXT_device_generated_commands"))
		return true;

	// depends attribute in xml: VK_KHR_buffer_device_address+VK_KHR_maintenance5
	return (isCompatibile(1, 2, v) || isSupported(vDEP, "VK_KHR_buffer_device_address")) && isSupported(vDEP, "VK_KHR_maintenance5");
}

bool check_VK_MESA_image_alignment_control(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_MESA_image_alignment_control"))
		return true;

	// depends attribute in xml: VK_KHR_get_physical_device_properties2,VK_VERSION_1_1
	return (isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"));
}

bool check_VK_EXT_depth_clamp_control(const tcu::UVec2& v, const ExtPropVect& vIEP, const ExtPropVect& vDEP)
{
	DE_UNREF(v);
	DE_UNREF(vIEP);

	if (!isSupported(vDEP, "VK_EXT_depth_clamp_control"))
		return true;

	// depends attribute in xml: VK_KHR_get_physical_device_properties2,VK_VERSION_1_1
	return (isCompatibile(1, 1, v) || isSupported(vIEP, "VK_KHR_get_physical_device_properties2"));
}

static const DependencyCheckVect deviceExtensionDependencies
{
	std::make_pair("VK_KHR_swapchain",										&check_VK_KHR_swapchain),
	std::make_pair("VK_KHR_display_swapchain",								&check_VK_KHR_display_swapchain),
	std::make_pair("VK_EXT_debug_marker",									&check_VK_EXT_debug_marker),
	std::make_pair("VK_KHR_video_queue",									&check_VK_KHR_video_queue),
	std::make_pair("VK_KHR_video_decode_queue",								&check_VK_KHR_video_decode_queue),
	std::make_pair("VK_EXT_transform_feedback",								&check_VK_EXT_transform_feedback),
	std::make_pair("VK_KHR_video_encode_h264",								&check_VK_KHR_video_encode_h264),
	std::make_pair("VK_KHR_video_encode_h265",								&check_VK_KHR_video_encode_h265),
	std::make_pair("VK_KHR_video_decode_h264",								&check_VK_KHR_video_decode_h264),
	std::make_pair("VK_AMD_texture_gather_bias_lod",						&check_VK_AMD_texture_gather_bias_lod),
	std::make_pair("VK_KHR_dynamic_rendering",								&check_VK_KHR_dynamic_rendering),
	std::make_pair("VK_NV_corner_sampled_image",							&check_VK_NV_corner_sampled_image),
	std::make_pair("VK_KHR_multiview",										&check_VK_KHR_multiview),
	std::make_pair("VK_NV_external_memory",									&check_VK_NV_external_memory),
	std::make_pair("VK_NV_external_memory_win32",							&check_VK_NV_external_memory_win32),
	std::make_pair("VK_NV_win32_keyed_mutex",								&check_VK_NV_win32_keyed_mutex),
	std::make_pair("VK_KHR_device_group",									&check_VK_KHR_device_group),
	std::make_pair("VK_EXT_texture_compression_astc_hdr",					&check_VK_EXT_texture_compression_astc_hdr),
	std::make_pair("VK_EXT_astc_decode_mode",								&check_VK_EXT_astc_decode_mode),
	std::make_pair("VK_EXT_pipeline_robustness",							&check_VK_EXT_pipeline_robustness),
	std::make_pair("VK_KHR_external_memory",								&check_VK_KHR_external_memory),
	std::make_pair("VK_KHR_external_memory_win32",							&check_VK_KHR_external_memory_win32),
	std::make_pair("VK_KHR_external_memory_fd",								&check_VK_KHR_external_memory_fd),
	std::make_pair("VK_KHR_win32_keyed_mutex",								&check_VK_KHR_win32_keyed_mutex),
	std::make_pair("VK_KHR_external_semaphore",								&check_VK_KHR_external_semaphore),
	std::make_pair("VK_KHR_external_semaphore_win32",						&check_VK_KHR_external_semaphore_win32),
	std::make_pair("VK_KHR_external_semaphore_fd",							&check_VK_KHR_external_semaphore_fd),
	std::make_pair("VK_KHR_push_descriptor",								&check_VK_KHR_push_descriptor),
	std::make_pair("VK_EXT_conditional_rendering",							&check_VK_EXT_conditional_rendering),
	std::make_pair("VK_KHR_shader_float16_int8",							&check_VK_KHR_shader_float16_int8),
	std::make_pair("VK_KHR_16bit_storage",									&check_VK_KHR_16bit_storage),
	std::make_pair("VK_KHR_incremental_present",							&check_VK_KHR_incremental_present),
	std::make_pair("VK_EXT_display_control",								&check_VK_EXT_display_control),
	std::make_pair("VK_GOOGLE_display_timing",								&check_VK_GOOGLE_display_timing),
	std::make_pair("VK_NVX_multiview_per_view_attributes",					&check_VK_NVX_multiview_per_view_attributes),
	std::make_pair("VK_EXT_discard_rectangles",								&check_VK_EXT_discard_rectangles),
	std::make_pair("VK_EXT_conservative_rasterization",						&check_VK_EXT_conservative_rasterization),
	std::make_pair("VK_EXT_depth_clip_enable",								&check_VK_EXT_depth_clip_enable),
	std::make_pair("VK_EXT_hdr_metadata",									&check_VK_EXT_hdr_metadata),
	std::make_pair("VK_KHR_imageless_framebuffer",							&check_VK_KHR_imageless_framebuffer),
	std::make_pair("VK_KHR_create_renderpass2",								&check_VK_KHR_create_renderpass2),
	std::make_pair("VK_IMG_relaxed_line_rasterization",						&check_VK_IMG_relaxed_line_rasterization),
	std::make_pair("VK_KHR_shared_presentable_image",						&check_VK_KHR_shared_presentable_image),
	std::make_pair("VK_KHR_external_fence",									&check_VK_KHR_external_fence),
	std::make_pair("VK_KHR_external_fence_win32",							&check_VK_KHR_external_fence_win32),
	std::make_pair("VK_KHR_external_fence_fd",								&check_VK_KHR_external_fence_fd),
	std::make_pair("VK_KHR_performance_query",								&check_VK_KHR_performance_query),
	std::make_pair("VK_KHR_variable_pointers",								&check_VK_KHR_variable_pointers),
	std::make_pair("VK_EXT_external_memory_dma_buf",						&check_VK_EXT_external_memory_dma_buf),
	std::make_pair("VK_EXT_queue_family_foreign",							&check_VK_EXT_queue_family_foreign),
	std::make_pair("VK_KHR_dedicated_allocation",							&check_VK_KHR_dedicated_allocation),
	std::make_pair("VK_ANDROID_external_memory_android_hardware_buffer",	&check_VK_ANDROID_external_memory_android_hardware_buffer),
	std::make_pair("VK_EXT_sampler_filter_minmax",							&check_VK_EXT_sampler_filter_minmax),
	std::make_pair("VK_AMDX_shader_enqueue",								&check_VK_AMDX_shader_enqueue),
	std::make_pair("VK_EXT_inline_uniform_block",							&check_VK_EXT_inline_uniform_block),
	std::make_pair("VK_EXT_sample_locations",								&check_VK_EXT_sample_locations),
	std::make_pair("VK_EXT_blend_operation_advanced",						&check_VK_EXT_blend_operation_advanced),
	std::make_pair("VK_KHR_acceleration_structure",							&check_VK_KHR_acceleration_structure),
	std::make_pair("VK_KHR_ray_tracing_pipeline",							&check_VK_KHR_ray_tracing_pipeline),
	std::make_pair("VK_KHR_ray_query",										&check_VK_KHR_ray_query),
	std::make_pair("VK_NV_shader_sm_builtins",								&check_VK_NV_shader_sm_builtins),
	std::make_pair("VK_KHR_sampler_ycbcr_conversion",						&check_VK_KHR_sampler_ycbcr_conversion),
	std::make_pair("VK_EXT_image_drm_format_modifier",						&check_VK_EXT_image_drm_format_modifier),
	std::make_pair("VK_EXT_descriptor_indexing",							&check_VK_EXT_descriptor_indexing),
	std::make_pair("VK_KHR_portability_subset",								&check_VK_KHR_portability_subset),
	std::make_pair("VK_NV_shading_rate_image",								&check_VK_NV_shading_rate_image),
	std::make_pair("VK_NV_ray_tracing",										&check_VK_NV_ray_tracing),
	std::make_pair("VK_NV_representative_fragment_test",					&check_VK_NV_representative_fragment_test),
	std::make_pair("VK_KHR_maintenance3",									&check_VK_KHR_maintenance3),
	std::make_pair("VK_KHR_shader_subgroup_extended_types",					&check_VK_KHR_shader_subgroup_extended_types),
	std::make_pair("VK_KHR_8bit_storage",									&check_VK_KHR_8bit_storage),
	std::make_pair("VK_EXT_external_memory_host",							&check_VK_EXT_external_memory_host),
	std::make_pair("VK_KHR_shader_atomic_int64",							&check_VK_KHR_shader_atomic_int64),
	std::make_pair("VK_KHR_shader_clock",									&check_VK_KHR_shader_clock),
	std::make_pair("VK_EXT_calibrated_timestamps",							&check_VK_EXT_calibrated_timestamps),
	std::make_pair("VK_AMD_shader_core_properties",							&check_VK_AMD_shader_core_properties),
	std::make_pair("VK_KHR_video_decode_h265",								&check_VK_KHR_video_decode_h265),
	std::make_pair("VK_KHR_global_priority",								&check_VK_KHR_global_priority),
	std::make_pair("VK_EXT_vertex_attribute_divisor",						&check_VK_EXT_vertex_attribute_divisor),
	std::make_pair("VK_GGP_frame_token",									&check_VK_GGP_frame_token),
	std::make_pair("VK_KHR_driver_properties",								&check_VK_KHR_driver_properties),
	std::make_pair("VK_KHR_shader_float_controls",							&check_VK_KHR_shader_float_controls),
	std::make_pair("VK_NV_shader_subgroup_partitioned",						&check_VK_NV_shader_subgroup_partitioned),
	std::make_pair("VK_KHR_depth_stencil_resolve",							&check_VK_KHR_depth_stencil_resolve),
	std::make_pair("VK_KHR_swapchain_mutable_format",						&check_VK_KHR_swapchain_mutable_format),
	std::make_pair("VK_NV_compute_shader_derivatives",						&check_VK_NV_compute_shader_derivatives),
	std::make_pair("VK_NV_mesh_shader",										&check_VK_NV_mesh_shader),
	std::make_pair("VK_NV_fragment_shader_barycentric",						&check_VK_NV_fragment_shader_barycentric),
	std::make_pair("VK_NV_shader_image_footprint",							&check_VK_NV_shader_image_footprint),
	std::make_pair("VK_NV_scissor_exclusive",								&check_VK_NV_scissor_exclusive),
	std::make_pair("VK_NV_device_diagnostic_checkpoints",					&check_VK_NV_device_diagnostic_checkpoints),
	std::make_pair("VK_KHR_timeline_semaphore",								&check_VK_KHR_timeline_semaphore),
	std::make_pair("VK_INTEL_shader_integer_functions2",					&check_VK_INTEL_shader_integer_functions2),
	std::make_pair("VK_KHR_vulkan_memory_model",							&check_VK_KHR_vulkan_memory_model),
	std::make_pair("VK_EXT_pci_bus_info",									&check_VK_EXT_pci_bus_info),
	std::make_pair("VK_AMD_display_native_hdr",								&check_VK_AMD_display_native_hdr),
	std::make_pair("VK_KHR_shader_terminate_invocation",					&check_VK_KHR_shader_terminate_invocation),
	std::make_pair("VK_EXT_fragment_density_map",							&check_VK_EXT_fragment_density_map),
	std::make_pair("VK_EXT_scalar_block_layout",							&check_VK_EXT_scalar_block_layout),
	std::make_pair("VK_EXT_subgroup_size_control",							&check_VK_EXT_subgroup_size_control),
	std::make_pair("VK_KHR_fragment_shading_rate",							&check_VK_KHR_fragment_shading_rate),
	std::make_pair("VK_AMD_shader_core_properties2",						&check_VK_AMD_shader_core_properties2),
	std::make_pair("VK_AMD_device_coherent_memory",							&check_VK_AMD_device_coherent_memory),
	std::make_pair("VK_KHR_dynamic_rendering_local_read",					&check_VK_KHR_dynamic_rendering_local_read),
	std::make_pair("VK_EXT_shader_image_atomic_int64",						&check_VK_EXT_shader_image_atomic_int64),
	std::make_pair("VK_KHR_shader_quad_control",							&check_VK_KHR_shader_quad_control),
	std::make_pair("VK_KHR_spirv_1_4",										&check_VK_KHR_spirv_1_4),
	std::make_pair("VK_EXT_memory_budget",									&check_VK_EXT_memory_budget),
	std::make_pair("VK_EXT_memory_priority",								&check_VK_EXT_memory_priority),
	std::make_pair("VK_NV_dedicated_allocation_image_aliasing",				&check_VK_NV_dedicated_allocation_image_aliasing),
	std::make_pair("VK_KHR_separate_depth_stencil_layouts",					&check_VK_KHR_separate_depth_stencil_layouts),
	std::make_pair("VK_EXT_buffer_device_address",							&check_VK_EXT_buffer_device_address),
	std::make_pair("VK_KHR_present_wait",									&check_VK_KHR_present_wait),
	std::make_pair("VK_NV_cooperative_matrix",								&check_VK_NV_cooperative_matrix),
	std::make_pair("VK_NV_coverage_reduction_mode",							&check_VK_NV_coverage_reduction_mode),
	std::make_pair("VK_EXT_fragment_shader_interlock",						&check_VK_EXT_fragment_shader_interlock),
	std::make_pair("VK_EXT_ycbcr_image_arrays",								&check_VK_EXT_ycbcr_image_arrays),
	std::make_pair("VK_KHR_uniform_buffer_standard_layout",					&check_VK_KHR_uniform_buffer_standard_layout),
	std::make_pair("VK_EXT_provoking_vertex",								&check_VK_EXT_provoking_vertex),
	std::make_pair("VK_EXT_full_screen_exclusive",							&check_VK_EXT_full_screen_exclusive),
	std::make_pair("VK_KHR_buffer_device_address",							&check_VK_KHR_buffer_device_address),
	std::make_pair("VK_EXT_line_rasterization",								&check_VK_EXT_line_rasterization),
	std::make_pair("VK_EXT_shader_atomic_float",							&check_VK_EXT_shader_atomic_float),
	std::make_pair("VK_EXT_host_query_reset",								&check_VK_EXT_host_query_reset),
	std::make_pair("VK_EXT_index_type_uint8",								&check_VK_EXT_index_type_uint8),
	std::make_pair("VK_EXT_extended_dynamic_state",							&check_VK_EXT_extended_dynamic_state),
	std::make_pair("VK_KHR_pipeline_executable_properties",					&check_VK_KHR_pipeline_executable_properties),
	std::make_pair("VK_EXT_host_image_copy",								&check_VK_EXT_host_image_copy),
	std::make_pair("VK_EXT_map_memory_placed",								&check_VK_EXT_map_memory_placed),
	std::make_pair("VK_EXT_shader_atomic_float2",							&check_VK_EXT_shader_atomic_float2),
	std::make_pair("VK_EXT_swapchain_maintenance1",							&check_VK_EXT_swapchain_maintenance1),
	std::make_pair("VK_EXT_shader_demote_to_helper_invocation",				&check_VK_EXT_shader_demote_to_helper_invocation),
	std::make_pair("VK_NV_device_generated_commands",						&check_VK_NV_device_generated_commands),
	std::make_pair("VK_NV_inherited_viewport_scissor",						&check_VK_NV_inherited_viewport_scissor),
	std::make_pair("VK_KHR_shader_integer_dot_product",						&check_VK_KHR_shader_integer_dot_product),
	std::make_pair("VK_EXT_texel_buffer_alignment",							&check_VK_EXT_texel_buffer_alignment),
	std::make_pair("VK_EXT_depth_bias_control",								&check_VK_EXT_depth_bias_control),
	std::make_pair("VK_EXT_device_memory_report",							&check_VK_EXT_device_memory_report),
	std::make_pair("VK_EXT_robustness2",									&check_VK_EXT_robustness2),
	std::make_pair("VK_EXT_custom_border_color",							&check_VK_EXT_custom_border_color),
	std::make_pair("VK_NV_present_barrier",									&check_VK_NV_present_barrier),
	std::make_pair("VK_KHR_present_id",										&check_VK_KHR_present_id),
	std::make_pair("VK_EXT_private_data",									&check_VK_EXT_private_data),
	std::make_pair("VK_EXT_pipeline_creation_cache_control",				&check_VK_EXT_pipeline_creation_cache_control),
	std::make_pair("VK_KHR_video_encode_queue",								&check_VK_KHR_video_encode_queue),
	std::make_pair("VK_NV_device_diagnostics_config",						&check_VK_NV_device_diagnostics_config),
	std::make_pair("VK_KHR_synchronization2",								&check_VK_KHR_synchronization2),
	std::make_pair("VK_EXT_descriptor_buffer",								&check_VK_EXT_descriptor_buffer),
	std::make_pair("VK_EXT_graphics_pipeline_library",						&check_VK_EXT_graphics_pipeline_library),
	std::make_pair("VK_AMD_shader_early_and_late_fragment_tests",			&check_VK_AMD_shader_early_and_late_fragment_tests),
	std::make_pair("VK_KHR_fragment_shader_barycentric",					&check_VK_KHR_fragment_shader_barycentric),
	std::make_pair("VK_KHR_shader_subgroup_uniform_control_flow",			&check_VK_KHR_shader_subgroup_uniform_control_flow),
	std::make_pair("VK_KHR_zero_initialize_workgroup_memory",				&check_VK_KHR_zero_initialize_workgroup_memory),
	std::make_pair("VK_NV_fragment_shading_rate_enums",						&check_VK_NV_fragment_shading_rate_enums),
	std::make_pair("VK_NV_ray_tracing_motion_blur",							&check_VK_NV_ray_tracing_motion_blur),
	std::make_pair("VK_EXT_mesh_shader",									&check_VK_EXT_mesh_shader),
	std::make_pair("VK_EXT_ycbcr_2plane_444_formats",						&check_VK_EXT_ycbcr_2plane_444_formats),
	std::make_pair("VK_EXT_fragment_density_map2",							&check_VK_EXT_fragment_density_map2),
	std::make_pair("VK_QCOM_rotated_copy_commands",							&check_VK_QCOM_rotated_copy_commands),
	std::make_pair("VK_EXT_image_robustness",								&check_VK_EXT_image_robustness),
	std::make_pair("VK_KHR_workgroup_memory_explicit_layout",				&check_VK_KHR_workgroup_memory_explicit_layout),
	std::make_pair("VK_KHR_copy_commands2",									&check_VK_KHR_copy_commands2),
	std::make_pair("VK_EXT_image_compression_control",						&check_VK_EXT_image_compression_control),
	std::make_pair("VK_EXT_attachment_feedback_loop_layout",				&check_VK_EXT_attachment_feedback_loop_layout),
	std::make_pair("VK_EXT_4444_formats",									&check_VK_EXT_4444_formats),
	std::make_pair("VK_EXT_device_fault",									&check_VK_EXT_device_fault),
	std::make_pair("VK_ARM_rasterization_order_attachment_access",			&check_VK_ARM_rasterization_order_attachment_access),
	std::make_pair("VK_EXT_rgba10x6_formats",								&check_VK_EXT_rgba10x6_formats),
	std::make_pair("VK_NV_acquire_winrt_display",							&check_VK_NV_acquire_winrt_display),
	std::make_pair("VK_VALVE_mutable_descriptor_type",						&check_VK_VALVE_mutable_descriptor_type),
	std::make_pair("VK_EXT_vertex_input_dynamic_state",						&check_VK_EXT_vertex_input_dynamic_state),
	std::make_pair("VK_EXT_physical_device_drm",							&check_VK_EXT_physical_device_drm),
	std::make_pair("VK_EXT_device_address_binding_report",					&check_VK_EXT_device_address_binding_report),
	std::make_pair("VK_EXT_depth_clip_control",								&check_VK_EXT_depth_clip_control),
	std::make_pair("VK_EXT_primitive_topology_list_restart",				&check_VK_EXT_primitive_topology_list_restart),
	std::make_pair("VK_KHR_format_feature_flags2",							&check_VK_KHR_format_feature_flags2),
	std::make_pair("VK_FUCHSIA_external_memory",							&check_VK_FUCHSIA_external_memory),
	std::make_pair("VK_FUCHSIA_external_semaphore",							&check_VK_FUCHSIA_external_semaphore),
	std::make_pair("VK_FUCHSIA_buffer_collection",							&check_VK_FUCHSIA_buffer_collection),
	std::make_pair("VK_HUAWEI_subpass_shading",								&check_VK_HUAWEI_subpass_shading),
	std::make_pair("VK_HUAWEI_invocation_mask",								&check_VK_HUAWEI_invocation_mask),
	std::make_pair("VK_NV_external_memory_rdma",							&check_VK_NV_external_memory_rdma),
	std::make_pair("VK_EXT_pipeline_properties",							&check_VK_EXT_pipeline_properties),
	std::make_pair("VK_EXT_multisampled_render_to_single_sampled",			&check_VK_EXT_multisampled_render_to_single_sampled),
	std::make_pair("VK_EXT_extended_dynamic_state2",						&check_VK_EXT_extended_dynamic_state2),
	std::make_pair("VK_EXT_color_write_enable",								&check_VK_EXT_color_write_enable),
	std::make_pair("VK_EXT_primitives_generated_query",						&check_VK_EXT_primitives_generated_query),
	std::make_pair("VK_KHR_ray_tracing_maintenance1",						&check_VK_KHR_ray_tracing_maintenance1),
	std::make_pair("VK_EXT_global_priority_query",							&check_VK_EXT_global_priority_query),
	std::make_pair("VK_EXT_image_view_min_lod",								&check_VK_EXT_image_view_min_lod),
	std::make_pair("VK_EXT_multi_draw",										&check_VK_EXT_multi_draw),
	std::make_pair("VK_EXT_image_2d_view_of_3d",							&check_VK_EXT_image_2d_view_of_3d),
	std::make_pair("VK_EXT_shader_tile_image",								&check_VK_EXT_shader_tile_image),
	std::make_pair("VK_EXT_opacity_micromap",								&check_VK_EXT_opacity_micromap),
	std::make_pair("VK_NV_displacement_micromap",							&check_VK_NV_displacement_micromap),
	std::make_pair("VK_HUAWEI_cluster_culling_shader",						&check_VK_HUAWEI_cluster_culling_shader),
	std::make_pair("VK_EXT_border_color_swizzle",							&check_VK_EXT_border_color_swizzle),
	std::make_pair("VK_EXT_pageable_device_local_memory",					&check_VK_EXT_pageable_device_local_memory),
	std::make_pair("VK_KHR_maintenance4",									&check_VK_KHR_maintenance4),
	std::make_pair("VK_ARM_shader_core_properties",							&check_VK_ARM_shader_core_properties),
	std::make_pair("VK_ARM_scheduling_controls",							&check_VK_ARM_scheduling_controls),
	std::make_pair("VK_EXT_image_sliced_view_of_3d",						&check_VK_EXT_image_sliced_view_of_3d),
	std::make_pair("VK_VALVE_descriptor_set_host_mapping",					&check_VK_VALVE_descriptor_set_host_mapping),
	std::make_pair("VK_EXT_depth_clamp_zero_one",							&check_VK_EXT_depth_clamp_zero_one),
	std::make_pair("VK_EXT_non_seamless_cube_map",							&check_VK_EXT_non_seamless_cube_map),
	std::make_pair("VK_ARM_render_pass_striped",							&check_VK_ARM_render_pass_striped),
	std::make_pair("VK_QCOM_fragment_density_map_offset",					&check_VK_QCOM_fragment_density_map_offset),
	std::make_pair("VK_NV_copy_memory_indirect",							&check_VK_NV_copy_memory_indirect),
	std::make_pair("VK_NV_memory_decompression",							&check_VK_NV_memory_decompression),
	std::make_pair("VK_NV_device_generated_commands_compute",				&check_VK_NV_device_generated_commands_compute),
	std::make_pair("VK_NV_linear_color_attachment",							&check_VK_NV_linear_color_attachment),
	std::make_pair("VK_KHR_shader_maximal_reconvergence",					&check_VK_KHR_shader_maximal_reconvergence),
	std::make_pair("VK_EXT_image_compression_control_swapchain",			&check_VK_EXT_image_compression_control_swapchain),
	std::make_pair("VK_QCOM_image_processing",								&check_VK_QCOM_image_processing),
	std::make_pair("VK_EXT_nested_command_buffer",							&check_VK_EXT_nested_command_buffer),
	std::make_pair("VK_EXT_external_memory_acquire_unmodified",				&check_VK_EXT_external_memory_acquire_unmodified),
	std::make_pair("VK_EXT_extended_dynamic_state3",						&check_VK_EXT_extended_dynamic_state3),
	std::make_pair("VK_EXT_subpass_merge_feedback",							&check_VK_EXT_subpass_merge_feedback),
	std::make_pair("VK_EXT_shader_module_identifier",						&check_VK_EXT_shader_module_identifier),
	std::make_pair("VK_EXT_rasterization_order_attachment_access",			&check_VK_EXT_rasterization_order_attachment_access),
	std::make_pair("VK_NV_optical_flow",									&check_VK_NV_optical_flow),
	std::make_pair("VK_EXT_legacy_dithering",								&check_VK_EXT_legacy_dithering),
	std::make_pair("VK_EXT_pipeline_protected_access",						&check_VK_EXT_pipeline_protected_access),
	std::make_pair("VK_ANDROID_external_format_resolve",					&check_VK_ANDROID_external_format_resolve),
	std::make_pair("VK_KHR_maintenance5",									&check_VK_KHR_maintenance5),
	std::make_pair("VK_KHR_ray_tracing_position_fetch",						&check_VK_KHR_ray_tracing_position_fetch),
	std::make_pair("VK_EXT_shader_object",									&check_VK_EXT_shader_object),
	std::make_pair("VK_KHR_pipeline_binary",								&check_VK_KHR_pipeline_binary),
	std::make_pair("VK_QCOM_tile_properties",								&check_VK_QCOM_tile_properties),
	std::make_pair("VK_SEC_amigo_profiling",								&check_VK_SEC_amigo_profiling),
	std::make_pair("VK_QCOM_multiview_per_view_viewports",					&check_VK_QCOM_multiview_per_view_viewports),
	std::make_pair("VK_NV_ray_tracing_invocation_reorder",					&check_VK_NV_ray_tracing_invocation_reorder),
	std::make_pair("VK_EXT_mutable_descriptor_type",						&check_VK_EXT_mutable_descriptor_type),
	std::make_pair("VK_EXT_legacy_vertex_attributes",						&check_VK_EXT_legacy_vertex_attributes),
	std::make_pair("VK_ARM_shader_core_builtins",							&check_VK_ARM_shader_core_builtins),
	std::make_pair("VK_EXT_pipeline_library_group_handles",					&check_VK_EXT_pipeline_library_group_handles),
	std::make_pair("VK_EXT_dynamic_rendering_unused_attachments",			&check_VK_EXT_dynamic_rendering_unused_attachments),
	std::make_pair("VK_NV_low_latency2",									&check_VK_NV_low_latency2),
	std::make_pair("VK_KHR_cooperative_matrix",								&check_VK_KHR_cooperative_matrix),
	std::make_pair("VK_KHR_compute_shader_derivatives",						&check_VK_KHR_compute_shader_derivatives),
	std::make_pair("VK_KHR_video_decode_av1",								&check_VK_KHR_video_decode_av1),
	std::make_pair("VK_KHR_video_maintenance1",								&check_VK_KHR_video_maintenance1),
	std::make_pair("VK_NV_per_stage_descriptor_set",						&check_VK_NV_per_stage_descriptor_set),
	std::make_pair("VK_QCOM_image_processing2",								&check_VK_QCOM_image_processing2),
	std::make_pair("VK_QCOM_filter_cubic_weights",							&check_VK_QCOM_filter_cubic_weights),
	std::make_pair("VK_QCOM_filter_cubic_clamp",							&check_VK_QCOM_filter_cubic_clamp),
	std::make_pair("VK_EXT_attachment_feedback_loop_dynamic_state",			&check_VK_EXT_attachment_feedback_loop_dynamic_state),
	std::make_pair("VK_KHR_vertex_attribute_divisor",						&check_VK_KHR_vertex_attribute_divisor),
	std::make_pair("VK_KHR_shader_float_controls2",							&check_VK_KHR_shader_float_controls2),
	std::make_pair("VK_QNX_external_memory_screen_buffer",					&check_VK_QNX_external_memory_screen_buffer),
	std::make_pair("VK_MSFT_layered_driver",								&check_VK_MSFT_layered_driver),
	std::make_pair("VK_KHR_index_type_uint8",								&check_VK_KHR_index_type_uint8),
	std::make_pair("VK_KHR_line_rasterization",								&check_VK_KHR_line_rasterization),
	std::make_pair("VK_KHR_calibrated_timestamps",							&check_VK_KHR_calibrated_timestamps),
	std::make_pair("VK_KHR_shader_expect_assume",							&check_VK_KHR_shader_expect_assume),
	std::make_pair("VK_KHR_maintenance6",									&check_VK_KHR_maintenance6),
	std::make_pair("VK_NV_descriptor_pool_overallocation",					&check_VK_NV_descriptor_pool_overallocation),
	std::make_pair("VK_KHR_maintenance7",									&check_VK_KHR_maintenance7),
	std::make_pair("VK_EXT_device_generated_commands",						&check_VK_EXT_device_generated_commands),
	std::make_pair("VK_MESA_image_alignment_control",						&check_VK_MESA_image_alignment_control),
	std::make_pair("VK_EXT_depth_clamp_control",							&check_VK_EXT_depth_clamp_control),
};

static const std::tuple<uint32_t, uint32_t, uint32_t, uint32_t>	releasedApiVersions[]	=
{
	std::make_tuple(541065216, 1, 1, 0),
	std::make_tuple(541077504, 1, 1, 3),
	std::make_tuple(541073408, 1, 1, 2),
	std::make_tuple(541069312, 1, 1, 1),
	std::make_tuple(541065216, 1, 1, 0),
};
static const std::tuple<uint32_t, uint32_t, const char*>	extensionRequiredCoreVersion[]	 =
{
	std::make_tuple(1, 0, "VK_KHR_surface"),
	std::make_tuple(1, 0, "VK_KHR_swapchain"),
	std::make_tuple(1, 0, "VK_KHR_display"),
	std::make_tuple(1, 0, "VK_KHR_display_swapchain"),
	std::make_tuple(1, 0, "VK_KHR_xlib_surface"),
	std::make_tuple(1, 0, "VK_KHR_xcb_surface"),
	std::make_tuple(1, 0, "VK_KHR_wayland_surface"),
	std::make_tuple(1, 0, "VK_KHR_android_surface"),
	std::make_tuple(1, 0, "VK_KHR_win32_surface"),
	std::make_tuple(1, 0, "VK_EXT_debug_report"),
	std::make_tuple(1, 0, "VK_NV_glsl_shader"),
	std::make_tuple(1, 0, "VK_EXT_depth_range_unrestricted"),
	std::make_tuple(1, 0, "VK_KHR_sampler_mirror_clamp_to_edge"),
	std::make_tuple(1, 0, "VK_IMG_filter_cubic"),
	std::make_tuple(1, 0, "VK_AMD_rasterization_order"),
	std::make_tuple(1, 0, "VK_AMD_shader_trinary_minmax"),
	std::make_tuple(1, 0, "VK_AMD_shader_explicit_vertex_parameter"),
	std::make_tuple(1, 0, "VK_EXT_debug_marker"),
	std::make_tuple(1, 0, "VK_KHR_video_queue"),
	std::make_tuple(1, 0, "VK_KHR_video_decode_queue"),
	std::make_tuple(1, 0, "VK_AMD_gcn_shader"),
	std::make_tuple(1, 0, "VK_NV_dedicated_allocation"),
	std::make_tuple(1, 0, "VK_EXT_transform_feedback"),
	std::make_tuple(1, 0, "VK_NVX_binary_import"),
	std::make_tuple(1, 0, "VK_NVX_image_view_handle"),
	std::make_tuple(1, 0, "VK_AMD_draw_indirect_count"),
	std::make_tuple(1, 0, "VK_AMD_negative_viewport_height"),
	std::make_tuple(1, 0, "VK_AMD_gpu_shader_half_float"),
	std::make_tuple(1, 0, "VK_AMD_shader_ballot"),
	std::make_tuple(1, 0, "VK_KHR_video_encode_h264"),
	std::make_tuple(1, 0, "VK_KHR_video_encode_h265"),
	std::make_tuple(1, 0, "VK_KHR_video_decode_h264"),
	std::make_tuple(1, 0, "VK_AMD_texture_gather_bias_lod"),
	std::make_tuple(1, 0, "VK_AMD_shader_info"),
	std::make_tuple(1, 0, "VK_KHR_dynamic_rendering"),
	std::make_tuple(1, 0, "VK_AMD_shader_image_load_store_lod"),
	std::make_tuple(1, 0, "VK_GGP_stream_descriptor_surface"),
	std::make_tuple(1, 0, "VK_NV_corner_sampled_image"),
	std::make_tuple(1, 0, "VK_KHR_multiview"),
	std::make_tuple(1, 0, "VK_IMG_format_pvrtc"),
	std::make_tuple(1, 0, "VK_NV_external_memory_capabilities"),
	std::make_tuple(1, 0, "VK_NV_external_memory"),
	std::make_tuple(1, 0, "VK_NV_external_memory_win32"),
	std::make_tuple(1, 0, "VK_NV_win32_keyed_mutex"),
	std::make_tuple(1, 0, "VK_KHR_get_physical_device_properties2"),
	std::make_tuple(1, 0, "VK_KHR_device_group"),
	std::make_tuple(1, 0, "VK_EXT_validation_flags"),
	std::make_tuple(1, 0, "VK_NN_vi_surface"),
	std::make_tuple(1, 0, "VK_KHR_shader_draw_parameters"),
	std::make_tuple(1, 0, "VK_EXT_shader_subgroup_ballot"),
	std::make_tuple(1, 0, "VK_EXT_shader_subgroup_vote"),
	std::make_tuple(1, 0, "VK_EXT_texture_compression_astc_hdr"),
	std::make_tuple(1, 0, "VK_EXT_astc_decode_mode"),
	std::make_tuple(1, 0, "VK_EXT_pipeline_robustness"),
	std::make_tuple(1, 0, "VK_KHR_maintenance1"),
	std::make_tuple(1, 0, "VK_KHR_device_group_creation"),
	std::make_tuple(1, 0, "VK_KHR_external_memory_capabilities"),
	std::make_tuple(1, 0, "VK_KHR_external_memory"),
	std::make_tuple(1, 0, "VK_KHR_external_memory_win32"),
	std::make_tuple(1, 0, "VK_KHR_external_memory_fd"),
	std::make_tuple(1, 0, "VK_KHR_win32_keyed_mutex"),
	std::make_tuple(1, 0, "VK_KHR_external_semaphore_capabilities"),
	std::make_tuple(1, 0, "VK_KHR_external_semaphore"),
	std::make_tuple(1, 0, "VK_KHR_external_semaphore_win32"),
	std::make_tuple(1, 0, "VK_KHR_external_semaphore_fd"),
	std::make_tuple(1, 0, "VK_KHR_push_descriptor"),
	std::make_tuple(1, 0, "VK_EXT_conditional_rendering"),
	std::make_tuple(1, 0, "VK_KHR_shader_float16_int8"),
	std::make_tuple(1, 0, "VK_KHR_16bit_storage"),
	std::make_tuple(1, 0, "VK_KHR_incremental_present"),
	std::make_tuple(1, 0, "VK_KHR_descriptor_update_template"),
	std::make_tuple(1, 0, "VK_NV_clip_space_w_scaling"),
	std::make_tuple(1, 0, "VK_EXT_direct_mode_display"),
	std::make_tuple(1, 0, "VK_EXT_acquire_xlib_display"),
	std::make_tuple(1, 0, "VK_EXT_display_surface_counter"),
	std::make_tuple(1, 0, "VK_EXT_display_control"),
	std::make_tuple(1, 0, "VK_GOOGLE_display_timing"),
	std::make_tuple(1, 0, "VK_NV_sample_mask_override_coverage"),
	std::make_tuple(1, 0, "VK_NV_geometry_shader_passthrough"),
	std::make_tuple(1, 0, "VK_NV_viewport_array2"),
	std::make_tuple(1, 0, "VK_NVX_multiview_per_view_attributes"),
	std::make_tuple(1, 0, "VK_NV_viewport_swizzle"),
	std::make_tuple(1, 0, "VK_EXT_discard_rectangles"),
	std::make_tuple(1, 0, "VK_EXT_conservative_rasterization"),
	std::make_tuple(1, 0, "VK_EXT_depth_clip_enable"),
	std::make_tuple(1, 0, "VK_EXT_swapchain_colorspace"),
	std::make_tuple(1, 0, "VK_EXT_hdr_metadata"),
	std::make_tuple(1, 0, "VK_KHR_imageless_framebuffer"),
	std::make_tuple(1, 0, "VK_KHR_create_renderpass2"),
	std::make_tuple(1, 0, "VK_IMG_relaxed_line_rasterization"),
	std::make_tuple(1, 0, "VK_KHR_shared_presentable_image"),
	std::make_tuple(1, 0, "VK_KHR_external_fence_capabilities"),
	std::make_tuple(1, 0, "VK_KHR_external_fence"),
	std::make_tuple(1, 0, "VK_KHR_external_fence_win32"),
	std::make_tuple(1, 0, "VK_KHR_external_fence_fd"),
	std::make_tuple(1, 0, "VK_KHR_performance_query"),
	std::make_tuple(1, 0, "VK_KHR_maintenance2"),
	std::make_tuple(1, 0, "VK_KHR_get_surface_capabilities2"),
	std::make_tuple(1, 0, "VK_KHR_variable_pointers"),
	std::make_tuple(1, 0, "VK_KHR_get_display_properties2"),
	std::make_tuple(1, 0, "VK_MVK_ios_surface"),
	std::make_tuple(1, 0, "VK_MVK_macos_surface"),
	std::make_tuple(1, 0, "VK_EXT_external_memory_dma_buf"),
	std::make_tuple(1, 0, "VK_EXT_queue_family_foreign"),
	std::make_tuple(1, 0, "VK_KHR_dedicated_allocation"),
	std::make_tuple(1, 0, "VK_EXT_debug_utils"),
	std::make_tuple(1, 0, "VK_ANDROID_external_memory_android_hardware_buffer"),
	std::make_tuple(1, 0, "VK_EXT_sampler_filter_minmax"),
	std::make_tuple(1, 0, "VK_KHR_storage_buffer_storage_class"),
	std::make_tuple(1, 0, "VK_AMD_gpu_shader_int16"),
	std::make_tuple(1, 1, "VK_AMDX_shader_enqueue"),
	std::make_tuple(1, 0, "VK_AMD_mixed_attachment_samples"),
	std::make_tuple(1, 0, "VK_AMD_shader_fragment_mask"),
	std::make_tuple(1, 0, "VK_EXT_inline_uniform_block"),
	std::make_tuple(1, 0, "VK_EXT_shader_stencil_export"),
	std::make_tuple(1, 0, "VK_EXT_sample_locations"),
	std::make_tuple(1, 0, "VK_KHR_relaxed_block_layout"),
	std::make_tuple(1, 0, "VK_KHR_get_memory_requirements2"),
	std::make_tuple(1, 0, "VK_KHR_image_format_list"),
	std::make_tuple(1, 0, "VK_EXT_blend_operation_advanced"),
	std::make_tuple(1, 0, "VK_NV_fragment_coverage_to_color"),
	std::make_tuple(1, 0, "VK_KHR_acceleration_structure"),
	std::make_tuple(1, 1, "VK_KHR_ray_tracing_pipeline"),
	std::make_tuple(1, 1, "VK_KHR_ray_query"),
	std::make_tuple(1, 0, "VK_NV_framebuffer_mixed_samples"),
	std::make_tuple(1, 0, "VK_NV_fill_rectangle"),
	std::make_tuple(1, 1, "VK_NV_shader_sm_builtins"),
	std::make_tuple(1, 0, "VK_EXT_post_depth_coverage"),
	std::make_tuple(1, 0, "VK_KHR_sampler_ycbcr_conversion"),
	std::make_tuple(1, 0, "VK_KHR_bind_memory2"),
	std::make_tuple(1, 0, "VK_EXT_image_drm_format_modifier"),
	std::make_tuple(1, 0, "VK_EXT_validation_cache"),
	std::make_tuple(1, 0, "VK_EXT_descriptor_indexing"),
	std::make_tuple(1, 0, "VK_EXT_shader_viewport_index_layer"),
	std::make_tuple(1, 0, "VK_KHR_portability_subset"),
	std::make_tuple(1, 0, "VK_NV_shading_rate_image"),
	std::make_tuple(1, 0, "VK_NV_ray_tracing"),
	std::make_tuple(1, 0, "VK_NV_representative_fragment_test"),
	std::make_tuple(1, 0, "VK_KHR_maintenance3"),
	std::make_tuple(1, 0, "VK_KHR_draw_indirect_count"),
	std::make_tuple(1, 0, "VK_EXT_filter_cubic"),
	std::make_tuple(1, 0, "VK_QCOM_render_pass_shader_resolve"),
	std::make_tuple(1, 0, "VK_EXT_global_priority"),
	std::make_tuple(1, 1, "VK_KHR_shader_subgroup_extended_types"),
	std::make_tuple(1, 0, "VK_KHR_8bit_storage"),
	std::make_tuple(1, 0, "VK_EXT_external_memory_host"),
	std::make_tuple(1, 0, "VK_AMD_buffer_marker"),
	std::make_tuple(1, 0, "VK_KHR_shader_atomic_int64"),
	std::make_tuple(1, 0, "VK_KHR_shader_clock"),
	std::make_tuple(1, 0, "VK_AMD_pipeline_compiler_control"),
	std::make_tuple(1, 0, "VK_EXT_calibrated_timestamps"),
	std::make_tuple(1, 0, "VK_AMD_shader_core_properties"),
	std::make_tuple(1, 0, "VK_KHR_video_decode_h265"),
	std::make_tuple(1, 0, "VK_KHR_global_priority"),
	std::make_tuple(1, 0, "VK_AMD_memory_overallocation_behavior"),
	std::make_tuple(1, 0, "VK_EXT_vertex_attribute_divisor"),
	std::make_tuple(1, 0, "VK_GGP_frame_token"),
	std::make_tuple(1, 0, "VK_EXT_pipeline_creation_feedback"),
	std::make_tuple(1, 0, "VK_KHR_driver_properties"),
	std::make_tuple(1, 0, "VK_KHR_shader_float_controls"),
	std::make_tuple(1, 1, "VK_NV_shader_subgroup_partitioned"),
	std::make_tuple(1, 0, "VK_KHR_depth_stencil_resolve"),
	std::make_tuple(1, 0, "VK_KHR_swapchain_mutable_format"),
	std::make_tuple(1, 0, "VK_NV_compute_shader_derivatives"),
	std::make_tuple(1, 0, "VK_NV_mesh_shader"),
	std::make_tuple(1, 0, "VK_NV_fragment_shader_barycentric"),
	std::make_tuple(1, 0, "VK_NV_shader_image_footprint"),
	std::make_tuple(1, 0, "VK_NV_scissor_exclusive"),
	std::make_tuple(1, 0, "VK_NV_device_diagnostic_checkpoints"),
	std::make_tuple(1, 0, "VK_KHR_timeline_semaphore"),
	std::make_tuple(1, 0, "VK_INTEL_shader_integer_functions2"),
	std::make_tuple(1, 0, "VK_INTEL_performance_query"),
	std::make_tuple(1, 0, "VK_KHR_vulkan_memory_model"),
	std::make_tuple(1, 0, "VK_EXT_pci_bus_info"),
	std::make_tuple(1, 0, "VK_AMD_display_native_hdr"),
	std::make_tuple(1, 0, "VK_FUCHSIA_imagepipe_surface"),
	std::make_tuple(1, 0, "VK_KHR_shader_terminate_invocation"),
	std::make_tuple(1, 0, "VK_EXT_metal_surface"),
	std::make_tuple(1, 0, "VK_EXT_fragment_density_map"),
	std::make_tuple(1, 0, "VK_EXT_scalar_block_layout"),
	std::make_tuple(1, 0, "VK_GOOGLE_hlsl_functionality1"),
	std::make_tuple(1, 0, "VK_GOOGLE_decorate_string"),
	std::make_tuple(1, 1, "VK_EXT_subgroup_size_control"),
	std::make_tuple(1, 0, "VK_KHR_fragment_shading_rate"),
	std::make_tuple(1, 0, "VK_AMD_shader_core_properties2"),
	std::make_tuple(1, 0, "VK_AMD_device_coherent_memory"),
	std::make_tuple(1, 0, "VK_KHR_dynamic_rendering_local_read"),
	std::make_tuple(1, 0, "VK_EXT_shader_image_atomic_int64"),
	std::make_tuple(1, 1, "VK_KHR_shader_quad_control"),
	std::make_tuple(1, 1, "VK_KHR_spirv_1_4"),
	std::make_tuple(1, 0, "VK_EXT_memory_budget"),
	std::make_tuple(1, 0, "VK_EXT_memory_priority"),
	std::make_tuple(1, 1, "VK_KHR_surface_protected_capabilities"),
	std::make_tuple(1, 0, "VK_NV_dedicated_allocation_image_aliasing"),
	std::make_tuple(1, 0, "VK_KHR_separate_depth_stencil_layouts"),
	std::make_tuple(1, 0, "VK_EXT_buffer_device_address"),
	std::make_tuple(1, 0, "VK_EXT_tooling_info"),
	std::make_tuple(1, 0, "VK_EXT_separate_stencil_usage"),
	std::make_tuple(1, 0, "VK_EXT_validation_features"),
	std::make_tuple(1, 0, "VK_KHR_present_wait"),
	std::make_tuple(1, 0, "VK_NV_cooperative_matrix"),
	std::make_tuple(1, 0, "VK_NV_coverage_reduction_mode"),
	std::make_tuple(1, 0, "VK_EXT_fragment_shader_interlock"),
	std::make_tuple(1, 0, "VK_EXT_ycbcr_image_arrays"),
	std::make_tuple(1, 0, "VK_KHR_uniform_buffer_standard_layout"),
	std::make_tuple(1, 0, "VK_EXT_provoking_vertex"),
	std::make_tuple(1, 0, "VK_EXT_full_screen_exclusive"),
	std::make_tuple(1, 0, "VK_EXT_headless_surface"),
	std::make_tuple(1, 0, "VK_KHR_buffer_device_address"),
	std::make_tuple(1, 0, "VK_EXT_line_rasterization"),
	std::make_tuple(1, 0, "VK_EXT_shader_atomic_float"),
	std::make_tuple(1, 0, "VK_EXT_host_query_reset"),
	std::make_tuple(1, 0, "VK_EXT_index_type_uint8"),
	std::make_tuple(1, 0, "VK_EXT_extended_dynamic_state"),
	std::make_tuple(1, 0, "VK_KHR_deferred_host_operations"),
	std::make_tuple(1, 0, "VK_KHR_pipeline_executable_properties"),
	std::make_tuple(1, 0, "VK_EXT_host_image_copy"),
	std::make_tuple(1, 0, "VK_KHR_map_memory2"),
	std::make_tuple(1, 0, "VK_EXT_map_memory_placed"),
	std::make_tuple(1, 0, "VK_EXT_shader_atomic_float2"),
	std::make_tuple(1, 0, "VK_EXT_surface_maintenance1"),
	std::make_tuple(1, 0, "VK_EXT_swapchain_maintenance1"),
	std::make_tuple(1, 0, "VK_EXT_shader_demote_to_helper_invocation"),
	std::make_tuple(1, 0, "VK_NV_device_generated_commands"),
	std::make_tuple(1, 0, "VK_NV_inherited_viewport_scissor"),
	std::make_tuple(1, 0, "VK_KHR_shader_integer_dot_product"),
	std::make_tuple(1, 0, "VK_EXT_texel_buffer_alignment"),
	std::make_tuple(1, 0, "VK_QCOM_render_pass_transform"),
	std::make_tuple(1, 0, "VK_EXT_depth_bias_control"),
	std::make_tuple(1, 0, "VK_EXT_device_memory_report"),
	std::make_tuple(1, 0, "VK_EXT_acquire_drm_display"),
	std::make_tuple(1, 0, "VK_EXT_robustness2"),
	std::make_tuple(1, 0, "VK_EXT_custom_border_color"),
	std::make_tuple(1, 0, "VK_GOOGLE_user_type"),
	std::make_tuple(1, 0, "VK_KHR_pipeline_library"),
	std::make_tuple(1, 0, "VK_NV_present_barrier"),
	std::make_tuple(1, 0, "VK_KHR_shader_non_semantic_info"),
	std::make_tuple(1, 0, "VK_KHR_present_id"),
	std::make_tuple(1, 0, "VK_EXT_private_data"),
	std::make_tuple(1, 0, "VK_EXT_pipeline_creation_cache_control"),
	std::make_tuple(1, 0, "VK_KHR_video_encode_queue"),
	std::make_tuple(1, 0, "VK_NV_device_diagnostics_config"),
	std::make_tuple(1, 0, "VK_QCOM_render_pass_store_ops"),
	std::make_tuple(1, 0, "VK_NV_cuda_kernel_launch"),
	std::make_tuple(1, 0, "VK_NV_low_latency"),
	std::make_tuple(1, 0, "VK_EXT_metal_objects"),
	std::make_tuple(1, 0, "VK_KHR_synchronization2"),
	std::make_tuple(1, 0, "VK_EXT_descriptor_buffer"),
	std::make_tuple(1, 0, "VK_EXT_graphics_pipeline_library"),
	std::make_tuple(1, 0, "VK_AMD_shader_early_and_late_fragment_tests"),
	std::make_tuple(1, 0, "VK_KHR_fragment_shader_barycentric"),
	std::make_tuple(1, 1, "VK_KHR_shader_subgroup_uniform_control_flow"),
	std::make_tuple(1, 0, "VK_KHR_zero_initialize_workgroup_memory"),
	std::make_tuple(1, 0, "VK_NV_fragment_shading_rate_enums"),
	std::make_tuple(1, 0, "VK_NV_ray_tracing_motion_blur"),
	std::make_tuple(1, 1, "VK_EXT_mesh_shader"),
	std::make_tuple(1, 0, "VK_EXT_ycbcr_2plane_444_formats"),
	std::make_tuple(1, 0, "VK_EXT_fragment_density_map2"),
	std::make_tuple(1, 0, "VK_QCOM_rotated_copy_commands"),
	std::make_tuple(1, 0, "VK_EXT_image_robustness"),
	std::make_tuple(1, 0, "VK_KHR_workgroup_memory_explicit_layout"),
	std::make_tuple(1, 0, "VK_KHR_copy_commands2"),
	std::make_tuple(1, 0, "VK_EXT_image_compression_control"),
	std::make_tuple(1, 0, "VK_EXT_attachment_feedback_loop_layout"),
	std::make_tuple(1, 0, "VK_EXT_4444_formats"),
	std::make_tuple(1, 0, "VK_EXT_device_fault"),
	std::make_tuple(1, 0, "VK_ARM_rasterization_order_attachment_access"),
	std::make_tuple(1, 0, "VK_EXT_rgba10x6_formats"),
	std::make_tuple(1, 0, "VK_NV_acquire_winrt_display"),
	std::make_tuple(1, 0, "VK_VALVE_mutable_descriptor_type"),
	std::make_tuple(1, 0, "VK_EXT_vertex_input_dynamic_state"),
	std::make_tuple(1, 0, "VK_EXT_physical_device_drm"),
	std::make_tuple(1, 0, "VK_EXT_device_address_binding_report"),
	std::make_tuple(1, 0, "VK_EXT_depth_clip_control"),
	std::make_tuple(1, 0, "VK_EXT_primitive_topology_list_restart"),
	std::make_tuple(1, 0, "VK_KHR_format_feature_flags2"),
	std::make_tuple(1, 0, "VK_FUCHSIA_external_memory"),
	std::make_tuple(1, 0, "VK_FUCHSIA_external_semaphore"),
	std::make_tuple(1, 0, "VK_FUCHSIA_buffer_collection"),
	std::make_tuple(1, 0, "VK_HUAWEI_subpass_shading"),
	std::make_tuple(1, 0, "VK_HUAWEI_invocation_mask"),
	std::make_tuple(1, 0, "VK_NV_external_memory_rdma"),
	std::make_tuple(1, 0, "VK_EXT_pipeline_properties"),
	std::make_tuple(1, 0, "VK_EXT_frame_boundary"),
	std::make_tuple(1, 0, "VK_EXT_multisampled_render_to_single_sampled"),
	std::make_tuple(1, 0, "VK_EXT_extended_dynamic_state2"),
	std::make_tuple(1, 0, "VK_QNX_screen_surface"),
	std::make_tuple(1, 0, "VK_EXT_color_write_enable"),
	std::make_tuple(1, 0, "VK_EXT_primitives_generated_query"),
	std::make_tuple(1, 0, "VK_KHR_ray_tracing_maintenance1"),
	std::make_tuple(1, 0, "VK_EXT_global_priority_query"),
	std::make_tuple(1, 0, "VK_EXT_image_view_min_lod"),
	std::make_tuple(1, 0, "VK_EXT_multi_draw"),
	std::make_tuple(1, 0, "VK_EXT_image_2d_view_of_3d"),
	std::make_tuple(1, 0, "VK_KHR_portability_enumeration"),
	std::make_tuple(1, 3, "VK_EXT_shader_tile_image"),
	std::make_tuple(1, 0, "VK_EXT_opacity_micromap"),
	std::make_tuple(1, 0, "VK_NV_displacement_micromap"),
	std::make_tuple(1, 0, "VK_EXT_load_store_op_none"),
	std::make_tuple(1, 0, "VK_HUAWEI_cluster_culling_shader"),
	std::make_tuple(1, 0, "VK_EXT_border_color_swizzle"),
	std::make_tuple(1, 0, "VK_EXT_pageable_device_local_memory"),
	std::make_tuple(1, 1, "VK_KHR_maintenance4"),
	std::make_tuple(1, 1, "VK_ARM_shader_core_properties"),
	std::make_tuple(1, 0, "VK_KHR_shader_subgroup_rotate"),
	std::make_tuple(1, 0, "VK_ARM_scheduling_controls"),
	std::make_tuple(1, 0, "VK_EXT_image_sliced_view_of_3d"),
	std::make_tuple(1, 0, "VK_VALVE_descriptor_set_host_mapping"),
	std::make_tuple(1, 0, "VK_EXT_depth_clamp_zero_one"),
	std::make_tuple(1, 0, "VK_EXT_non_seamless_cube_map"),
	std::make_tuple(1, 0, "VK_ARM_render_pass_striped"),
	std::make_tuple(1, 0, "VK_QCOM_fragment_density_map_offset"),
	std::make_tuple(1, 0, "VK_NV_copy_memory_indirect"),
	std::make_tuple(1, 0, "VK_NV_memory_decompression"),
	std::make_tuple(1, 0, "VK_NV_device_generated_commands_compute"),
	std::make_tuple(1, 0, "VK_NV_linear_color_attachment"),
	std::make_tuple(1, 0, "VK_GOOGLE_surfaceless_query"),
	std::make_tuple(1, 1, "VK_KHR_shader_maximal_reconvergence"),
	std::make_tuple(1, 0, "VK_EXT_image_compression_control_swapchain"),
	std::make_tuple(1, 0, "VK_QCOM_image_processing"),
	std::make_tuple(1, 0, "VK_EXT_nested_command_buffer"),
	std::make_tuple(1, 0, "VK_EXT_external_memory_acquire_unmodified"),
	std::make_tuple(1, 0, "VK_EXT_extended_dynamic_state3"),
	std::make_tuple(1, 0, "VK_EXT_subpass_merge_feedback"),
	std::make_tuple(1, 0, "VK_LUNARG_direct_driver_loading"),
	std::make_tuple(1, 0, "VK_EXT_shader_module_identifier"),
	std::make_tuple(1, 0, "VK_EXT_rasterization_order_attachment_access"),
	std::make_tuple(1, 0, "VK_NV_optical_flow"),
	std::make_tuple(1, 0, "VK_EXT_legacy_dithering"),
	std::make_tuple(1, 0, "VK_EXT_pipeline_protected_access"),
	std::make_tuple(1, 0, "VK_ANDROID_external_format_resolve"),
	std::make_tuple(1, 0, "VK_KHR_maintenance5"),
	std::make_tuple(1, 0, "VK_AMD_anti_lag"),
	std::make_tuple(1, 0, "VK_KHR_ray_tracing_position_fetch"),
	std::make_tuple(1, 0, "VK_EXT_shader_object"),
	std::make_tuple(1, 0, "VK_KHR_pipeline_binary"),
	std::make_tuple(1, 0, "VK_QCOM_tile_properties"),
	std::make_tuple(1, 0, "VK_SEC_amigo_profiling"),
	std::make_tuple(1, 0, "VK_QCOM_multiview_per_view_viewports"),
	std::make_tuple(1, 0, "VK_NV_ray_tracing_invocation_reorder"),
	std::make_tuple(1, 0, "VK_NV_extended_sparse_address_space"),
	std::make_tuple(1, 0, "VK_EXT_mutable_descriptor_type"),
	std::make_tuple(1, 0, "VK_EXT_legacy_vertex_attributes"),
	std::make_tuple(1, 0, "VK_EXT_layer_settings"),
	std::make_tuple(1, 0, "VK_ARM_shader_core_builtins"),
	std::make_tuple(1, 0, "VK_EXT_pipeline_library_group_handles"),
	std::make_tuple(1, 0, "VK_EXT_dynamic_rendering_unused_attachments"),
	std::make_tuple(1, 0, "VK_NV_low_latency2"),
	std::make_tuple(1, 0, "VK_KHR_cooperative_matrix"),
	std::make_tuple(1, 0, "VK_QCOM_multiview_per_view_render_areas"),
	std::make_tuple(1, 0, "VK_KHR_compute_shader_derivatives"),
	std::make_tuple(1, 0, "VK_KHR_video_decode_av1"),
	std::make_tuple(1, 0, "VK_KHR_video_maintenance1"),
	std::make_tuple(1, 1, "VK_NV_per_stage_descriptor_set"),
	std::make_tuple(1, 0, "VK_QCOM_image_processing2"),
	std::make_tuple(1, 0, "VK_QCOM_filter_cubic_weights"),
	std::make_tuple(1, 0, "VK_QCOM_ycbcr_degamma"),
	std::make_tuple(1, 0, "VK_QCOM_filter_cubic_clamp"),
	std::make_tuple(1, 0, "VK_EXT_attachment_feedback_loop_dynamic_state"),
	std::make_tuple(1, 0, "VK_KHR_vertex_attribute_divisor"),
	std::make_tuple(1, 0, "VK_KHR_load_store_op_none"),
	std::make_tuple(1, 1, "VK_KHR_shader_float_controls2"),
	std::make_tuple(1, 0, "VK_QNX_external_memory_screen_buffer"),
	std::make_tuple(1, 0, "VK_MSFT_layered_driver"),
	std::make_tuple(1, 0, "VK_KHR_index_type_uint8"),
	std::make_tuple(1, 0, "VK_KHR_line_rasterization"),
	std::make_tuple(1, 0, "VK_KHR_calibrated_timestamps"),
	std::make_tuple(1, 0, "VK_KHR_shader_expect_assume"),
	std::make_tuple(1, 1, "VK_KHR_maintenance6"),
	std::make_tuple(1, 1, "VK_NV_descriptor_pool_overallocation"),
	std::make_tuple(1, 0, "VK_NV_raw_access_chains"),
	std::make_tuple(1, 0, "VK_KHR_shader_relaxed_extended_instruction"),
	std::make_tuple(1, 0, "VK_NV_command_buffer_inheritance"),
	std::make_tuple(1, 1, "VK_KHR_maintenance7"),
	std::make_tuple(1, 0, "VK_NV_shader_atomic_float16_vector"),
	std::make_tuple(1, 0, "VK_EXT_shader_replicated_composites"),
	std::make_tuple(1, 0, "VK_NV_ray_tracing_validation"),
	std::make_tuple(1, 0, "VK_EXT_device_generated_commands"),
	std::make_tuple(1, 0, "VK_MESA_image_alignment_control"),
	std::make_tuple(1, 0, "VK_EXT_depth_clamp_control"),
};
