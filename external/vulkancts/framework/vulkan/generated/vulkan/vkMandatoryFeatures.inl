/* WARNING: This is auto-generated file. Do not modify, since changes will
 * be lost! Modify the generating script instead.
 * This file was generated by /scripts/gen_framework.py
 */

bool canUseFeaturesStruct (const vector<VkExtensionProperties>& deviceExtensions, uint32_t usedApiVersion,
				const char* extension, const char* extensionPromotedFrom = nullptr)
{
	if (isCoreDeviceExtension(usedApiVersion, extension))
		return true;
	if (isExtensionStructSupported(deviceExtensions, RequiredExtension(extension)))
		return true;
	return extensionPromotedFrom && isExtensionStructSupported(deviceExtensions, RequiredExtension(extensionPromotedFrom));
}

void checkBasicMandatoryFeatures(const vkt::Context& context, std::vector<std::string>& failMesages)
{
	if (!context.isInstanceFunctionalitySupported("VK_KHR_get_physical_device_properties2"))
		TCU_THROW(NotSupportedError, "Extension VK_KHR_get_physical_device_properties2 is not present");

	VkPhysicalDevice					physicalDevice		= context.getPhysicalDevice();
	const InstanceInterface&			vki					= context.getInstanceInterface();
	const vector<VkExtensionProperties>	deviceExtensions	= enumerateDeviceExtensionProperties(vki, physicalDevice, nullptr);
	const uint32_t						usedApiVersion		= context.getUsedApiVersion();

	vk::VkPhysicalDeviceFeatures2 coreFeatures = initVulkanStructure();
	const auto addFeatures = makeStructChainAdder(&coreFeatures);

	// VkPhysicalDevice16BitStorageFeatures, VkPhysicalDevice16BitStorageFeaturesKHR for ext [VK_KHR_16bit_storage]
	vk::VkPhysicalDevice16BitStorageFeatures physicalDevice16BitStorageFeatures = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_KHR_16bit_storage"))
		addFeatures(&physicalDevice16BitStorageFeatures);

	// VkPhysicalDevice4444FormatsFeaturesEXT for ext [VK_EXT_4444_formats]
	vk::VkPhysicalDevice4444FormatsFeaturesEXT physicalDevice4444FormatsFeaturesEXT = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_4444_formats"))
		addFeatures(&physicalDevice4444FormatsFeaturesEXT);

	// VkPhysicalDevice8BitStorageFeatures, VkPhysicalDevice8BitStorageFeaturesKHR for ext [VK_KHR_8bit_storage]
	vk::VkPhysicalDevice8BitStorageFeatures physicalDevice8BitStorageFeatures = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_KHR_8bit_storage"))
		addFeatures(&physicalDevice8BitStorageFeatures);

	// VkPhysicalDeviceAccelerationStructureFeaturesKHR for ext [VK_KHR_acceleration_structure]
	vk::VkPhysicalDeviceAccelerationStructureFeaturesKHR physicalDeviceAccelerationStructureFeaturesKHR = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_KHR_acceleration_structure"))
		addFeatures(&physicalDeviceAccelerationStructureFeaturesKHR);

	// VkPhysicalDeviceAddressBindingReportFeaturesEXT for ext [VK_EXT_device_address_binding_report]
	vk::VkPhysicalDeviceAddressBindingReportFeaturesEXT physicalDeviceAddressBindingReportFeaturesEXT = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_device_address_binding_report"))
		addFeatures(&physicalDeviceAddressBindingReportFeaturesEXT);

	// VkPhysicalDeviceAmigoProfilingFeaturesSEC for ext [VK_SEC_amigo_profiling]
	vk::VkPhysicalDeviceAmigoProfilingFeaturesSEC physicalDeviceAmigoProfilingFeaturesSEC = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_SEC_amigo_profiling"))
		addFeatures(&physicalDeviceAmigoProfilingFeaturesSEC);

	// VkPhysicalDeviceAntiLagFeaturesAMD for ext [VK_AMD_anti_lag]
	vk::VkPhysicalDeviceAntiLagFeaturesAMD physicalDeviceAntiLagFeaturesAMD = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_AMD_anti_lag"))
		addFeatures(&physicalDeviceAntiLagFeaturesAMD);

	// VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT for ext [VK_EXT_attachment_feedback_loop_dynamic_state]
	vk::VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT physicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_attachment_feedback_loop_dynamic_state"))
		addFeatures(&physicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT);

	// VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT for ext [VK_EXT_attachment_feedback_loop_layout]
	vk::VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT physicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_attachment_feedback_loop_layout"))
		addFeatures(&physicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT);

	// VkPhysicalDeviceBorderColorSwizzleFeaturesEXT for ext [VK_EXT_border_color_swizzle]
	vk::VkPhysicalDeviceBorderColorSwizzleFeaturesEXT physicalDeviceBorderColorSwizzleFeaturesEXT = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_border_color_swizzle"))
		addFeatures(&physicalDeviceBorderColorSwizzleFeaturesEXT);

	// VkPhysicalDeviceBufferDeviceAddressFeatures, VkPhysicalDeviceBufferDeviceAddressFeaturesKHR for ext [VK_KHR_buffer_device_address]
	vk::VkPhysicalDeviceBufferDeviceAddressFeatures physicalDeviceBufferDeviceAddressFeatures = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_KHR_buffer_device_address"))
		addFeatures(&physicalDeviceBufferDeviceAddressFeatures);

	// VkPhysicalDeviceBufferDeviceAddressFeaturesEXT, VkPhysicalDeviceBufferAddressFeaturesEXT for ext [VK_EXT_buffer_device_address]
	vk::VkPhysicalDeviceBufferDeviceAddressFeaturesEXT physicalDeviceBufferDeviceAddressFeaturesEXT = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_buffer_device_address"))
		addFeatures(&physicalDeviceBufferDeviceAddressFeaturesEXT);

	// VkPhysicalDeviceClusterAccelerationStructureFeaturesNV for ext [VK_NV_cluster_acceleration_structure]
	vk::VkPhysicalDeviceClusterAccelerationStructureFeaturesNV physicalDeviceClusterAccelerationStructureFeaturesNV = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_NV_cluster_acceleration_structure"))
		addFeatures(&physicalDeviceClusterAccelerationStructureFeaturesNV);

	// VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI for ext [VK_HUAWEI_cluster_culling_shader]
	vk::VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI physicalDeviceClusterCullingShaderFeaturesHUAWEI = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_HUAWEI_cluster_culling_shader"))
		addFeatures(&physicalDeviceClusterCullingShaderFeaturesHUAWEI);

	// VkPhysicalDeviceCoherentMemoryFeaturesAMD for ext [VK_AMD_device_coherent_memory]
	vk::VkPhysicalDeviceCoherentMemoryFeaturesAMD physicalDeviceCoherentMemoryFeaturesAMD = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_AMD_device_coherent_memory"))
		addFeatures(&physicalDeviceCoherentMemoryFeaturesAMD);

	// VkPhysicalDeviceColorWriteEnableFeaturesEXT for ext [VK_EXT_color_write_enable]
	vk::VkPhysicalDeviceColorWriteEnableFeaturesEXT physicalDeviceColorWriteEnableFeaturesEXT = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_color_write_enable"))
		addFeatures(&physicalDeviceColorWriteEnableFeaturesEXT);

	// VkPhysicalDeviceCommandBufferInheritanceFeaturesNV for ext [VK_NV_command_buffer_inheritance]
	vk::VkPhysicalDeviceCommandBufferInheritanceFeaturesNV physicalDeviceCommandBufferInheritanceFeaturesNV = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_NV_command_buffer_inheritance"))
		addFeatures(&physicalDeviceCommandBufferInheritanceFeaturesNV);

	// VkPhysicalDeviceComputeShaderDerivativesFeaturesKHR, VkPhysicalDeviceComputeShaderDerivativesFeaturesNV for ext [VK_KHR_compute_shader_derivatives, VK_NV_compute_shader_derivatives]
	vk::VkPhysicalDeviceComputeShaderDerivativesFeaturesKHR physicalDeviceComputeShaderDerivativesFeaturesKHR = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_KHR_compute_shader_derivatives", "VK_NV_compute_shader_derivatives"))
		addFeatures(&physicalDeviceComputeShaderDerivativesFeaturesKHR);

	// VkPhysicalDeviceConditionalRenderingFeaturesEXT for ext [VK_EXT_conditional_rendering]
	vk::VkPhysicalDeviceConditionalRenderingFeaturesEXT physicalDeviceConditionalRenderingFeaturesEXT = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_conditional_rendering"))
		addFeatures(&physicalDeviceConditionalRenderingFeaturesEXT);

	// VkPhysicalDeviceCooperativeMatrix2FeaturesNV for ext [VK_NV_cooperative_matrix2]
	vk::VkPhysicalDeviceCooperativeMatrix2FeaturesNV physicalDeviceCooperativeMatrix2FeaturesNV = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_NV_cooperative_matrix2"))
		addFeatures(&physicalDeviceCooperativeMatrix2FeaturesNV);

	// VkPhysicalDeviceCooperativeMatrixFeaturesKHR for ext [VK_KHR_cooperative_matrix]
	vk::VkPhysicalDeviceCooperativeMatrixFeaturesKHR physicalDeviceCooperativeMatrixFeaturesKHR = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_KHR_cooperative_matrix"))
		addFeatures(&physicalDeviceCooperativeMatrixFeaturesKHR);

	// VkPhysicalDeviceCooperativeMatrixFeaturesNV for ext [VK_NV_cooperative_matrix]
	vk::VkPhysicalDeviceCooperativeMatrixFeaturesNV physicalDeviceCooperativeMatrixFeaturesNV = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_NV_cooperative_matrix"))
		addFeatures(&physicalDeviceCooperativeMatrixFeaturesNV);

	// VkPhysicalDeviceCooperativeVectorFeaturesNV for ext [VK_NV_cooperative_vector]
	vk::VkPhysicalDeviceCooperativeVectorFeaturesNV physicalDeviceCooperativeVectorFeaturesNV = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_NV_cooperative_vector"))
		addFeatures(&physicalDeviceCooperativeVectorFeaturesNV);

	// VkPhysicalDeviceCopyMemoryIndirectFeaturesNV for ext [VK_NV_copy_memory_indirect]
	vk::VkPhysicalDeviceCopyMemoryIndirectFeaturesNV physicalDeviceCopyMemoryIndirectFeaturesNV = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_NV_copy_memory_indirect"))
		addFeatures(&physicalDeviceCopyMemoryIndirectFeaturesNV);

	// VkPhysicalDeviceCornerSampledImageFeaturesNV for ext [VK_NV_corner_sampled_image]
	vk::VkPhysicalDeviceCornerSampledImageFeaturesNV physicalDeviceCornerSampledImageFeaturesNV = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_NV_corner_sampled_image"))
		addFeatures(&physicalDeviceCornerSampledImageFeaturesNV);

	// VkPhysicalDeviceCoverageReductionModeFeaturesNV for ext [VK_NV_coverage_reduction_mode]
	vk::VkPhysicalDeviceCoverageReductionModeFeaturesNV physicalDeviceCoverageReductionModeFeaturesNV = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_NV_coverage_reduction_mode"))
		addFeatures(&physicalDeviceCoverageReductionModeFeaturesNV);

	// VkPhysicalDeviceCubicClampFeaturesQCOM for ext [VK_QCOM_filter_cubic_clamp]
	vk::VkPhysicalDeviceCubicClampFeaturesQCOM physicalDeviceCubicClampFeaturesQCOM = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_QCOM_filter_cubic_clamp"))
		addFeatures(&physicalDeviceCubicClampFeaturesQCOM);

	// VkPhysicalDeviceCubicWeightsFeaturesQCOM for ext [VK_QCOM_filter_cubic_weights]
	vk::VkPhysicalDeviceCubicWeightsFeaturesQCOM physicalDeviceCubicWeightsFeaturesQCOM = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_QCOM_filter_cubic_weights"))
		addFeatures(&physicalDeviceCubicWeightsFeaturesQCOM);

	// VkPhysicalDeviceCudaKernelLaunchFeaturesNV for ext [VK_NV_cuda_kernel_launch]
	vk::VkPhysicalDeviceCudaKernelLaunchFeaturesNV physicalDeviceCudaKernelLaunchFeaturesNV = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_NV_cuda_kernel_launch"))
		addFeatures(&physicalDeviceCudaKernelLaunchFeaturesNV);

	// VkPhysicalDeviceCustomBorderColorFeaturesEXT for ext [VK_EXT_custom_border_color]
	vk::VkPhysicalDeviceCustomBorderColorFeaturesEXT physicalDeviceCustomBorderColorFeaturesEXT = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_custom_border_color"))
		addFeatures(&physicalDeviceCustomBorderColorFeaturesEXT);

	// VkPhysicalDeviceDataGraphFeaturesARM for ext [VK_ARM_data_graph]
	vk::VkPhysicalDeviceDataGraphFeaturesARM physicalDeviceDataGraphFeaturesARM = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_ARM_data_graph"))
		addFeatures(&physicalDeviceDataGraphFeaturesARM);

	// VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV for ext [VK_NV_dedicated_allocation_image_aliasing]
	vk::VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV physicalDeviceDedicatedAllocationImageAliasingFeaturesNV = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_NV_dedicated_allocation_image_aliasing"))
		addFeatures(&physicalDeviceDedicatedAllocationImageAliasingFeaturesNV);

	// VkPhysicalDeviceDenseGeometryFormatFeaturesAMDX for ext [VK_AMDX_dense_geometry_format]
	vk::VkPhysicalDeviceDenseGeometryFormatFeaturesAMDX physicalDeviceDenseGeometryFormatFeaturesAMDX = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_AMDX_dense_geometry_format"))
		addFeatures(&physicalDeviceDenseGeometryFormatFeaturesAMDX);

	// VkPhysicalDeviceDepthBiasControlFeaturesEXT for ext [VK_EXT_depth_bias_control]
	vk::VkPhysicalDeviceDepthBiasControlFeaturesEXT physicalDeviceDepthBiasControlFeaturesEXT = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_depth_bias_control"))
		addFeatures(&physicalDeviceDepthBiasControlFeaturesEXT);

	// VkPhysicalDeviceDepthClampControlFeaturesEXT for ext [VK_EXT_depth_clamp_control]
	vk::VkPhysicalDeviceDepthClampControlFeaturesEXT physicalDeviceDepthClampControlFeaturesEXT = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_depth_clamp_control"))
		addFeatures(&physicalDeviceDepthClampControlFeaturesEXT);

	// VkPhysicalDeviceDepthClampZeroOneFeaturesKHR, VkPhysicalDeviceDepthClampZeroOneFeaturesEXT for ext [VK_KHR_depth_clamp_zero_one, VK_EXT_depth_clamp_zero_one]
	vk::VkPhysicalDeviceDepthClampZeroOneFeaturesKHR physicalDeviceDepthClampZeroOneFeaturesKHR = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_KHR_depth_clamp_zero_one", "VK_EXT_depth_clamp_zero_one"))
		addFeatures(&physicalDeviceDepthClampZeroOneFeaturesKHR);

	// VkPhysicalDeviceDepthClipControlFeaturesEXT for ext [VK_EXT_depth_clip_control]
	vk::VkPhysicalDeviceDepthClipControlFeaturesEXT physicalDeviceDepthClipControlFeaturesEXT = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_depth_clip_control"))
		addFeatures(&physicalDeviceDepthClipControlFeaturesEXT);

	// VkPhysicalDeviceDepthClipEnableFeaturesEXT for ext [VK_EXT_depth_clip_enable]
	vk::VkPhysicalDeviceDepthClipEnableFeaturesEXT physicalDeviceDepthClipEnableFeaturesEXT = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_depth_clip_enable"))
		addFeatures(&physicalDeviceDepthClipEnableFeaturesEXT);

	// VkPhysicalDeviceDescriptorBufferFeaturesEXT for ext [VK_EXT_descriptor_buffer]
	vk::VkPhysicalDeviceDescriptorBufferFeaturesEXT physicalDeviceDescriptorBufferFeaturesEXT = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_descriptor_buffer"))
		addFeatures(&physicalDeviceDescriptorBufferFeaturesEXT);

	// VkPhysicalDeviceDescriptorIndexingFeatures, VkPhysicalDeviceDescriptorIndexingFeaturesEXT for ext [VK_EXT_descriptor_indexing]
	vk::VkPhysicalDeviceDescriptorIndexingFeatures physicalDeviceDescriptorIndexingFeatures = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_descriptor_indexing"))
		addFeatures(&physicalDeviceDescriptorIndexingFeatures);

	// VkPhysicalDeviceDescriptorPoolOverallocationFeaturesNV for ext [VK_NV_descriptor_pool_overallocation]
	vk::VkPhysicalDeviceDescriptorPoolOverallocationFeaturesNV physicalDeviceDescriptorPoolOverallocationFeaturesNV = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_NV_descriptor_pool_overallocation"))
		addFeatures(&physicalDeviceDescriptorPoolOverallocationFeaturesNV);

	// VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE for ext [VK_VALVE_descriptor_set_host_mapping]
	vk::VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE physicalDeviceDescriptorSetHostMappingFeaturesVALVE = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_VALVE_descriptor_set_host_mapping"))
		addFeatures(&physicalDeviceDescriptorSetHostMappingFeaturesVALVE);

	// VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV for ext [VK_NV_device_generated_commands_compute]
	vk::VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV physicalDeviceDeviceGeneratedCommandsComputeFeaturesNV = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_NV_device_generated_commands_compute"))
		addFeatures(&physicalDeviceDeviceGeneratedCommandsComputeFeaturesNV);

	// VkPhysicalDeviceDeviceGeneratedCommandsFeaturesEXT for ext [VK_EXT_device_generated_commands]
	vk::VkPhysicalDeviceDeviceGeneratedCommandsFeaturesEXT physicalDeviceDeviceGeneratedCommandsFeaturesEXT = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_device_generated_commands"))
		addFeatures(&physicalDeviceDeviceGeneratedCommandsFeaturesEXT);

	// VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV for ext [VK_NV_device_generated_commands]
	vk::VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV physicalDeviceDeviceGeneratedCommandsFeaturesNV = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_NV_device_generated_commands"))
		addFeatures(&physicalDeviceDeviceGeneratedCommandsFeaturesNV);

	// VkPhysicalDeviceDeviceMemoryReportFeaturesEXT for ext [VK_EXT_device_memory_report]
	vk::VkPhysicalDeviceDeviceMemoryReportFeaturesEXT physicalDeviceDeviceMemoryReportFeaturesEXT = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_device_memory_report"))
		addFeatures(&physicalDeviceDeviceMemoryReportFeaturesEXT);

	// VkPhysicalDeviceDiagnosticsConfigFeaturesNV for ext [VK_NV_device_diagnostics_config]
	vk::VkPhysicalDeviceDiagnosticsConfigFeaturesNV physicalDeviceDiagnosticsConfigFeaturesNV = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_NV_device_diagnostics_config"))
		addFeatures(&physicalDeviceDiagnosticsConfigFeaturesNV);

	// VkPhysicalDeviceDisplacementMicromapFeaturesNV for ext [VK_NV_displacement_micromap]
	vk::VkPhysicalDeviceDisplacementMicromapFeaturesNV physicalDeviceDisplacementMicromapFeaturesNV = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_NV_displacement_micromap"))
		addFeatures(&physicalDeviceDisplacementMicromapFeaturesNV);

	// VkPhysicalDeviceDynamicRenderingFeatures, VkPhysicalDeviceDynamicRenderingFeaturesKHR for ext [VK_KHR_dynamic_rendering]
	vk::VkPhysicalDeviceDynamicRenderingFeatures physicalDeviceDynamicRenderingFeatures = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_KHR_dynamic_rendering"))
		addFeatures(&physicalDeviceDynamicRenderingFeatures);

	// VkPhysicalDeviceDynamicRenderingLocalReadFeatures, VkPhysicalDeviceDynamicRenderingLocalReadFeaturesKHR for ext [VK_KHR_dynamic_rendering_local_read]
	vk::VkPhysicalDeviceDynamicRenderingLocalReadFeatures physicalDeviceDynamicRenderingLocalReadFeatures = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_KHR_dynamic_rendering_local_read"))
		addFeatures(&physicalDeviceDynamicRenderingLocalReadFeatures);

	// VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT for ext [VK_EXT_dynamic_rendering_unused_attachments]
	vk::VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT physicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_dynamic_rendering_unused_attachments"))
		addFeatures(&physicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT);

	// VkPhysicalDeviceExclusiveScissorFeaturesNV for ext [VK_NV_scissor_exclusive]
	vk::VkPhysicalDeviceExclusiveScissorFeaturesNV physicalDeviceExclusiveScissorFeaturesNV = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_NV_scissor_exclusive"))
		addFeatures(&physicalDeviceExclusiveScissorFeaturesNV);

	// VkPhysicalDeviceExtendedDynamicState2FeaturesEXT for ext [VK_EXT_extended_dynamic_state2]
	vk::VkPhysicalDeviceExtendedDynamicState2FeaturesEXT physicalDeviceExtendedDynamicState2FeaturesEXT = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_extended_dynamic_state2"))
		addFeatures(&physicalDeviceExtendedDynamicState2FeaturesEXT);

	// VkPhysicalDeviceExtendedDynamicState3FeaturesEXT for ext [VK_EXT_extended_dynamic_state3]
	vk::VkPhysicalDeviceExtendedDynamicState3FeaturesEXT physicalDeviceExtendedDynamicState3FeaturesEXT = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_extended_dynamic_state3"))
		addFeatures(&physicalDeviceExtendedDynamicState3FeaturesEXT);

	// VkPhysicalDeviceExtendedDynamicStateFeaturesEXT for ext [VK_EXT_extended_dynamic_state]
	vk::VkPhysicalDeviceExtendedDynamicStateFeaturesEXT physicalDeviceExtendedDynamicStateFeaturesEXT = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_extended_dynamic_state"))
		addFeatures(&physicalDeviceExtendedDynamicStateFeaturesEXT);

	// VkPhysicalDeviceExtendedSparseAddressSpaceFeaturesNV for ext [VK_NV_extended_sparse_address_space]
	vk::VkPhysicalDeviceExtendedSparseAddressSpaceFeaturesNV physicalDeviceExtendedSparseAddressSpaceFeaturesNV = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_NV_extended_sparse_address_space"))
		addFeatures(&physicalDeviceExtendedSparseAddressSpaceFeaturesNV);

	// VkPhysicalDeviceExternalFormatResolveFeaturesANDROID for ext [VK_ANDROID_external_format_resolve]
	vk::VkPhysicalDeviceExternalFormatResolveFeaturesANDROID physicalDeviceExternalFormatResolveFeaturesANDROID = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_ANDROID_external_format_resolve"))
		addFeatures(&physicalDeviceExternalFormatResolveFeaturesANDROID);

	// VkPhysicalDeviceExternalMemoryRDMAFeaturesNV for ext [VK_NV_external_memory_rdma]
	vk::VkPhysicalDeviceExternalMemoryRDMAFeaturesNV physicalDeviceExternalMemoryRDMAFeaturesNV = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_NV_external_memory_rdma"))
		addFeatures(&physicalDeviceExternalMemoryRDMAFeaturesNV);

	// VkPhysicalDeviceExternalMemoryScreenBufferFeaturesQNX for ext [VK_QNX_external_memory_screen_buffer]
	vk::VkPhysicalDeviceExternalMemoryScreenBufferFeaturesQNX physicalDeviceExternalMemoryScreenBufferFeaturesQNX = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_QNX_external_memory_screen_buffer"))
		addFeatures(&physicalDeviceExternalMemoryScreenBufferFeaturesQNX);

	// VkPhysicalDeviceFaultFeaturesEXT for ext [VK_EXT_device_fault]
	vk::VkPhysicalDeviceFaultFeaturesEXT physicalDeviceFaultFeaturesEXT = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_device_fault"))
		addFeatures(&physicalDeviceFaultFeaturesEXT);

	// VkPhysicalDeviceFormatPackFeaturesARM for ext [VK_ARM_format_pack]
	vk::VkPhysicalDeviceFormatPackFeaturesARM physicalDeviceFormatPackFeaturesARM = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_ARM_format_pack"))
		addFeatures(&physicalDeviceFormatPackFeaturesARM);

	// VkPhysicalDeviceFragmentDensityMap2FeaturesEXT for ext [VK_EXT_fragment_density_map2]
	vk::VkPhysicalDeviceFragmentDensityMap2FeaturesEXT physicalDeviceFragmentDensityMap2FeaturesEXT = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_fragment_density_map2"))
		addFeatures(&physicalDeviceFragmentDensityMap2FeaturesEXT);

	// VkPhysicalDeviceFragmentDensityMapFeaturesEXT for ext [VK_EXT_fragment_density_map]
	vk::VkPhysicalDeviceFragmentDensityMapFeaturesEXT physicalDeviceFragmentDensityMapFeaturesEXT = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_fragment_density_map"))
		addFeatures(&physicalDeviceFragmentDensityMapFeaturesEXT);

	// VkPhysicalDeviceFragmentDensityMapLayeredFeaturesVALVE for ext [VK_VALVE_fragment_density_map_layered]
	vk::VkPhysicalDeviceFragmentDensityMapLayeredFeaturesVALVE physicalDeviceFragmentDensityMapLayeredFeaturesVALVE = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_VALVE_fragment_density_map_layered"))
		addFeatures(&physicalDeviceFragmentDensityMapLayeredFeaturesVALVE);

	// VkPhysicalDeviceFragmentDensityMapOffsetFeaturesEXT, VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM for ext [VK_QCOM_fragment_density_map_offset, VK_EXT_fragment_density_map_offset]
	vk::VkPhysicalDeviceFragmentDensityMapOffsetFeaturesEXT physicalDeviceFragmentDensityMapOffsetFeaturesEXT = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_QCOM_fragment_density_map_offset", "VK_EXT_fragment_density_map_offset"))
		addFeatures(&physicalDeviceFragmentDensityMapOffsetFeaturesEXT);

	// VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR, VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV for ext [VK_KHR_fragment_shader_barycentric, VK_NV_fragment_shader_barycentric]
	vk::VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR physicalDeviceFragmentShaderBarycentricFeaturesKHR = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_KHR_fragment_shader_barycentric", "VK_NV_fragment_shader_barycentric"))
		addFeatures(&physicalDeviceFragmentShaderBarycentricFeaturesKHR);

	// VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT for ext [VK_EXT_fragment_shader_interlock]
	vk::VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT physicalDeviceFragmentShaderInterlockFeaturesEXT = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_fragment_shader_interlock"))
		addFeatures(&physicalDeviceFragmentShaderInterlockFeaturesEXT);

	// VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV for ext [VK_NV_fragment_shading_rate_enums]
	vk::VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV physicalDeviceFragmentShadingRateEnumsFeaturesNV = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_NV_fragment_shading_rate_enums"))
		addFeatures(&physicalDeviceFragmentShadingRateEnumsFeaturesNV);

	// VkPhysicalDeviceFragmentShadingRateFeaturesKHR for ext [VK_KHR_fragment_shading_rate]
	vk::VkPhysicalDeviceFragmentShadingRateFeaturesKHR physicalDeviceFragmentShadingRateFeaturesKHR = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_KHR_fragment_shading_rate"))
		addFeatures(&physicalDeviceFragmentShadingRateFeaturesKHR);

	// VkPhysicalDeviceFrameBoundaryFeaturesEXT for ext [VK_EXT_frame_boundary]
	vk::VkPhysicalDeviceFrameBoundaryFeaturesEXT physicalDeviceFrameBoundaryFeaturesEXT = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_frame_boundary"))
		addFeatures(&physicalDeviceFrameBoundaryFeaturesEXT);

	// VkPhysicalDeviceGlobalPriorityQueryFeatures, VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR, VkPhysicalDeviceGlobalPriorityQueryFeaturesEXT for ext [VK_KHR_global_priority, VK_EXT_global_priority_query]
	vk::VkPhysicalDeviceGlobalPriorityQueryFeatures physicalDeviceGlobalPriorityQueryFeatures = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_KHR_global_priority", "VK_EXT_global_priority_query"))
		addFeatures(&physicalDeviceGlobalPriorityQueryFeatures);

	// VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT for ext [VK_EXT_graphics_pipeline_library]
	vk::VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT physicalDeviceGraphicsPipelineLibraryFeaturesEXT = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_graphics_pipeline_library"))
		addFeatures(&physicalDeviceGraphicsPipelineLibraryFeaturesEXT);

	// VkPhysicalDeviceHdrVividFeaturesHUAWEI for ext [VK_HUAWEI_hdr_vivid]
	vk::VkPhysicalDeviceHdrVividFeaturesHUAWEI physicalDeviceHdrVividFeaturesHUAWEI = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_HUAWEI_hdr_vivid"))
		addFeatures(&physicalDeviceHdrVividFeaturesHUAWEI);

	// VkPhysicalDeviceHostImageCopyFeatures, VkPhysicalDeviceHostImageCopyFeaturesEXT for ext [VK_EXT_host_image_copy]
	vk::VkPhysicalDeviceHostImageCopyFeatures physicalDeviceHostImageCopyFeatures = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_host_image_copy"))
		addFeatures(&physicalDeviceHostImageCopyFeatures);

	// VkPhysicalDeviceHostQueryResetFeatures, VkPhysicalDeviceHostQueryResetFeaturesEXT for ext [VK_EXT_host_query_reset]
	vk::VkPhysicalDeviceHostQueryResetFeatures physicalDeviceHostQueryResetFeatures = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_host_query_reset"))
		addFeatures(&physicalDeviceHostQueryResetFeatures);

	// VkPhysicalDeviceImage2DViewOf3DFeaturesEXT for ext [VK_EXT_image_2d_view_of_3d]
	vk::VkPhysicalDeviceImage2DViewOf3DFeaturesEXT physicalDeviceImage2DViewOf3DFeaturesEXT = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_image_2d_view_of_3d"))
		addFeatures(&physicalDeviceImage2DViewOf3DFeaturesEXT);

	// VkPhysicalDeviceImageAlignmentControlFeaturesMESA for ext [VK_MESA_image_alignment_control]
	vk::VkPhysicalDeviceImageAlignmentControlFeaturesMESA physicalDeviceImageAlignmentControlFeaturesMESA = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_MESA_image_alignment_control"))
		addFeatures(&physicalDeviceImageAlignmentControlFeaturesMESA);

	// VkPhysicalDeviceImageCompressionControlFeaturesEXT for ext [VK_EXT_image_compression_control]
	vk::VkPhysicalDeviceImageCompressionControlFeaturesEXT physicalDeviceImageCompressionControlFeaturesEXT = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_image_compression_control"))
		addFeatures(&physicalDeviceImageCompressionControlFeaturesEXT);

	// VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT for ext [VK_EXT_image_compression_control_swapchain]
	vk::VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT physicalDeviceImageCompressionControlSwapchainFeaturesEXT = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_image_compression_control_swapchain"))
		addFeatures(&physicalDeviceImageCompressionControlSwapchainFeaturesEXT);

	// VkPhysicalDeviceImageProcessing2FeaturesQCOM for ext [VK_QCOM_image_processing2]
	vk::VkPhysicalDeviceImageProcessing2FeaturesQCOM physicalDeviceImageProcessing2FeaturesQCOM = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_QCOM_image_processing2"))
		addFeatures(&physicalDeviceImageProcessing2FeaturesQCOM);

	// VkPhysicalDeviceImageProcessingFeaturesQCOM for ext [VK_QCOM_image_processing]
	vk::VkPhysicalDeviceImageProcessingFeaturesQCOM physicalDeviceImageProcessingFeaturesQCOM = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_QCOM_image_processing"))
		addFeatures(&physicalDeviceImageProcessingFeaturesQCOM);

	// VkPhysicalDeviceImageRobustnessFeatures, VkPhysicalDeviceImageRobustnessFeaturesEXT for ext [VK_EXT_image_robustness]
	vk::VkPhysicalDeviceImageRobustnessFeatures physicalDeviceImageRobustnessFeatures = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_image_robustness"))
		addFeatures(&physicalDeviceImageRobustnessFeatures);

	// VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT for ext [VK_EXT_image_sliced_view_of_3d]
	vk::VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT physicalDeviceImageSlicedViewOf3DFeaturesEXT = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_image_sliced_view_of_3d"))
		addFeatures(&physicalDeviceImageSlicedViewOf3DFeaturesEXT);

	// VkPhysicalDeviceImageViewMinLodFeaturesEXT for ext [VK_EXT_image_view_min_lod]
	vk::VkPhysicalDeviceImageViewMinLodFeaturesEXT physicalDeviceImageViewMinLodFeaturesEXT = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_image_view_min_lod"))
		addFeatures(&physicalDeviceImageViewMinLodFeaturesEXT);

	// VkPhysicalDeviceImagelessFramebufferFeatures, VkPhysicalDeviceImagelessFramebufferFeaturesKHR for ext [VK_KHR_imageless_framebuffer]
	vk::VkPhysicalDeviceImagelessFramebufferFeatures physicalDeviceImagelessFramebufferFeatures = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_KHR_imageless_framebuffer"))
		addFeatures(&physicalDeviceImagelessFramebufferFeatures);

	// VkPhysicalDeviceIndexTypeUint8Features, VkPhysicalDeviceIndexTypeUint8FeaturesKHR, VkPhysicalDeviceIndexTypeUint8FeaturesEXT for ext [VK_KHR_index_type_uint8, VK_EXT_index_type_uint8]
	vk::VkPhysicalDeviceIndexTypeUint8Features physicalDeviceIndexTypeUint8Features = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_KHR_index_type_uint8", "VK_EXT_index_type_uint8"))
		addFeatures(&physicalDeviceIndexTypeUint8Features);

	// VkPhysicalDeviceInheritedViewportScissorFeaturesNV for ext [VK_NV_inherited_viewport_scissor]
	vk::VkPhysicalDeviceInheritedViewportScissorFeaturesNV physicalDeviceInheritedViewportScissorFeaturesNV = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_NV_inherited_viewport_scissor"))
		addFeatures(&physicalDeviceInheritedViewportScissorFeaturesNV);

	// VkPhysicalDeviceInlineUniformBlockFeatures, VkPhysicalDeviceInlineUniformBlockFeaturesEXT for ext [VK_EXT_inline_uniform_block]
	vk::VkPhysicalDeviceInlineUniformBlockFeatures physicalDeviceInlineUniformBlockFeatures = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_inline_uniform_block"))
		addFeatures(&physicalDeviceInlineUniformBlockFeatures);

	// VkPhysicalDeviceInvocationMaskFeaturesHUAWEI for ext [VK_HUAWEI_invocation_mask]
	vk::VkPhysicalDeviceInvocationMaskFeaturesHUAWEI physicalDeviceInvocationMaskFeaturesHUAWEI = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_HUAWEI_invocation_mask"))
		addFeatures(&physicalDeviceInvocationMaskFeaturesHUAWEI);

	// VkPhysicalDeviceLegacyDitheringFeaturesEXT for ext [VK_EXT_legacy_dithering]
	vk::VkPhysicalDeviceLegacyDitheringFeaturesEXT physicalDeviceLegacyDitheringFeaturesEXT = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_legacy_dithering"))
		addFeatures(&physicalDeviceLegacyDitheringFeaturesEXT);

	// VkPhysicalDeviceLegacyVertexAttributesFeaturesEXT for ext [VK_EXT_legacy_vertex_attributes]
	vk::VkPhysicalDeviceLegacyVertexAttributesFeaturesEXT physicalDeviceLegacyVertexAttributesFeaturesEXT = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_legacy_vertex_attributes"))
		addFeatures(&physicalDeviceLegacyVertexAttributesFeaturesEXT);

	// VkPhysicalDeviceLineRasterizationFeatures, VkPhysicalDeviceLineRasterizationFeaturesKHR, VkPhysicalDeviceLineRasterizationFeaturesEXT for ext [VK_KHR_line_rasterization, VK_EXT_line_rasterization]
	vk::VkPhysicalDeviceLineRasterizationFeatures physicalDeviceLineRasterizationFeatures = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_KHR_line_rasterization", "VK_EXT_line_rasterization"))
		addFeatures(&physicalDeviceLineRasterizationFeatures);

	// VkPhysicalDeviceLinearColorAttachmentFeaturesNV for ext [VK_NV_linear_color_attachment]
	vk::VkPhysicalDeviceLinearColorAttachmentFeaturesNV physicalDeviceLinearColorAttachmentFeaturesNV = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_NV_linear_color_attachment"))
		addFeatures(&physicalDeviceLinearColorAttachmentFeaturesNV);

	// VkPhysicalDeviceMaintenance4Features, VkPhysicalDeviceMaintenance4FeaturesKHR for ext [VK_KHR_maintenance4]
	vk::VkPhysicalDeviceMaintenance4Features physicalDeviceMaintenance4Features = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_KHR_maintenance4"))
		addFeatures(&physicalDeviceMaintenance4Features);

	// VkPhysicalDeviceMaintenance5Features, VkPhysicalDeviceMaintenance5FeaturesKHR for ext [VK_KHR_maintenance5]
	vk::VkPhysicalDeviceMaintenance5Features physicalDeviceMaintenance5Features = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_KHR_maintenance5"))
		addFeatures(&physicalDeviceMaintenance5Features);

	// VkPhysicalDeviceMaintenance6Features, VkPhysicalDeviceMaintenance6FeaturesKHR for ext [VK_KHR_maintenance6]
	vk::VkPhysicalDeviceMaintenance6Features physicalDeviceMaintenance6Features = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_KHR_maintenance6"))
		addFeatures(&physicalDeviceMaintenance6Features);

	// VkPhysicalDeviceMaintenance7FeaturesKHR for ext [VK_KHR_maintenance7]
	vk::VkPhysicalDeviceMaintenance7FeaturesKHR physicalDeviceMaintenance7FeaturesKHR = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_KHR_maintenance7"))
		addFeatures(&physicalDeviceMaintenance7FeaturesKHR);

	// VkPhysicalDeviceMaintenance8FeaturesKHR for ext [VK_KHR_maintenance8]
	vk::VkPhysicalDeviceMaintenance8FeaturesKHR physicalDeviceMaintenance8FeaturesKHR = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_KHR_maintenance8"))
		addFeatures(&physicalDeviceMaintenance8FeaturesKHR);

	// VkPhysicalDeviceMaintenance9FeaturesKHR for ext [VK_KHR_maintenance9]
	vk::VkPhysicalDeviceMaintenance9FeaturesKHR physicalDeviceMaintenance9FeaturesKHR = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_KHR_maintenance9"))
		addFeatures(&physicalDeviceMaintenance9FeaturesKHR);

	// VkPhysicalDeviceMapMemoryPlacedFeaturesEXT for ext [VK_EXT_map_memory_placed]
	vk::VkPhysicalDeviceMapMemoryPlacedFeaturesEXT physicalDeviceMapMemoryPlacedFeaturesEXT = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_map_memory_placed"))
		addFeatures(&physicalDeviceMapMemoryPlacedFeaturesEXT);

	// VkPhysicalDeviceMemoryDecompressionFeaturesNV for ext [VK_NV_memory_decompression]
	vk::VkPhysicalDeviceMemoryDecompressionFeaturesNV physicalDeviceMemoryDecompressionFeaturesNV = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_NV_memory_decompression"))
		addFeatures(&physicalDeviceMemoryDecompressionFeaturesNV);

	// VkPhysicalDeviceMemoryPriorityFeaturesEXT for ext [VK_EXT_memory_priority]
	vk::VkPhysicalDeviceMemoryPriorityFeaturesEXT physicalDeviceMemoryPriorityFeaturesEXT = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_memory_priority"))
		addFeatures(&physicalDeviceMemoryPriorityFeaturesEXT);

	// VkPhysicalDeviceMeshShaderFeaturesEXT for ext [VK_EXT_mesh_shader]
	vk::VkPhysicalDeviceMeshShaderFeaturesEXT physicalDeviceMeshShaderFeaturesEXT = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_mesh_shader"))
		addFeatures(&physicalDeviceMeshShaderFeaturesEXT);

	// VkPhysicalDeviceMeshShaderFeaturesNV for ext [VK_NV_mesh_shader]
	vk::VkPhysicalDeviceMeshShaderFeaturesNV physicalDeviceMeshShaderFeaturesNV = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_NV_mesh_shader"))
		addFeatures(&physicalDeviceMeshShaderFeaturesNV);

	// VkPhysicalDeviceMultiDrawFeaturesEXT for ext [VK_EXT_multi_draw]
	vk::VkPhysicalDeviceMultiDrawFeaturesEXT physicalDeviceMultiDrawFeaturesEXT = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_multi_draw"))
		addFeatures(&physicalDeviceMultiDrawFeaturesEXT);

	// VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT for ext [VK_EXT_multisampled_render_to_single_sampled]
	vk::VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT physicalDeviceMultisampledRenderToSingleSampledFeaturesEXT = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_multisampled_render_to_single_sampled"))
		addFeatures(&physicalDeviceMultisampledRenderToSingleSampledFeaturesEXT);

	// VkPhysicalDeviceMultiviewFeatures, VkPhysicalDeviceMultiviewFeaturesKHR for ext [VK_KHR_multiview]
	vk::VkPhysicalDeviceMultiviewFeatures physicalDeviceMultiviewFeatures = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_KHR_multiview"))
		addFeatures(&physicalDeviceMultiviewFeatures);

	// VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM for ext [VK_QCOM_multiview_per_view_render_areas]
	vk::VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM physicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_QCOM_multiview_per_view_render_areas"))
		addFeatures(&physicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM);

	// VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM for ext [VK_QCOM_multiview_per_view_viewports]
	vk::VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM physicalDeviceMultiviewPerViewViewportsFeaturesQCOM = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_QCOM_multiview_per_view_viewports"))
		addFeatures(&physicalDeviceMultiviewPerViewViewportsFeaturesQCOM);

	// VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT, VkPhysicalDeviceMutableDescriptorTypeFeaturesVALVE for ext [VK_VALVE_mutable_descriptor_type, VK_EXT_mutable_descriptor_type]
	vk::VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT physicalDeviceMutableDescriptorTypeFeaturesEXT = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_VALVE_mutable_descriptor_type", "VK_EXT_mutable_descriptor_type"))
		addFeatures(&physicalDeviceMutableDescriptorTypeFeaturesEXT);

	// VkPhysicalDeviceNestedCommandBufferFeaturesEXT for ext [VK_EXT_nested_command_buffer]
	vk::VkPhysicalDeviceNestedCommandBufferFeaturesEXT physicalDeviceNestedCommandBufferFeaturesEXT = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_nested_command_buffer"))
		addFeatures(&physicalDeviceNestedCommandBufferFeaturesEXT);

	// VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT for ext [VK_EXT_non_seamless_cube_map]
	vk::VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT physicalDeviceNonSeamlessCubeMapFeaturesEXT = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_non_seamless_cube_map"))
		addFeatures(&physicalDeviceNonSeamlessCubeMapFeaturesEXT);

	// VkPhysicalDeviceOpacityMicromapFeaturesEXT for ext [VK_EXT_opacity_micromap]
	vk::VkPhysicalDeviceOpacityMicromapFeaturesEXT physicalDeviceOpacityMicromapFeaturesEXT = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_opacity_micromap"))
		addFeatures(&physicalDeviceOpacityMicromapFeaturesEXT);

	// VkPhysicalDeviceOpticalFlowFeaturesNV for ext [VK_NV_optical_flow]
	vk::VkPhysicalDeviceOpticalFlowFeaturesNV physicalDeviceOpticalFlowFeaturesNV = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_NV_optical_flow"))
		addFeatures(&physicalDeviceOpticalFlowFeaturesNV);

	// VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT for ext [VK_EXT_pageable_device_local_memory]
	vk::VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT physicalDevicePageableDeviceLocalMemoryFeaturesEXT = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_pageable_device_local_memory"))
		addFeatures(&physicalDevicePageableDeviceLocalMemoryFeaturesEXT);

	// VkPhysicalDevicePartitionedAccelerationStructureFeaturesNV for ext [VK_NV_partitioned_acceleration_structure]
	vk::VkPhysicalDevicePartitionedAccelerationStructureFeaturesNV physicalDevicePartitionedAccelerationStructureFeaturesNV = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_NV_partitioned_acceleration_structure"))
		addFeatures(&physicalDevicePartitionedAccelerationStructureFeaturesNV);

	// VkPhysicalDevicePerStageDescriptorSetFeaturesNV for ext [VK_NV_per_stage_descriptor_set]
	vk::VkPhysicalDevicePerStageDescriptorSetFeaturesNV physicalDevicePerStageDescriptorSetFeaturesNV = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_NV_per_stage_descriptor_set"))
		addFeatures(&physicalDevicePerStageDescriptorSetFeaturesNV);

	// VkPhysicalDevicePerformanceQueryFeaturesKHR for ext [VK_KHR_performance_query]
	vk::VkPhysicalDevicePerformanceQueryFeaturesKHR physicalDevicePerformanceQueryFeaturesKHR = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_KHR_performance_query"))
		addFeatures(&physicalDevicePerformanceQueryFeaturesKHR);

	// VkPhysicalDevicePipelineBinaryFeaturesKHR for ext [VK_KHR_pipeline_binary]
	vk::VkPhysicalDevicePipelineBinaryFeaturesKHR physicalDevicePipelineBinaryFeaturesKHR = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_KHR_pipeline_binary"))
		addFeatures(&physicalDevicePipelineBinaryFeaturesKHR);

	// VkPhysicalDevicePipelineCacheIncrementalModeFeaturesSEC for ext [VK_SEC_pipeline_cache_incremental_mode]
	vk::VkPhysicalDevicePipelineCacheIncrementalModeFeaturesSEC physicalDevicePipelineCacheIncrementalModeFeaturesSEC = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_SEC_pipeline_cache_incremental_mode"))
		addFeatures(&physicalDevicePipelineCacheIncrementalModeFeaturesSEC);

	// VkPhysicalDevicePipelineCreationCacheControlFeatures, VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT for ext [VK_EXT_pipeline_creation_cache_control]
	vk::VkPhysicalDevicePipelineCreationCacheControlFeatures physicalDevicePipelineCreationCacheControlFeatures = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_pipeline_creation_cache_control"))
		addFeatures(&physicalDevicePipelineCreationCacheControlFeatures);

	// VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR for ext [VK_KHR_pipeline_executable_properties]
	vk::VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR physicalDevicePipelineExecutablePropertiesFeaturesKHR = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_KHR_pipeline_executable_properties"))
		addFeatures(&physicalDevicePipelineExecutablePropertiesFeaturesKHR);

	// VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT for ext [VK_EXT_pipeline_library_group_handles]
	vk::VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT physicalDevicePipelineLibraryGroupHandlesFeaturesEXT = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_pipeline_library_group_handles"))
		addFeatures(&physicalDevicePipelineLibraryGroupHandlesFeaturesEXT);

	// VkPhysicalDevicePipelineOpacityMicromapFeaturesARM for ext [VK_ARM_pipeline_opacity_micromap]
	vk::VkPhysicalDevicePipelineOpacityMicromapFeaturesARM physicalDevicePipelineOpacityMicromapFeaturesARM = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_ARM_pipeline_opacity_micromap"))
		addFeatures(&physicalDevicePipelineOpacityMicromapFeaturesARM);

	// VkPhysicalDevicePipelinePropertiesFeaturesEXT for ext [VK_EXT_pipeline_properties]
	vk::VkPhysicalDevicePipelinePropertiesFeaturesEXT physicalDevicePipelinePropertiesFeaturesEXT = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_pipeline_properties"))
		addFeatures(&physicalDevicePipelinePropertiesFeaturesEXT);

	// VkPhysicalDevicePipelineProtectedAccessFeatures, VkPhysicalDevicePipelineProtectedAccessFeaturesEXT for ext [VK_EXT_pipeline_protected_access]
	vk::VkPhysicalDevicePipelineProtectedAccessFeatures physicalDevicePipelineProtectedAccessFeatures = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_pipeline_protected_access"))
		addFeatures(&physicalDevicePipelineProtectedAccessFeatures);

	// VkPhysicalDevicePipelineRobustnessFeatures, VkPhysicalDevicePipelineRobustnessFeaturesEXT for ext [VK_EXT_pipeline_robustness]
	vk::VkPhysicalDevicePipelineRobustnessFeatures physicalDevicePipelineRobustnessFeatures = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_pipeline_robustness"))
		addFeatures(&physicalDevicePipelineRobustnessFeatures);

	// VkPhysicalDevicePresentBarrierFeaturesNV for ext [VK_NV_present_barrier]
	vk::VkPhysicalDevicePresentBarrierFeaturesNV physicalDevicePresentBarrierFeaturesNV = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_NV_present_barrier"))
		addFeatures(&physicalDevicePresentBarrierFeaturesNV);

	// VkPhysicalDevicePresentId2FeaturesKHR for ext [VK_KHR_present_id2]
	vk::VkPhysicalDevicePresentId2FeaturesKHR physicalDevicePresentId2FeaturesKHR = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_KHR_present_id2"))
		addFeatures(&physicalDevicePresentId2FeaturesKHR);

	// VkPhysicalDevicePresentIdFeaturesKHR for ext [VK_KHR_present_id]
	vk::VkPhysicalDevicePresentIdFeaturesKHR physicalDevicePresentIdFeaturesKHR = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_KHR_present_id"))
		addFeatures(&physicalDevicePresentIdFeaturesKHR);

	// VkPhysicalDevicePresentMeteringFeaturesNV for ext [VK_NV_present_metering]
	vk::VkPhysicalDevicePresentMeteringFeaturesNV physicalDevicePresentMeteringFeaturesNV = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_NV_present_metering"))
		addFeatures(&physicalDevicePresentMeteringFeaturesNV);

	// VkPhysicalDevicePresentModeFifoLatestReadyFeaturesKHR, VkPhysicalDevicePresentModeFifoLatestReadyFeaturesEXT for ext [VK_KHR_present_mode_fifo_latest_ready, VK_EXT_present_mode_fifo_latest_ready]
	vk::VkPhysicalDevicePresentModeFifoLatestReadyFeaturesKHR physicalDevicePresentModeFifoLatestReadyFeaturesKHR = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_KHR_present_mode_fifo_latest_ready", "VK_EXT_present_mode_fifo_latest_ready"))
		addFeatures(&physicalDevicePresentModeFifoLatestReadyFeaturesKHR);

	// VkPhysicalDevicePresentWait2FeaturesKHR for ext [VK_KHR_present_wait2]
	vk::VkPhysicalDevicePresentWait2FeaturesKHR physicalDevicePresentWait2FeaturesKHR = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_KHR_present_wait2"))
		addFeatures(&physicalDevicePresentWait2FeaturesKHR);

	// VkPhysicalDevicePresentWaitFeaturesKHR for ext [VK_KHR_present_wait]
	vk::VkPhysicalDevicePresentWaitFeaturesKHR physicalDevicePresentWaitFeaturesKHR = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_KHR_present_wait"))
		addFeatures(&physicalDevicePresentWaitFeaturesKHR);

	// VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT for ext [VK_EXT_primitive_topology_list_restart]
	vk::VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT physicalDevicePrimitiveTopologyListRestartFeaturesEXT = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_primitive_topology_list_restart"))
		addFeatures(&physicalDevicePrimitiveTopologyListRestartFeaturesEXT);

	// VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT for ext [VK_EXT_primitives_generated_query]
	vk::VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT physicalDevicePrimitivesGeneratedQueryFeaturesEXT = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_primitives_generated_query"))
		addFeatures(&physicalDevicePrimitivesGeneratedQueryFeaturesEXT);

	// VkPhysicalDevicePrivateDataFeatures, VkPhysicalDevicePrivateDataFeaturesEXT for ext [VK_EXT_private_data]
	vk::VkPhysicalDevicePrivateDataFeatures physicalDevicePrivateDataFeatures = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_private_data"))
		addFeatures(&physicalDevicePrivateDataFeatures);

	// VkPhysicalDeviceProtectedMemoryFeatures for ext []
	vk::VkPhysicalDeviceProtectedMemoryFeatures physicalDeviceProtectedMemoryFeatures = initVulkanStructure();
	if (context.contextSupports(vk::ApiVersion(0, 1, 1, 0)))
		addFeatures(&physicalDeviceProtectedMemoryFeatures);

	// VkPhysicalDeviceProvokingVertexFeaturesEXT for ext [VK_EXT_provoking_vertex]
	vk::VkPhysicalDeviceProvokingVertexFeaturesEXT physicalDeviceProvokingVertexFeaturesEXT = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_provoking_vertex"))
		addFeatures(&physicalDeviceProvokingVertexFeaturesEXT);

	// VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT for ext [VK_EXT_rgba10x6_formats]
	vk::VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT physicalDeviceRGBA10X6FormatsFeaturesEXT = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_rgba10x6_formats"))
		addFeatures(&physicalDeviceRGBA10X6FormatsFeaturesEXT);

	// VkPhysicalDeviceRawAccessChainsFeaturesNV for ext [VK_NV_raw_access_chains]
	vk::VkPhysicalDeviceRawAccessChainsFeaturesNV physicalDeviceRawAccessChainsFeaturesNV = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_NV_raw_access_chains"))
		addFeatures(&physicalDeviceRawAccessChainsFeaturesNV);

	// VkPhysicalDeviceRayQueryFeaturesKHR for ext [VK_KHR_ray_query]
	vk::VkPhysicalDeviceRayQueryFeaturesKHR physicalDeviceRayQueryFeaturesKHR = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_KHR_ray_query"))
		addFeatures(&physicalDeviceRayQueryFeaturesKHR);

	// VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV for ext [VK_NV_ray_tracing_invocation_reorder]
	vk::VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV physicalDeviceRayTracingInvocationReorderFeaturesNV = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_NV_ray_tracing_invocation_reorder"))
		addFeatures(&physicalDeviceRayTracingInvocationReorderFeaturesNV);

	// VkPhysicalDeviceRayTracingLinearSweptSpheresFeaturesNV for ext [VK_NV_ray_tracing_linear_swept_spheres]
	vk::VkPhysicalDeviceRayTracingLinearSweptSpheresFeaturesNV physicalDeviceRayTracingLinearSweptSpheresFeaturesNV = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_NV_ray_tracing_linear_swept_spheres"))
		addFeatures(&physicalDeviceRayTracingLinearSweptSpheresFeaturesNV);

	// VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR for ext [VK_KHR_ray_tracing_maintenance1]
	vk::VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR physicalDeviceRayTracingMaintenance1FeaturesKHR = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_KHR_ray_tracing_maintenance1"))
		addFeatures(&physicalDeviceRayTracingMaintenance1FeaturesKHR);

	// VkPhysicalDeviceRayTracingMotionBlurFeaturesNV for ext [VK_NV_ray_tracing_motion_blur]
	vk::VkPhysicalDeviceRayTracingMotionBlurFeaturesNV physicalDeviceRayTracingMotionBlurFeaturesNV = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_NV_ray_tracing_motion_blur"))
		addFeatures(&physicalDeviceRayTracingMotionBlurFeaturesNV);

	// VkPhysicalDeviceRayTracingPipelineFeaturesKHR for ext [VK_KHR_ray_tracing_pipeline]
	vk::VkPhysicalDeviceRayTracingPipelineFeaturesKHR physicalDeviceRayTracingPipelineFeaturesKHR = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_KHR_ray_tracing_pipeline"))
		addFeatures(&physicalDeviceRayTracingPipelineFeaturesKHR);

	// VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR for ext [VK_KHR_ray_tracing_position_fetch]
	vk::VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR physicalDeviceRayTracingPositionFetchFeaturesKHR = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_KHR_ray_tracing_position_fetch"))
		addFeatures(&physicalDeviceRayTracingPositionFetchFeaturesKHR);

	// VkPhysicalDeviceRayTracingValidationFeaturesNV for ext [VK_NV_ray_tracing_validation]
	vk::VkPhysicalDeviceRayTracingValidationFeaturesNV physicalDeviceRayTracingValidationFeaturesNV = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_NV_ray_tracing_validation"))
		addFeatures(&physicalDeviceRayTracingValidationFeaturesNV);

	// VkPhysicalDeviceRelaxedLineRasterizationFeaturesIMG for ext [VK_IMG_relaxed_line_rasterization]
	vk::VkPhysicalDeviceRelaxedLineRasterizationFeaturesIMG physicalDeviceRelaxedLineRasterizationFeaturesIMG = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_IMG_relaxed_line_rasterization"))
		addFeatures(&physicalDeviceRelaxedLineRasterizationFeaturesIMG);

	// VkPhysicalDeviceRenderPassStripedFeaturesARM for ext [VK_ARM_render_pass_striped]
	vk::VkPhysicalDeviceRenderPassStripedFeaturesARM physicalDeviceRenderPassStripedFeaturesARM = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_ARM_render_pass_striped"))
		addFeatures(&physicalDeviceRenderPassStripedFeaturesARM);

	// VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV for ext [VK_NV_representative_fragment_test]
	vk::VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV physicalDeviceRepresentativeFragmentTestFeaturesNV = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_NV_representative_fragment_test"))
		addFeatures(&physicalDeviceRepresentativeFragmentTestFeaturesNV);

	// VkPhysicalDeviceRobustness2FeaturesKHR, VkPhysicalDeviceRobustness2FeaturesEXT for ext [VK_KHR_robustness2, VK_EXT_robustness2]
	vk::VkPhysicalDeviceRobustness2FeaturesKHR physicalDeviceRobustness2FeaturesKHR = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_KHR_robustness2", "VK_EXT_robustness2"))
		addFeatures(&physicalDeviceRobustness2FeaturesKHR);

	// VkPhysicalDeviceSamplerYcbcrConversionFeatures, VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR for ext [VK_KHR_sampler_ycbcr_conversion]
	vk::VkPhysicalDeviceSamplerYcbcrConversionFeatures physicalDeviceSamplerYcbcrConversionFeatures = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_KHR_sampler_ycbcr_conversion"))
		addFeatures(&physicalDeviceSamplerYcbcrConversionFeatures);

	// VkPhysicalDeviceScalarBlockLayoutFeatures, VkPhysicalDeviceScalarBlockLayoutFeaturesEXT for ext [VK_EXT_scalar_block_layout]
	vk::VkPhysicalDeviceScalarBlockLayoutFeatures physicalDeviceScalarBlockLayoutFeatures = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_scalar_block_layout"))
		addFeatures(&physicalDeviceScalarBlockLayoutFeatures);

	// VkPhysicalDeviceSchedulingControlsFeaturesARM for ext [VK_ARM_scheduling_controls]
	vk::VkPhysicalDeviceSchedulingControlsFeaturesARM physicalDeviceSchedulingControlsFeaturesARM = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_ARM_scheduling_controls"))
		addFeatures(&physicalDeviceSchedulingControlsFeaturesARM);

	// VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures, VkPhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHR for ext [VK_KHR_separate_depth_stencil_layouts]
	vk::VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures physicalDeviceSeparateDepthStencilLayoutsFeatures = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_KHR_separate_depth_stencil_layouts"))
		addFeatures(&physicalDeviceSeparateDepthStencilLayoutsFeatures);

	// VkPhysicalDeviceShaderAtomicFloat16VectorFeaturesNV for ext [VK_NV_shader_atomic_float16_vector]
	vk::VkPhysicalDeviceShaderAtomicFloat16VectorFeaturesNV physicalDeviceShaderAtomicFloat16VectorFeaturesNV = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_NV_shader_atomic_float16_vector"))
		addFeatures(&physicalDeviceShaderAtomicFloat16VectorFeaturesNV);

	// VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT for ext [VK_EXT_shader_atomic_float2]
	vk::VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT physicalDeviceShaderAtomicFloat2FeaturesEXT = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_shader_atomic_float2"))
		addFeatures(&physicalDeviceShaderAtomicFloat2FeaturesEXT);

	// VkPhysicalDeviceShaderAtomicFloatFeaturesEXT for ext [VK_EXT_shader_atomic_float]
	vk::VkPhysicalDeviceShaderAtomicFloatFeaturesEXT physicalDeviceShaderAtomicFloatFeaturesEXT = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_shader_atomic_float"))
		addFeatures(&physicalDeviceShaderAtomicFloatFeaturesEXT);

	// VkPhysicalDeviceShaderAtomicInt64Features, VkPhysicalDeviceShaderAtomicInt64FeaturesKHR for ext [VK_KHR_shader_atomic_int64]
	vk::VkPhysicalDeviceShaderAtomicInt64Features physicalDeviceShaderAtomicInt64Features = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_KHR_shader_atomic_int64"))
		addFeatures(&physicalDeviceShaderAtomicInt64Features);

	// VkPhysicalDeviceShaderBfloat16FeaturesKHR for ext [VK_KHR_shader_bfloat16]
	vk::VkPhysicalDeviceShaderBfloat16FeaturesKHR physicalDeviceShaderBfloat16FeaturesKHR = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_KHR_shader_bfloat16"))
		addFeatures(&physicalDeviceShaderBfloat16FeaturesKHR);

	// VkPhysicalDeviceShaderClockFeaturesKHR for ext [VK_KHR_shader_clock]
	vk::VkPhysicalDeviceShaderClockFeaturesKHR physicalDeviceShaderClockFeaturesKHR = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_KHR_shader_clock"))
		addFeatures(&physicalDeviceShaderClockFeaturesKHR);

	// VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM for ext [VK_ARM_shader_core_builtins]
	vk::VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM physicalDeviceShaderCoreBuiltinsFeaturesARM = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_ARM_shader_core_builtins"))
		addFeatures(&physicalDeviceShaderCoreBuiltinsFeaturesARM);

	// VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures, VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT for ext [VK_EXT_shader_demote_to_helper_invocation]
	vk::VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures physicalDeviceShaderDemoteToHelperInvocationFeatures = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_shader_demote_to_helper_invocation"))
		addFeatures(&physicalDeviceShaderDemoteToHelperInvocationFeatures);

	// VkPhysicalDeviceShaderDrawParametersFeatures, VkPhysicalDeviceShaderDrawParameterFeatures for ext []
	vk::VkPhysicalDeviceShaderDrawParametersFeatures physicalDeviceShaderDrawParametersFeatures = initVulkanStructure();
	if (context.contextSupports(vk::ApiVersion(0, 1, 1, 0)))
		addFeatures(&physicalDeviceShaderDrawParametersFeatures);

	// VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD for ext [VK_AMD_shader_early_and_late_fragment_tests]
	vk::VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD physicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_AMD_shader_early_and_late_fragment_tests"))
		addFeatures(&physicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD);

	// VkPhysicalDeviceShaderEnqueueFeaturesAMDX for ext [VK_AMDX_shader_enqueue]
	vk::VkPhysicalDeviceShaderEnqueueFeaturesAMDX physicalDeviceShaderEnqueueFeaturesAMDX = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_AMDX_shader_enqueue"))
		addFeatures(&physicalDeviceShaderEnqueueFeaturesAMDX);

	// VkPhysicalDeviceShaderExpectAssumeFeatures, VkPhysicalDeviceShaderExpectAssumeFeaturesKHR for ext [VK_KHR_shader_expect_assume]
	vk::VkPhysicalDeviceShaderExpectAssumeFeatures physicalDeviceShaderExpectAssumeFeatures = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_KHR_shader_expect_assume"))
		addFeatures(&physicalDeviceShaderExpectAssumeFeatures);

	// VkPhysicalDeviceShaderFloat16Int8Features, VkPhysicalDeviceShaderFloat16Int8FeaturesKHR, VkPhysicalDeviceFloat16Int8FeaturesKHR for ext [VK_KHR_shader_float16_int8]
	vk::VkPhysicalDeviceShaderFloat16Int8Features physicalDeviceShaderFloat16Int8Features = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_KHR_shader_float16_int8"))
		addFeatures(&physicalDeviceShaderFloat16Int8Features);

	// VkPhysicalDeviceShaderFloat8FeaturesEXT for ext [VK_EXT_shader_float8]
	vk::VkPhysicalDeviceShaderFloat8FeaturesEXT physicalDeviceShaderFloat8FeaturesEXT = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_shader_float8"))
		addFeatures(&physicalDeviceShaderFloat8FeaturesEXT);

	// VkPhysicalDeviceShaderFloatControls2Features, VkPhysicalDeviceShaderFloatControls2FeaturesKHR for ext [VK_KHR_shader_float_controls2]
	vk::VkPhysicalDeviceShaderFloatControls2Features physicalDeviceShaderFloatControls2Features = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_KHR_shader_float_controls2"))
		addFeatures(&physicalDeviceShaderFloatControls2Features);

	// VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT for ext [VK_EXT_shader_image_atomic_int64]
	vk::VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT physicalDeviceShaderImageAtomicInt64FeaturesEXT = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_shader_image_atomic_int64"))
		addFeatures(&physicalDeviceShaderImageAtomicInt64FeaturesEXT);

	// VkPhysicalDeviceShaderImageFootprintFeaturesNV for ext [VK_NV_shader_image_footprint]
	vk::VkPhysicalDeviceShaderImageFootprintFeaturesNV physicalDeviceShaderImageFootprintFeaturesNV = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_NV_shader_image_footprint"))
		addFeatures(&physicalDeviceShaderImageFootprintFeaturesNV);

	// VkPhysicalDeviceShaderIntegerDotProductFeatures, VkPhysicalDeviceShaderIntegerDotProductFeaturesKHR for ext [VK_KHR_shader_integer_dot_product]
	vk::VkPhysicalDeviceShaderIntegerDotProductFeatures physicalDeviceShaderIntegerDotProductFeatures = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_KHR_shader_integer_dot_product"))
		addFeatures(&physicalDeviceShaderIntegerDotProductFeatures);

	// VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL for ext [VK_INTEL_shader_integer_functions2]
	vk::VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL physicalDeviceShaderIntegerFunctions2FeaturesINTEL = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_INTEL_shader_integer_functions2"))
		addFeatures(&physicalDeviceShaderIntegerFunctions2FeaturesINTEL);

	// VkPhysicalDeviceShaderMaximalReconvergenceFeaturesKHR for ext [VK_KHR_shader_maximal_reconvergence]
	vk::VkPhysicalDeviceShaderMaximalReconvergenceFeaturesKHR physicalDeviceShaderMaximalReconvergenceFeaturesKHR = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_KHR_shader_maximal_reconvergence"))
		addFeatures(&physicalDeviceShaderMaximalReconvergenceFeaturesKHR);

	// VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT for ext [VK_EXT_shader_module_identifier]
	vk::VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT physicalDeviceShaderModuleIdentifierFeaturesEXT = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_shader_module_identifier"))
		addFeatures(&physicalDeviceShaderModuleIdentifierFeaturesEXT);

	// VkPhysicalDeviceShaderObjectFeaturesEXT for ext [VK_EXT_shader_object]
	vk::VkPhysicalDeviceShaderObjectFeaturesEXT physicalDeviceShaderObjectFeaturesEXT = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_shader_object"))
		addFeatures(&physicalDeviceShaderObjectFeaturesEXT);

	// VkPhysicalDeviceShaderQuadControlFeaturesKHR for ext [VK_KHR_shader_quad_control]
	vk::VkPhysicalDeviceShaderQuadControlFeaturesKHR physicalDeviceShaderQuadControlFeaturesKHR = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_KHR_shader_quad_control"))
		addFeatures(&physicalDeviceShaderQuadControlFeaturesKHR);

	// VkPhysicalDeviceShaderRelaxedExtendedInstructionFeaturesKHR for ext [VK_KHR_shader_relaxed_extended_instruction]
	vk::VkPhysicalDeviceShaderRelaxedExtendedInstructionFeaturesKHR physicalDeviceShaderRelaxedExtendedInstructionFeaturesKHR = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_KHR_shader_relaxed_extended_instruction"))
		addFeatures(&physicalDeviceShaderRelaxedExtendedInstructionFeaturesKHR);

	// VkPhysicalDeviceShaderReplicatedCompositesFeaturesEXT for ext [VK_EXT_shader_replicated_composites]
	vk::VkPhysicalDeviceShaderReplicatedCompositesFeaturesEXT physicalDeviceShaderReplicatedCompositesFeaturesEXT = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_shader_replicated_composites"))
		addFeatures(&physicalDeviceShaderReplicatedCompositesFeaturesEXT);

	// VkPhysicalDeviceShaderSMBuiltinsFeaturesNV for ext [VK_NV_shader_sm_builtins]
	vk::VkPhysicalDeviceShaderSMBuiltinsFeaturesNV physicalDeviceShaderSMBuiltinsFeaturesNV = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_NV_shader_sm_builtins"))
		addFeatures(&physicalDeviceShaderSMBuiltinsFeaturesNV);

	// VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures, VkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR for ext [VK_KHR_shader_subgroup_extended_types]
	vk::VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures physicalDeviceShaderSubgroupExtendedTypesFeatures = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_KHR_shader_subgroup_extended_types"))
		addFeatures(&physicalDeviceShaderSubgroupExtendedTypesFeatures);

	// VkPhysicalDeviceShaderSubgroupRotateFeatures, VkPhysicalDeviceShaderSubgroupRotateFeaturesKHR for ext [VK_KHR_shader_subgroup_rotate]
	vk::VkPhysicalDeviceShaderSubgroupRotateFeatures physicalDeviceShaderSubgroupRotateFeatures = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_KHR_shader_subgroup_rotate"))
		addFeatures(&physicalDeviceShaderSubgroupRotateFeatures);

	// VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR for ext [VK_KHR_shader_subgroup_uniform_control_flow]
	vk::VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR physicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_KHR_shader_subgroup_uniform_control_flow"))
		addFeatures(&physicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR);

	// VkPhysicalDeviceShaderTerminateInvocationFeatures, VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR for ext [VK_KHR_shader_terminate_invocation]
	vk::VkPhysicalDeviceShaderTerminateInvocationFeatures physicalDeviceShaderTerminateInvocationFeatures = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_KHR_shader_terminate_invocation"))
		addFeatures(&physicalDeviceShaderTerminateInvocationFeatures);

	// VkPhysicalDeviceShaderTileImageFeaturesEXT for ext [VK_EXT_shader_tile_image]
	vk::VkPhysicalDeviceShaderTileImageFeaturesEXT physicalDeviceShaderTileImageFeaturesEXT = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_shader_tile_image"))
		addFeatures(&physicalDeviceShaderTileImageFeaturesEXT);

	// VkPhysicalDeviceShaderUntypedPointersFeaturesKHR for ext [VK_KHR_shader_untyped_pointers]
	vk::VkPhysicalDeviceShaderUntypedPointersFeaturesKHR physicalDeviceShaderUntypedPointersFeaturesKHR = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_KHR_shader_untyped_pointers"))
		addFeatures(&physicalDeviceShaderUntypedPointersFeaturesKHR);

	// VkPhysicalDeviceShadingRateImageFeaturesNV for ext [VK_NV_shading_rate_image]
	vk::VkPhysicalDeviceShadingRateImageFeaturesNV physicalDeviceShadingRateImageFeaturesNV = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_NV_shading_rate_image"))
		addFeatures(&physicalDeviceShadingRateImageFeaturesNV);

	// VkPhysicalDeviceSubgroupSizeControlFeatures, VkPhysicalDeviceSubgroupSizeControlFeaturesEXT for ext [VK_EXT_subgroup_size_control]
	vk::VkPhysicalDeviceSubgroupSizeControlFeatures physicalDeviceSubgroupSizeControlFeatures = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_subgroup_size_control"))
		addFeatures(&physicalDeviceSubgroupSizeControlFeatures);

	// VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT for ext [VK_EXT_subpass_merge_feedback]
	vk::VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT physicalDeviceSubpassMergeFeedbackFeaturesEXT = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_subpass_merge_feedback"))
		addFeatures(&physicalDeviceSubpassMergeFeedbackFeaturesEXT);

	// VkPhysicalDeviceSubpassShadingFeaturesHUAWEI for ext [VK_HUAWEI_subpass_shading]
	vk::VkPhysicalDeviceSubpassShadingFeaturesHUAWEI physicalDeviceSubpassShadingFeaturesHUAWEI = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_HUAWEI_subpass_shading"))
		addFeatures(&physicalDeviceSubpassShadingFeaturesHUAWEI);

	// VkPhysicalDeviceSwapchainMaintenance1FeaturesKHR, VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT for ext [VK_KHR_swapchain_maintenance1, VK_EXT_swapchain_maintenance1]
	vk::VkPhysicalDeviceSwapchainMaintenance1FeaturesKHR physicalDeviceSwapchainMaintenance1FeaturesKHR = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_KHR_swapchain_maintenance1", "VK_EXT_swapchain_maintenance1"))
		addFeatures(&physicalDeviceSwapchainMaintenance1FeaturesKHR);

	// VkPhysicalDeviceSynchronization2Features, VkPhysicalDeviceSynchronization2FeaturesKHR for ext [VK_KHR_synchronization2]
	vk::VkPhysicalDeviceSynchronization2Features physicalDeviceSynchronization2Features = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_KHR_synchronization2"))
		addFeatures(&physicalDeviceSynchronization2Features);

	// VkPhysicalDeviceTensorFeaturesARM for ext [VK_ARM_tensors]
	vk::VkPhysicalDeviceTensorFeaturesARM physicalDeviceTensorFeaturesARM = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_ARM_tensors"))
		addFeatures(&physicalDeviceTensorFeaturesARM);

	// VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT for ext [VK_EXT_texel_buffer_alignment]
	vk::VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT physicalDeviceTexelBufferAlignmentFeaturesEXT = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_texel_buffer_alignment"))
		addFeatures(&physicalDeviceTexelBufferAlignmentFeaturesEXT);

	// VkPhysicalDeviceTextureCompressionASTCHDRFeatures, VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT for ext [VK_EXT_texture_compression_astc_hdr]
	vk::VkPhysicalDeviceTextureCompressionASTCHDRFeatures physicalDeviceTextureCompressionASTCHDRFeatures = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_texture_compression_astc_hdr"))
		addFeatures(&physicalDeviceTextureCompressionASTCHDRFeatures);

	// VkPhysicalDeviceTileMemoryHeapFeaturesQCOM for ext [VK_QCOM_tile_memory_heap]
	vk::VkPhysicalDeviceTileMemoryHeapFeaturesQCOM physicalDeviceTileMemoryHeapFeaturesQCOM = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_QCOM_tile_memory_heap"))
		addFeatures(&physicalDeviceTileMemoryHeapFeaturesQCOM);

	// VkPhysicalDeviceTilePropertiesFeaturesQCOM for ext [VK_QCOM_tile_properties]
	vk::VkPhysicalDeviceTilePropertiesFeaturesQCOM physicalDeviceTilePropertiesFeaturesQCOM = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_QCOM_tile_properties"))
		addFeatures(&physicalDeviceTilePropertiesFeaturesQCOM);

	// VkPhysicalDeviceTileShadingFeaturesQCOM for ext [VK_QCOM_tile_shading]
	vk::VkPhysicalDeviceTileShadingFeaturesQCOM physicalDeviceTileShadingFeaturesQCOM = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_QCOM_tile_shading"))
		addFeatures(&physicalDeviceTileShadingFeaturesQCOM);

	// VkPhysicalDeviceTimelineSemaphoreFeatures, VkPhysicalDeviceTimelineSemaphoreFeaturesKHR for ext [VK_KHR_timeline_semaphore]
	vk::VkPhysicalDeviceTimelineSemaphoreFeatures physicalDeviceTimelineSemaphoreFeatures = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_KHR_timeline_semaphore"))
		addFeatures(&physicalDeviceTimelineSemaphoreFeatures);

	// VkPhysicalDeviceTransformFeedbackFeaturesEXT for ext [VK_EXT_transform_feedback]
	vk::VkPhysicalDeviceTransformFeedbackFeaturesEXT physicalDeviceTransformFeedbackFeaturesEXT = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_transform_feedback"))
		addFeatures(&physicalDeviceTransformFeedbackFeaturesEXT);

	// VkPhysicalDeviceUnifiedImageLayoutsFeaturesKHR for ext [VK_KHR_unified_image_layouts]
	vk::VkPhysicalDeviceUnifiedImageLayoutsFeaturesKHR physicalDeviceUnifiedImageLayoutsFeaturesKHR = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_KHR_unified_image_layouts"))
		addFeatures(&physicalDeviceUnifiedImageLayoutsFeaturesKHR);

	// VkPhysicalDeviceUniformBufferStandardLayoutFeatures, VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR for ext [VK_KHR_uniform_buffer_standard_layout]
	vk::VkPhysicalDeviceUniformBufferStandardLayoutFeatures physicalDeviceUniformBufferStandardLayoutFeatures = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_KHR_uniform_buffer_standard_layout"))
		addFeatures(&physicalDeviceUniformBufferStandardLayoutFeatures);

	// VkPhysicalDeviceVariablePointersFeatures, VkPhysicalDeviceVariablePointerFeatures, VkPhysicalDeviceVariablePointerFeaturesKHR, VkPhysicalDeviceVariablePointersFeaturesKHR for ext [VK_KHR_variable_pointers]
	vk::VkPhysicalDeviceVariablePointersFeatures physicalDeviceVariablePointersFeatures = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_KHR_variable_pointers"))
		addFeatures(&physicalDeviceVariablePointersFeatures);

	// VkPhysicalDeviceVertexAttributeDivisorFeatures, VkPhysicalDeviceVertexAttributeDivisorFeaturesKHR, VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT for ext [VK_KHR_vertex_attribute_divisor, VK_EXT_vertex_attribute_divisor]
	vk::VkPhysicalDeviceVertexAttributeDivisorFeatures physicalDeviceVertexAttributeDivisorFeatures = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_KHR_vertex_attribute_divisor", "VK_EXT_vertex_attribute_divisor"))
		addFeatures(&physicalDeviceVertexAttributeDivisorFeatures);

	// VkPhysicalDeviceVertexAttributeRobustnessFeaturesEXT for ext [VK_EXT_vertex_attribute_robustness]
	vk::VkPhysicalDeviceVertexAttributeRobustnessFeaturesEXT physicalDeviceVertexAttributeRobustnessFeaturesEXT = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_vertex_attribute_robustness"))
		addFeatures(&physicalDeviceVertexAttributeRobustnessFeaturesEXT);

	// VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT for ext [VK_EXT_vertex_input_dynamic_state]
	vk::VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT physicalDeviceVertexInputDynamicStateFeaturesEXT = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_vertex_input_dynamic_state"))
		addFeatures(&physicalDeviceVertexInputDynamicStateFeaturesEXT);

	// VkPhysicalDeviceVideoDecodeVP9FeaturesKHR for ext [VK_KHR_video_decode_vp9]
	vk::VkPhysicalDeviceVideoDecodeVP9FeaturesKHR physicalDeviceVideoDecodeVP9FeaturesKHR = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_KHR_video_decode_vp9"))
		addFeatures(&physicalDeviceVideoDecodeVP9FeaturesKHR);

	// VkPhysicalDeviceVideoEncodeAV1FeaturesKHR for ext [VK_KHR_video_encode_av1]
	vk::VkPhysicalDeviceVideoEncodeAV1FeaturesKHR physicalDeviceVideoEncodeAV1FeaturesKHR = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_KHR_video_encode_av1"))
		addFeatures(&physicalDeviceVideoEncodeAV1FeaturesKHR);

	// VkPhysicalDeviceVideoEncodeIntraRefreshFeaturesKHR for ext [VK_KHR_video_encode_intra_refresh]
	vk::VkPhysicalDeviceVideoEncodeIntraRefreshFeaturesKHR physicalDeviceVideoEncodeIntraRefreshFeaturesKHR = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_KHR_video_encode_intra_refresh"))
		addFeatures(&physicalDeviceVideoEncodeIntraRefreshFeaturesKHR);

	// VkPhysicalDeviceVideoEncodeQuantizationMapFeaturesKHR for ext [VK_KHR_video_encode_quantization_map]
	vk::VkPhysicalDeviceVideoEncodeQuantizationMapFeaturesKHR physicalDeviceVideoEncodeQuantizationMapFeaturesKHR = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_KHR_video_encode_quantization_map"))
		addFeatures(&physicalDeviceVideoEncodeQuantizationMapFeaturesKHR);

	// VkPhysicalDeviceVideoMaintenance1FeaturesKHR for ext [VK_KHR_video_maintenance1]
	vk::VkPhysicalDeviceVideoMaintenance1FeaturesKHR physicalDeviceVideoMaintenance1FeaturesKHR = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_KHR_video_maintenance1"))
		addFeatures(&physicalDeviceVideoMaintenance1FeaturesKHR);

	// VkPhysicalDeviceVideoMaintenance2FeaturesKHR for ext [VK_KHR_video_maintenance2]
	vk::VkPhysicalDeviceVideoMaintenance2FeaturesKHR physicalDeviceVideoMaintenance2FeaturesKHR = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_KHR_video_maintenance2"))
		addFeatures(&physicalDeviceVideoMaintenance2FeaturesKHR);

	// VkPhysicalDeviceVulkan11Features for ext []
	vk::VkPhysicalDeviceVulkan11Features physicalDeviceVulkan11Features = initVulkanStructure();
	if (context.contextSupports(vk::ApiVersion(0, 1, 2, 0)))
		addFeatures(&physicalDeviceVulkan11Features);

	// VkPhysicalDeviceVulkan12Features for ext []
	vk::VkPhysicalDeviceVulkan12Features physicalDeviceVulkan12Features = initVulkanStructure();
	if (context.contextSupports(vk::ApiVersion(0, 1, 2, 0)))
		addFeatures(&physicalDeviceVulkan12Features);

	// VkPhysicalDeviceVulkan13Features for ext []
	vk::VkPhysicalDeviceVulkan13Features physicalDeviceVulkan13Features = initVulkanStructure();
	if (context.contextSupports(vk::ApiVersion(0, 1, 3, 0)))
		addFeatures(&physicalDeviceVulkan13Features);

	// VkPhysicalDeviceVulkan14Features for ext []
	vk::VkPhysicalDeviceVulkan14Features physicalDeviceVulkan14Features = initVulkanStructure();
	if (context.contextSupports(vk::ApiVersion(0, 1, 4, 0)))
		addFeatures(&physicalDeviceVulkan14Features);

	// VkPhysicalDeviceVulkanMemoryModelFeatures, VkPhysicalDeviceVulkanMemoryModelFeaturesKHR for ext [VK_KHR_vulkan_memory_model]
	vk::VkPhysicalDeviceVulkanMemoryModelFeatures physicalDeviceVulkanMemoryModelFeatures = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_KHR_vulkan_memory_model"))
		addFeatures(&physicalDeviceVulkanMemoryModelFeatures);

	// VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR for ext [VK_KHR_workgroup_memory_explicit_layout]
	vk::VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR physicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_KHR_workgroup_memory_explicit_layout"))
		addFeatures(&physicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR);

	// VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT for ext [VK_EXT_ycbcr_2plane_444_formats]
	vk::VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT physicalDeviceYcbcr2Plane444FormatsFeaturesEXT = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_ycbcr_2plane_444_formats"))
		addFeatures(&physicalDeviceYcbcr2Plane444FormatsFeaturesEXT);

	// VkPhysicalDeviceYcbcrDegammaFeaturesQCOM for ext [VK_QCOM_ycbcr_degamma]
	vk::VkPhysicalDeviceYcbcrDegammaFeaturesQCOM physicalDeviceYcbcrDegammaFeaturesQCOM = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_QCOM_ycbcr_degamma"))
		addFeatures(&physicalDeviceYcbcrDegammaFeaturesQCOM);

	// VkPhysicalDeviceYcbcrImageArraysFeaturesEXT for ext [VK_EXT_ycbcr_image_arrays]
	vk::VkPhysicalDeviceYcbcrImageArraysFeaturesEXT physicalDeviceYcbcrImageArraysFeaturesEXT = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_ycbcr_image_arrays"))
		addFeatures(&physicalDeviceYcbcrImageArraysFeaturesEXT);

	// VkPhysicalDeviceZeroInitializeDeviceMemoryFeaturesEXT for ext [VK_EXT_zero_initialize_device_memory]
	vk::VkPhysicalDeviceZeroInitializeDeviceMemoryFeaturesEXT physicalDeviceZeroInitializeDeviceMemoryFeaturesEXT = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_zero_initialize_device_memory"))
		addFeatures(&physicalDeviceZeroInitializeDeviceMemoryFeaturesEXT);

	// VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures, VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR for ext [VK_KHR_zero_initialize_workgroup_memory]
	vk::VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures physicalDeviceZeroInitializeWorkgroupMemoryFeatures = initVulkanStructure();
	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_KHR_zero_initialize_workgroup_memory"))
		addFeatures(&physicalDeviceZeroInitializeWorkgroupMemoryFeatures);

	context.getInstanceInterface().getPhysicalDeviceFeatures2(context.getPhysicalDevice(), &coreFeatures);

	// VkPhysicalDeviceDynamicRenderingFeaturesKHR
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_dynamic_rendering")) )
	{
		if ( physicalDeviceDynamicRenderingFeatures.dynamicRendering == VK_FALSE )
			failMesages.push_back("dynamicRendering");
	}

	// VkPhysicalDeviceMultiviewFeaturesKHR
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_multiview")) )
	{
		if ( physicalDeviceMultiviewFeatures.multiview == VK_FALSE )
			failMesages.push_back("multiview");
	}

	// VkPhysicalDeviceShaderFloat16Int8FeaturesKHR
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_shader_float16_int8")) )
	{
		if ( (physicalDeviceShaderFloat16Int8Features.shaderFloat16 == VK_FALSE) && (physicalDeviceShaderFloat16Int8Features.shaderInt8 == VK_FALSE) )
			failMesages.push_back("shaderFloat16 or shaderInt8");
	}

	// VkPhysicalDevice16BitStorageFeaturesKHR
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_16bit_storage")) )
	{
		if ( physicalDevice16BitStorageFeatures.storageBuffer16BitAccess == VK_FALSE )
			failMesages.push_back("storageBuffer16BitAccess");
	}

	// VkPhysicalDeviceImagelessFramebufferFeaturesKHR
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_imageless_framebuffer")) )
	{
		if ( physicalDeviceImagelessFramebufferFeatures.imagelessFramebuffer == VK_FALSE )
			failMesages.push_back("imagelessFramebuffer");
	}

	// VkPhysicalDevicePerformanceQueryFeaturesKHR
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_performance_query")) )
	{
		if ( physicalDevicePerformanceQueryFeaturesKHR.performanceCounterQueryPools == VK_FALSE )
			failMesages.push_back("performanceCounterQueryPools");
	}

	// VkPhysicalDeviceVariablePointerFeaturesKHR
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_variable_pointers")) )
	{
		if ( physicalDeviceVariablePointersFeatures.variablePointersStorageBuffer == VK_FALSE )
			failMesages.push_back("variablePointersStorageBuffer");
	}

	// VkPhysicalDeviceShaderBfloat16FeaturesKHR
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_shader_bfloat16")) )
	{
		if ( physicalDeviceShaderBfloat16FeaturesKHR.shaderBFloat16Type == VK_FALSE )
			failMesages.push_back("shaderBFloat16Type");
	}

	// VkPhysicalDeviceShaderBfloat16FeaturesKHR
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_shader_bfloat16")) )
	{
		if ( (physicalDeviceShaderBfloat16FeaturesKHR.shaderBFloat16CooperativeMatrix == VK_FALSE) && (physicalDeviceShaderBfloat16FeaturesKHR.shaderBFloat16DotProduct == VK_FALSE) )
			failMesages.push_back("shaderBFloat16CooperativeMatrix or shaderBFloat16DotProduct");
	}

	// VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_sampler_ycbcr_conversion")) )
	{
		if ( physicalDeviceSamplerYcbcrConversionFeatures.samplerYcbcrConversion == VK_FALSE )
			failMesages.push_back("samplerYcbcrConversion");
	}

	// VkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_shader_subgroup_extended_types")) )
	{
		if ( physicalDeviceShaderSubgroupExtendedTypesFeatures.shaderSubgroupExtendedTypes == VK_FALSE )
			failMesages.push_back("shaderSubgroupExtendedTypes");
	}

	// VkPhysicalDevice8BitStorageFeaturesKHR
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_8bit_storage")) )
	{
		if ( physicalDevice8BitStorageFeatures.storageBuffer8BitAccess == VK_FALSE )
			failMesages.push_back("storageBuffer8BitAccess");
	}

	// VkPhysicalDeviceShaderAtomicInt64FeaturesKHR
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_shader_atomic_int64")) )
	{
		if ( physicalDeviceShaderAtomicInt64Features.shaderBufferInt64Atomics == VK_FALSE )
			failMesages.push_back("shaderBufferInt64Atomics");
	}

	// VkPhysicalDeviceShaderClockFeaturesKHR
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_shader_clock")) )
	{
		if ( physicalDeviceShaderClockFeaturesKHR.shaderSubgroupClock == VK_FALSE )
			failMesages.push_back("shaderSubgroupClock");
	}

	// VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_global_priority")) )
	{
		if ( physicalDeviceGlobalPriorityQueryFeatures.globalPriorityQuery == VK_FALSE )
			failMesages.push_back("globalPriorityQuery");
	}

	// VkPhysicalDeviceTimelineSemaphoreFeaturesKHR
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_timeline_semaphore")) )
	{
		if ( physicalDeviceTimelineSemaphoreFeatures.timelineSemaphore == VK_FALSE )
			failMesages.push_back("timelineSemaphore");
	}

	// VkPhysicalDeviceVulkanMemoryModelFeaturesKHR
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_vulkan_memory_model")) )
	{
		if ( physicalDeviceVulkanMemoryModelFeatures.vulkanMemoryModel == VK_FALSE )
			failMesages.push_back("vulkanMemoryModel");
	}

	// VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_shader_terminate_invocation")) )
	{
		if ( physicalDeviceShaderTerminateInvocationFeatures.shaderTerminateInvocation == VK_FALSE )
			failMesages.push_back("shaderTerminateInvocation");
	}

	// VkPhysicalDeviceFragmentShadingRateFeaturesKHR
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_fragment_shading_rate")) )
	{
		if ( physicalDeviceFragmentShadingRateFeaturesKHR.pipelineFragmentShadingRate == VK_FALSE )
			failMesages.push_back("pipelineFragmentShadingRate");
	}

	// VkPhysicalDeviceDynamicRenderingLocalReadFeaturesKHR
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_dynamic_rendering_local_read")) )
	{
		if ( physicalDeviceDynamicRenderingLocalReadFeatures.dynamicRenderingLocalRead == VK_FALSE )
			failMesages.push_back("dynamicRenderingLocalRead");
	}

	// VkPhysicalDeviceShaderQuadControlFeaturesKHR
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_shader_quad_control")) )
	{
		if ( physicalDeviceShaderQuadControlFeaturesKHR.shaderQuadControl == VK_FALSE )
			failMesages.push_back("shaderQuadControl");
	}

	// VkPhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHR
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_separate_depth_stencil_layouts")) )
	{
		if ( physicalDeviceSeparateDepthStencilLayoutsFeatures.separateDepthStencilLayouts == VK_FALSE )
			failMesages.push_back("separateDepthStencilLayouts");
	}

	// VkPhysicalDevicePresentWaitFeaturesKHR
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_present_wait")) )
	{
		if ( physicalDevicePresentWaitFeaturesKHR.presentWait == VK_FALSE )
			failMesages.push_back("presentWait");
	}

	// VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_uniform_buffer_standard_layout")) )
	{
		if ( physicalDeviceUniformBufferStandardLayoutFeatures.uniformBufferStandardLayout == VK_FALSE )
			failMesages.push_back("uniformBufferStandardLayout");
	}

	// VkPhysicalDeviceBufferDeviceAddressFeaturesKHR
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_buffer_device_address")) )
	{
		if ( physicalDeviceBufferDeviceAddressFeatures.bufferDeviceAddress == VK_FALSE )
			failMesages.push_back("bufferDeviceAddress");
	}

	// VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_pipeline_executable_properties")) )
	{
		if ( physicalDevicePipelineExecutablePropertiesFeaturesKHR.pipelineExecutableInfo == VK_FALSE )
			failMesages.push_back("pipelineExecutableInfo");
	}

	// VkPhysicalDeviceShaderIntegerDotProductFeaturesKHR
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_shader_integer_dot_product")) )
	{
		if ( physicalDeviceShaderIntegerDotProductFeatures.shaderIntegerDotProduct == VK_FALSE )
			failMesages.push_back("shaderIntegerDotProduct");
	}

	// VkPhysicalDevicePresentIdFeaturesKHR
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_present_id")) )
	{
		if ( physicalDevicePresentIdFeaturesKHR.presentId == VK_FALSE )
			failMesages.push_back("presentId");
	}

	// VkPhysicalDeviceSynchronization2FeaturesKHR
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_synchronization2")) )
	{
		if ( physicalDeviceSynchronization2Features.synchronization2 == VK_FALSE )
			failMesages.push_back("synchronization2");
	}

	// VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_fragment_shader_barycentric")) )
	{
		if ( physicalDeviceFragmentShaderBarycentricFeaturesKHR.fragmentShaderBarycentric == VK_FALSE )
			failMesages.push_back("fragmentShaderBarycentric");
	}

	// VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_shader_subgroup_uniform_control_flow")) )
	{
		if ( physicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR.shaderSubgroupUniformControlFlow == VK_FALSE )
			failMesages.push_back("shaderSubgroupUniformControlFlow");
	}

	// VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_zero_initialize_workgroup_memory")) )
	{
		if ( physicalDeviceZeroInitializeWorkgroupMemoryFeatures.shaderZeroInitializeWorkgroupMemory == VK_FALSE )
			failMesages.push_back("shaderZeroInitializeWorkgroupMemory");
	}

	// VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_workgroup_memory_explicit_layout")) )
	{
		if ( physicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR.workgroupMemoryExplicitLayout == VK_FALSE )
			failMesages.push_back("workgroupMemoryExplicitLayout");
	}

	// VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_ray_tracing_maintenance1")) )
	{
		if ( physicalDeviceRayTracingMaintenance1FeaturesKHR.rayTracingMaintenance1 == VK_FALSE )
			failMesages.push_back("rayTracingMaintenance1");
	}

	// VkPhysicalDeviceShaderUntypedPointersFeaturesKHR
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_shader_untyped_pointers")) )
	{
		if ( physicalDeviceShaderUntypedPointersFeaturesKHR.shaderUntypedPointers == VK_FALSE )
			failMesages.push_back("shaderUntypedPointers");
	}

	// VkPhysicalDeviceMaintenance4FeaturesKHR
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_maintenance4")) )
	{
		if ( physicalDeviceMaintenance4Features.maintenance4 == VK_FALSE )
			failMesages.push_back("maintenance4");
	}

	// VkPhysicalDeviceShaderSubgroupRotateFeaturesKHR
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_shader_subgroup_rotate")) )
	{
		if ( physicalDeviceShaderSubgroupRotateFeatures.shaderSubgroupRotate == VK_FALSE )
			failMesages.push_back("shaderSubgroupRotate");
	}

	// VkPhysicalDeviceShaderMaximalReconvergenceFeaturesKHR
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_shader_maximal_reconvergence")) )
	{
		if ( physicalDeviceShaderMaximalReconvergenceFeaturesKHR.shaderMaximalReconvergence == VK_FALSE )
			failMesages.push_back("shaderMaximalReconvergence");
	}

	// VkPhysicalDeviceMaintenance5FeaturesKHR
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_maintenance5")) )
	{
		if ( physicalDeviceMaintenance5Features.maintenance5 == VK_FALSE )
			failMesages.push_back("maintenance5");
	}

	// VkPhysicalDevicePresentId2FeaturesKHR
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_present_id2")) )
	{
		if ( physicalDevicePresentId2FeaturesKHR.presentId2 == VK_FALSE )
			failMesages.push_back("presentId2");
	}

	// VkPhysicalDevicePresentWait2FeaturesKHR
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_present_wait2")) )
	{
		if ( physicalDevicePresentWait2FeaturesKHR.presentWait2 == VK_FALSE )
			failMesages.push_back("presentWait2");
	}

	// VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_ray_tracing_position_fetch")) )
	{
		if ( physicalDeviceRayTracingPositionFetchFeaturesKHR.rayTracingPositionFetch == VK_FALSE )
			failMesages.push_back("rayTracingPositionFetch");
	}

	// VkPhysicalDevicePipelineBinaryFeaturesKHR
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_pipeline_binary")) )
	{
		if ( physicalDevicePipelineBinaryFeaturesKHR.pipelineBinaries == VK_FALSE )
			failMesages.push_back("pipelineBinaries");
	}

	// VkPhysicalDeviceSwapchainMaintenance1FeaturesKHR
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_swapchain_maintenance1")) )
	{
		if ( physicalDeviceSwapchainMaintenance1FeaturesKHR.swapchainMaintenance1 == VK_FALSE )
			failMesages.push_back("swapchainMaintenance1");
	}

	// VkPhysicalDeviceCooperativeMatrixFeaturesKHR
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_cooperative_matrix")) )
	{
		if ( physicalDeviceCooperativeMatrixFeaturesKHR.cooperativeMatrix == VK_FALSE )
			failMesages.push_back("cooperativeMatrix");
	}

	// VkPhysicalDeviceComputeShaderDerivativesFeaturesKHR
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_compute_shader_derivatives")) )
	{
		if ( physicalDeviceComputeShaderDerivativesFeaturesKHR.computeDerivativeGroupLinear == VK_FALSE )
			failMesages.push_back("computeDerivativeGroupLinear");
	}

	// VkPhysicalDeviceVideoEncodeAV1FeaturesKHR
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_video_encode_av1")) )
	{
		if ( physicalDeviceVideoEncodeAV1FeaturesKHR.videoEncodeAV1 == VK_FALSE )
			failMesages.push_back("videoEncodeAV1");
	}

	// VkPhysicalDeviceVideoDecodeVP9FeaturesKHR
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_video_decode_vp9")) )
	{
		if ( physicalDeviceVideoDecodeVP9FeaturesKHR.videoDecodeVP9 == VK_FALSE )
			failMesages.push_back("videoDecodeVP9");
	}

	// VkPhysicalDeviceVideoMaintenance1FeaturesKHR
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_video_maintenance1")) )
	{
		if ( physicalDeviceVideoMaintenance1FeaturesKHR.videoMaintenance1 == VK_FALSE )
			failMesages.push_back("videoMaintenance1");
	}

	// VkPhysicalDeviceVertexAttributeDivisorFeaturesKHR
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_vertex_attribute_divisor")) )
	{
		if ( physicalDeviceVertexAttributeDivisorFeatures.vertexAttributeInstanceRateDivisor == VK_FALSE )
			failMesages.push_back("vertexAttributeInstanceRateDivisor");
	}

	// VkPhysicalDeviceUnifiedImageLayoutsFeaturesKHR
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_unified_image_layouts")) )
	{
		if ( physicalDeviceUnifiedImageLayoutsFeaturesKHR.unifiedImageLayouts == VK_FALSE )
			failMesages.push_back("unifiedImageLayouts");
	}

	// VkPhysicalDeviceShaderFloatControls2FeaturesKHR
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_shader_float_controls2")) )
	{
		if ( physicalDeviceShaderFloatControls2Features.shaderFloatControls2 == VK_FALSE )
			failMesages.push_back("shaderFloatControls2");
	}

	// VkPhysicalDeviceIndexTypeUint8FeaturesKHR
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_index_type_uint8")) )
	{
		if ( physicalDeviceIndexTypeUint8Features.indexTypeUint8 == VK_FALSE )
			failMesages.push_back("indexTypeUint8");
	}

	// VkPhysicalDeviceLineRasterizationFeaturesKHR
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_line_rasterization")) )
	{
		if ( (physicalDeviceLineRasterizationFeatures.rectangularLines == VK_FALSE) && (physicalDeviceLineRasterizationFeatures.bresenhamLines == VK_FALSE) && (physicalDeviceLineRasterizationFeatures.smoothLines == VK_FALSE) && (physicalDeviceLineRasterizationFeatures.stippledRectangularLines == VK_FALSE) && (physicalDeviceLineRasterizationFeatures.stippledBresenhamLines == VK_FALSE) && (physicalDeviceLineRasterizationFeatures.stippledSmoothLines == VK_FALSE) )
			failMesages.push_back("rectangularLines or bresenhamLines or smoothLines or stippledRectangularLines or stippledBresenhamLines or stippledSmoothLines");
	}

	// VkPhysicalDeviceShaderExpectAssumeFeaturesKHR
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_shader_expect_assume")) )
	{
		if ( physicalDeviceShaderExpectAssumeFeatures.shaderExpectAssume == VK_FALSE )
			failMesages.push_back("shaderExpectAssume");
	}

	// VkPhysicalDeviceMaintenance6FeaturesKHR
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_maintenance6")) )
	{
		if ( physicalDeviceMaintenance6Features.maintenance6 == VK_FALSE )
			failMesages.push_back("maintenance6");
	}

	// VkPhysicalDeviceVideoEncodeIntraRefreshFeaturesKHR
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_video_encode_intra_refresh")) )
	{
		if ( physicalDeviceVideoEncodeIntraRefreshFeaturesKHR.videoEncodeIntraRefresh == VK_FALSE )
			failMesages.push_back("videoEncodeIntraRefresh");
	}

	// VkPhysicalDeviceVideoEncodeQuantizationMapFeaturesKHR
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_video_encode_quantization_map")) )
	{
		if ( physicalDeviceVideoEncodeQuantizationMapFeaturesKHR.videoEncodeQuantizationMap == VK_FALSE )
			failMesages.push_back("videoEncodeQuantizationMap");
	}

	// VkPhysicalDeviceShaderRelaxedExtendedInstructionFeaturesKHR
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_shader_relaxed_extended_instruction")) )
	{
		if ( physicalDeviceShaderRelaxedExtendedInstructionFeaturesKHR.shaderRelaxedExtendedInstruction == VK_FALSE )
			failMesages.push_back("shaderRelaxedExtendedInstruction");
	}

	// VkPhysicalDeviceMaintenance7FeaturesKHR
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_maintenance7")) )
	{
		if ( physicalDeviceMaintenance7FeaturesKHR.maintenance7 == VK_FALSE )
			failMesages.push_back("maintenance7");
	}

	// VkPhysicalDeviceMaintenance8FeaturesKHR
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_maintenance8")) )
	{
		if ( physicalDeviceMaintenance8FeaturesKHR.maintenance8 == VK_FALSE )
			failMesages.push_back("maintenance8");
	}

	// VkPhysicalDeviceMaintenance9FeaturesKHR
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_maintenance9")) )
	{
		if ( physicalDeviceMaintenance9FeaturesKHR.maintenance9 == VK_FALSE )
			failMesages.push_back("maintenance9");
	}

	// VkPhysicalDeviceVideoMaintenance2FeaturesKHR
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_video_maintenance2")) )
	{
		if ( physicalDeviceVideoMaintenance2FeaturesKHR.videoMaintenance2 == VK_FALSE )
			failMesages.push_back("videoMaintenance2");
	}

	// VkPhysicalDeviceDepthClampZeroOneFeaturesKHR
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_depth_clamp_zero_one")) )
	{
		if ( physicalDeviceDepthClampZeroOneFeaturesKHR.depthClampZeroOne == VK_FALSE )
			failMesages.push_back("depthClampZeroOne");
	}

	// VkPhysicalDeviceRobustness2FeaturesKHR
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_robustness2")) )
	{
		if ( (physicalDeviceRobustness2FeaturesKHR.robustBufferAccess2 == VK_FALSE) && (physicalDeviceRobustness2FeaturesKHR.robustImageAccess2 == VK_FALSE) && (physicalDeviceRobustness2FeaturesKHR.nullDescriptor == VK_FALSE) )
			failMesages.push_back("robustBufferAccess2 or robustImageAccess2 or nullDescriptor");
	}

	// VkPhysicalDevicePresentModeFifoLatestReadyFeaturesKHR
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_present_mode_fifo_latest_ready")) )
	{
		if ( physicalDevicePresentModeFifoLatestReadyFeaturesKHR.presentModeFifoLatestReady == VK_FALSE )
			failMesages.push_back("presentModeFifoLatestReady");
	}

	// VkPhysicalDeviceTransformFeedbackFeaturesEXT
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_transform_feedback")) )
	{
		if ( physicalDeviceTransformFeedbackFeaturesEXT.transformFeedback == VK_FALSE )
			failMesages.push_back("transformFeedback");
	}

	// VkPhysicalDeviceCornerSampledImageFeaturesNV
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_NV_corner_sampled_image")) )
	{
		if ( physicalDeviceCornerSampledImageFeaturesNV.cornerSampledImage == VK_FALSE )
			failMesages.push_back("cornerSampledImage");
	}

	// VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_texture_compression_astc_hdr")) )
	{
		if ( physicalDeviceTextureCompressionASTCHDRFeatures.textureCompressionASTC_HDR == VK_FALSE )
			failMesages.push_back("textureCompressionASTC_HDR");
	}

	// VkPhysicalDevicePipelineRobustnessFeaturesEXT
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_pipeline_robustness")) )
	{
		if ( physicalDevicePipelineRobustnessFeatures.pipelineRobustness == VK_FALSE )
			failMesages.push_back("pipelineRobustness");
	}

	// VkPhysicalDeviceConditionalRenderingFeaturesEXT
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_conditional_rendering")) )
	{
		if ( physicalDeviceConditionalRenderingFeaturesEXT.conditionalRendering == VK_FALSE )
			failMesages.push_back("conditionalRendering");
	}

	// VkPhysicalDeviceDepthClipEnableFeaturesEXT
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_depth_clip_enable")) )
	{
		if ( physicalDeviceDepthClipEnableFeaturesEXT.depthClipEnable == VK_FALSE )
			failMesages.push_back("depthClipEnable");
	}

	// VkPhysicalDeviceRelaxedLineRasterizationFeaturesIMG
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_IMG_relaxed_line_rasterization")) )
	{
		if ( physicalDeviceRelaxedLineRasterizationFeaturesIMG.relaxedLineRasterization == VK_FALSE )
			failMesages.push_back("relaxedLineRasterization");
	}

	// VkPhysicalDeviceShaderEnqueueFeaturesAMDX
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_AMDX_shader_enqueue")) )
	{
		if ( physicalDeviceShaderEnqueueFeaturesAMDX.shaderEnqueue == VK_FALSE )
			failMesages.push_back("shaderEnqueue");
	}

	// VkPhysicalDeviceShaderEnqueueFeaturesAMDX
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_AMDX_shader_enqueue")) && isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_mesh_shader")) )
	{
		if ( physicalDeviceShaderEnqueueFeaturesAMDX.shaderMeshEnqueue == VK_FALSE )
			failMesages.push_back("shaderMeshEnqueue");
	}

	// VkPhysicalDeviceInlineUniformBlockFeaturesEXT
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_inline_uniform_block")) )
	{
		if ( physicalDeviceInlineUniformBlockFeatures.inlineUniformBlock == VK_FALSE )
			failMesages.push_back("inlineUniformBlock");
	}

	// VkPhysicalDeviceInlineUniformBlockFeatures
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_inline_uniform_block")) && isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_descriptor_indexing")) )
	{
		if ( physicalDeviceInlineUniformBlockFeatures.descriptorBindingInlineUniformBlockUpdateAfterBind == VK_FALSE )
			failMesages.push_back("descriptorBindingInlineUniformBlockUpdateAfterBind");
	}

	// VkPhysicalDeviceInlineUniformBlockFeatures
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_inline_uniform_block")) && context.contextSupports(vk::ApiVersion(0, 1, 2, 0)) && physicalDeviceVulkan12Features.descriptorIndexing )
	{
		if ( physicalDeviceInlineUniformBlockFeatures.descriptorBindingInlineUniformBlockUpdateAfterBind == VK_FALSE )
			failMesages.push_back("descriptorBindingInlineUniformBlockUpdateAfterBind");
	}

	// VkPhysicalDeviceShaderSMBuiltinsFeaturesNV
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_NV_shader_sm_builtins")) )
	{
		if ( physicalDeviceShaderSMBuiltinsFeaturesNV.shaderSMBuiltins == VK_FALSE )
			failMesages.push_back("shaderSMBuiltins");
	}

	// VkPhysicalDeviceFeatures
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_descriptor_indexing")) )
	{
		if ( coreFeatures.features.shaderSampledImageArrayDynamicIndexing == VK_FALSE )
			failMesages.push_back("shaderSampledImageArrayDynamicIndexing");
	}

	// VkPhysicalDeviceFeatures
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_descriptor_indexing")) )
	{
		if ( coreFeatures.features.shaderStorageBufferArrayDynamicIndexing == VK_FALSE )
			failMesages.push_back("shaderStorageBufferArrayDynamicIndexing");
	}

	// VkPhysicalDeviceDescriptorIndexingFeaturesEXT
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_descriptor_indexing")) )
	{
		if ( physicalDeviceDescriptorIndexingFeatures.shaderUniformTexelBufferArrayDynamicIndexing == VK_FALSE )
			failMesages.push_back("shaderUniformTexelBufferArrayDynamicIndexing");
	}

	// VkPhysicalDeviceDescriptorIndexingFeaturesEXT
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_descriptor_indexing")) )
	{
		if ( physicalDeviceDescriptorIndexingFeatures.shaderStorageTexelBufferArrayDynamicIndexing == VK_FALSE )
			failMesages.push_back("shaderStorageTexelBufferArrayDynamicIndexing");
	}

	// VkPhysicalDeviceDescriptorIndexingFeaturesEXT
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_descriptor_indexing")) )
	{
		if ( physicalDeviceDescriptorIndexingFeatures.shaderSampledImageArrayNonUniformIndexing == VK_FALSE )
			failMesages.push_back("shaderSampledImageArrayNonUniformIndexing");
	}

	// VkPhysicalDeviceDescriptorIndexingFeaturesEXT
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_descriptor_indexing")) )
	{
		if ( physicalDeviceDescriptorIndexingFeatures.shaderStorageBufferArrayNonUniformIndexing == VK_FALSE )
			failMesages.push_back("shaderStorageBufferArrayNonUniformIndexing");
	}

	// VkPhysicalDeviceDescriptorIndexingFeaturesEXT
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_descriptor_indexing")) )
	{
		if ( physicalDeviceDescriptorIndexingFeatures.shaderUniformTexelBufferArrayNonUniformIndexing == VK_FALSE )
			failMesages.push_back("shaderUniformTexelBufferArrayNonUniformIndexing");
	}

	// VkPhysicalDeviceDescriptorIndexingFeaturesEXT
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_descriptor_indexing")) )
	{
		if ( physicalDeviceDescriptorIndexingFeatures.descriptorBindingSampledImageUpdateAfterBind == VK_FALSE )
			failMesages.push_back("descriptorBindingSampledImageUpdateAfterBind");
	}

	// VkPhysicalDeviceDescriptorIndexingFeaturesEXT
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_descriptor_indexing")) )
	{
		if ( physicalDeviceDescriptorIndexingFeatures.descriptorBindingStorageImageUpdateAfterBind == VK_FALSE )
			failMesages.push_back("descriptorBindingStorageImageUpdateAfterBind");
	}

	// VkPhysicalDeviceDescriptorIndexingFeaturesEXT
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_descriptor_indexing")) )
	{
		if ( physicalDeviceDescriptorIndexingFeatures.descriptorBindingStorageBufferUpdateAfterBind == VK_FALSE )
			failMesages.push_back("descriptorBindingStorageBufferUpdateAfterBind");
	}

	// VkPhysicalDeviceDescriptorIndexingFeaturesEXT
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_descriptor_indexing")) )
	{
		if ( physicalDeviceDescriptorIndexingFeatures.descriptorBindingUniformTexelBufferUpdateAfterBind == VK_FALSE )
			failMesages.push_back("descriptorBindingUniformTexelBufferUpdateAfterBind");
	}

	// VkPhysicalDeviceDescriptorIndexingFeaturesEXT
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_descriptor_indexing")) )
	{
		if ( physicalDeviceDescriptorIndexingFeatures.descriptorBindingStorageTexelBufferUpdateAfterBind == VK_FALSE )
			failMesages.push_back("descriptorBindingStorageTexelBufferUpdateAfterBind");
	}

	// VkPhysicalDeviceDescriptorIndexingFeaturesEXT
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_descriptor_indexing")) )
	{
		if ( physicalDeviceDescriptorIndexingFeatures.descriptorBindingUpdateUnusedWhilePending == VK_FALSE )
			failMesages.push_back("descriptorBindingUpdateUnusedWhilePending");
	}

	// VkPhysicalDeviceDescriptorIndexingFeaturesEXT
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_descriptor_indexing")) )
	{
		if ( physicalDeviceDescriptorIndexingFeatures.descriptorBindingPartiallyBound == VK_FALSE )
			failMesages.push_back("descriptorBindingPartiallyBound");
	}

	// VkPhysicalDeviceDescriptorIndexingFeaturesEXT
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_descriptor_indexing")) )
	{
		if ( physicalDeviceDescriptorIndexingFeatures.runtimeDescriptorArray == VK_FALSE )
			failMesages.push_back("runtimeDescriptorArray");
	}

	// VkPhysicalDeviceShadingRateImageFeaturesNV
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_NV_shading_rate_image")) )
	{
		if ( physicalDeviceShadingRateImageFeaturesNV.shadingRateImage == VK_FALSE )
			failMesages.push_back("shadingRateImage");
	}

	// VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_NV_representative_fragment_test")) )
	{
		if ( physicalDeviceRepresentativeFragmentTestFeaturesNV.representativeFragmentTest == VK_FALSE )
			failMesages.push_back("representativeFragmentTest");
	}

	// VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_vertex_attribute_divisor")) )
	{
		if ( physicalDeviceVertexAttributeDivisorFeatures.vertexAttributeInstanceRateDivisor == VK_FALSE )
			failMesages.push_back("vertexAttributeInstanceRateDivisor");
	}

	// VkPhysicalDeviceComputeShaderDerivativesFeaturesNV
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_NV_compute_shader_derivatives")) )
	{
		if ( (physicalDeviceComputeShaderDerivativesFeaturesKHR.computeDerivativeGroupQuads == VK_FALSE) && (physicalDeviceComputeShaderDerivativesFeaturesKHR.computeDerivativeGroupLinear == VK_FALSE) )
			failMesages.push_back("computeDerivativeGroupQuads or computeDerivativeGroupLinear");
	}

	// VkPhysicalDeviceMeshShaderFeaturesNV
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_NV_mesh_shader")) )
	{
		if ( physicalDeviceMeshShaderFeaturesNV.meshShader == VK_FALSE )
			failMesages.push_back("meshShader");
	}

	// VkPhysicalDeviceShaderImageFootprintFeaturesNV
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_NV_shader_image_footprint")) )
	{
		if ( physicalDeviceShaderImageFootprintFeaturesNV.imageFootprint == VK_FALSE )
			failMesages.push_back("imageFootprint");
	}

	// VkPhysicalDeviceExclusiveScissorFeaturesNV
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_NV_scissor_exclusive")) )
	{
		if ( physicalDeviceExclusiveScissorFeaturesNV.exclusiveScissor == VK_FALSE )
			failMesages.push_back("exclusiveScissor");
	}

	// VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_INTEL_shader_integer_functions2")) )
	{
		if ( physicalDeviceShaderIntegerFunctions2FeaturesINTEL.shaderIntegerFunctions2 == VK_FALSE )
			failMesages.push_back("shaderIntegerFunctions2");
	}

	// VkPhysicalDeviceFragmentDensityMapFeaturesEXT
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_fragment_density_map")) )
	{
		if ( physicalDeviceFragmentDensityMapFeaturesEXT.fragmentDensityMap == VK_FALSE )
			failMesages.push_back("fragmentDensityMap");
	}

	// VkPhysicalDeviceScalarBlockLayoutFeaturesEXT
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_scalar_block_layout")) )
	{
		if ( physicalDeviceScalarBlockLayoutFeatures.scalarBlockLayout == VK_FALSE )
			failMesages.push_back("scalarBlockLayout");
	}

	// VkPhysicalDeviceSubgroupSizeControlFeatures
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_subgroup_size_control")) )
	{
		if ( physicalDeviceSubgroupSizeControlFeatures.subgroupSizeControl == VK_FALSE )
			failMesages.push_back("subgroupSizeControl");
	}

	// VkPhysicalDeviceSubgroupSizeControlFeatures
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_subgroup_size_control")) )
	{
		if ( physicalDeviceSubgroupSizeControlFeatures.computeFullSubgroups == VK_FALSE )
			failMesages.push_back("computeFullSubgroups");
	}

	// VkPhysicalDeviceCoherentMemoryFeaturesAMD
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_AMD_device_coherent_memory")) )
	{
		if ( physicalDeviceCoherentMemoryFeaturesAMD.deviceCoherentMemory == VK_FALSE )
			failMesages.push_back("deviceCoherentMemory");
	}

	// VkPhysicalDeviceFeatures
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_shader_image_atomic_int64")) )
	{
		if ( coreFeatures.features.shaderInt64 == VK_FALSE )
			failMesages.push_back("shaderInt64");
	}

	// VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_shader_image_atomic_int64")) )
	{
		if ( physicalDeviceShaderImageAtomicInt64FeaturesEXT.shaderImageInt64Atomics == VK_FALSE )
			failMesages.push_back("shaderImageInt64Atomics");
	}

	// VkPhysicalDeviceMemoryPriorityFeaturesEXT
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_memory_priority")) )
	{
		if ( physicalDeviceMemoryPriorityFeaturesEXT.memoryPriority == VK_FALSE )
			failMesages.push_back("memoryPriority");
	}

	// VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_NV_dedicated_allocation_image_aliasing")) )
	{
		if ( physicalDeviceDedicatedAllocationImageAliasingFeaturesNV.dedicatedAllocationImageAliasing == VK_FALSE )
			failMesages.push_back("dedicatedAllocationImageAliasing");
	}

	// VkPhysicalDeviceBufferDeviceAddressFeaturesEXT
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_buffer_device_address")) )
	{
		if ( physicalDeviceBufferDeviceAddressFeaturesEXT.bufferDeviceAddress == VK_FALSE )
			failMesages.push_back("bufferDeviceAddress");
	}

	// VkPhysicalDeviceCooperativeMatrixFeaturesNV
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_NV_cooperative_matrix")) )
	{
		if ( physicalDeviceCooperativeMatrixFeaturesNV.cooperativeMatrix == VK_FALSE )
			failMesages.push_back("cooperativeMatrix");
	}

	// VkPhysicalDeviceCoverageReductionModeFeaturesNV
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_NV_coverage_reduction_mode")) )
	{
		if ( physicalDeviceCoverageReductionModeFeaturesNV.coverageReductionMode == VK_FALSE )
			failMesages.push_back("coverageReductionMode");
	}

	// VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_fragment_shader_interlock")) )
	{
		if ( (physicalDeviceFragmentShaderInterlockFeaturesEXT.fragmentShaderSampleInterlock == VK_FALSE) && (physicalDeviceFragmentShaderInterlockFeaturesEXT.fragmentShaderPixelInterlock == VK_FALSE) && (physicalDeviceFragmentShaderInterlockFeaturesEXT.fragmentShaderShadingRateInterlock == VK_FALSE) )
			failMesages.push_back("fragmentShaderSampleInterlock or fragmentShaderPixelInterlock or fragmentShaderShadingRateInterlock");
	}

	// VkPhysicalDeviceYcbcrImageArraysFeaturesEXT
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_ycbcr_image_arrays")) )
	{
		if ( physicalDeviceYcbcrImageArraysFeaturesEXT.ycbcrImageArrays == VK_FALSE )
			failMesages.push_back("ycbcrImageArrays");
	}

	// VkPhysicalDeviceProvokingVertexFeaturesEXT
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_provoking_vertex")) )
	{
		if ( physicalDeviceProvokingVertexFeaturesEXT.provokingVertexLast == VK_FALSE )
			failMesages.push_back("provokingVertexLast");
	}

	// VkPhysicalDeviceLineRasterizationFeaturesEXT
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_line_rasterization")) )
	{
		if ( (physicalDeviceLineRasterizationFeatures.rectangularLines == VK_FALSE) && (physicalDeviceLineRasterizationFeatures.bresenhamLines == VK_FALSE) && (physicalDeviceLineRasterizationFeatures.smoothLines == VK_FALSE) && (physicalDeviceLineRasterizationFeatures.stippledRectangularLines == VK_FALSE) && (physicalDeviceLineRasterizationFeatures.stippledBresenhamLines == VK_FALSE) && (physicalDeviceLineRasterizationFeatures.stippledSmoothLines == VK_FALSE) )
			failMesages.push_back("rectangularLines or bresenhamLines or smoothLines or stippledRectangularLines or stippledBresenhamLines or stippledSmoothLines");
	}

	// VkPhysicalDeviceShaderAtomicFloatFeaturesEXT
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_shader_atomic_float")) )
	{
		if ( (physicalDeviceShaderAtomicFloatFeaturesEXT.shaderBufferFloat32Atomics == VK_FALSE) && (physicalDeviceShaderAtomicFloatFeaturesEXT.shaderBufferFloat32AtomicAdd == VK_FALSE) && (physicalDeviceShaderAtomicFloatFeaturesEXT.shaderBufferFloat64Atomics == VK_FALSE) && (physicalDeviceShaderAtomicFloatFeaturesEXT.shaderBufferFloat64AtomicAdd == VK_FALSE) && (physicalDeviceShaderAtomicFloatFeaturesEXT.shaderSharedFloat32Atomics == VK_FALSE) && (physicalDeviceShaderAtomicFloatFeaturesEXT.shaderSharedFloat32AtomicAdd == VK_FALSE) && (physicalDeviceShaderAtomicFloatFeaturesEXT.shaderSharedFloat64Atomics == VK_FALSE) && (physicalDeviceShaderAtomicFloatFeaturesEXT.shaderSharedFloat64AtomicAdd == VK_FALSE) && (physicalDeviceShaderAtomicFloatFeaturesEXT.shaderImageFloat32Atomics == VK_FALSE) && (physicalDeviceShaderAtomicFloatFeaturesEXT.shaderImageFloat32AtomicAdd == VK_FALSE) )
			failMesages.push_back("shaderBufferFloat32Atomics or shaderBufferFloat32AtomicAdd or shaderBufferFloat64Atomics or shaderBufferFloat64AtomicAdd or shaderSharedFloat32Atomics or shaderSharedFloat32AtomicAdd or shaderSharedFloat64Atomics or shaderSharedFloat64AtomicAdd or shaderImageFloat32Atomics or shaderImageFloat32AtomicAdd");
	}

	// VkPhysicalDeviceShaderAtomicFloatFeaturesEXT
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_shader_atomic_float")) && physicalDeviceShaderAtomicFloatFeaturesEXT.sparseImageFloat32Atomics )
	{
		if ( physicalDeviceShaderAtomicFloatFeaturesEXT.shaderImageFloat32Atomics == VK_FALSE )
			failMesages.push_back("shaderImageFloat32Atomics");
	}

	// VkPhysicalDeviceShaderAtomicFloatFeaturesEXT
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_shader_atomic_float")) && physicalDeviceShaderAtomicFloatFeaturesEXT.sparseImageFloat32AtomicAdd )
	{
		if ( physicalDeviceShaderAtomicFloatFeaturesEXT.shaderImageFloat32AtomicAdd == VK_FALSE )
			failMesages.push_back("shaderImageFloat32AtomicAdd");
	}

	// VkPhysicalDeviceHostQueryResetFeaturesEXT
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_host_query_reset")) )
	{
		if ( physicalDeviceHostQueryResetFeatures.hostQueryReset == VK_FALSE )
			failMesages.push_back("hostQueryReset");
	}

	// VkPhysicalDeviceIndexTypeUint8FeaturesEXT
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_index_type_uint8")) )
	{
		if ( physicalDeviceIndexTypeUint8Features.indexTypeUint8 == VK_FALSE )
			failMesages.push_back("indexTypeUint8");
	}

	// VkPhysicalDeviceExtendedDynamicStateFeaturesEXT
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_extended_dynamic_state")) )
	{
		if ( physicalDeviceExtendedDynamicStateFeaturesEXT.extendedDynamicState == VK_FALSE )
			failMesages.push_back("extendedDynamicState");
	}

	// VkPhysicalDeviceHostImageCopyFeaturesEXT
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_host_image_copy")) )
	{
		if ( physicalDeviceHostImageCopyFeatures.hostImageCopy == VK_FALSE )
			failMesages.push_back("hostImageCopy");
	}

	// VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_shader_atomic_float2")) )
	{
		if ( (physicalDeviceShaderAtomicFloat2FeaturesEXT.shaderBufferFloat16Atomics == VK_FALSE) && (physicalDeviceShaderAtomicFloat2FeaturesEXT.shaderBufferFloat16AtomicAdd == VK_FALSE) && (physicalDeviceShaderAtomicFloat2FeaturesEXT.shaderBufferFloat16AtomicMinMax == VK_FALSE) && (physicalDeviceShaderAtomicFloat2FeaturesEXT.shaderBufferFloat32AtomicMinMax == VK_FALSE) && (physicalDeviceShaderAtomicFloat2FeaturesEXT.shaderBufferFloat64AtomicMinMax == VK_FALSE) && (physicalDeviceShaderAtomicFloat2FeaturesEXT.shaderSharedFloat16Atomics == VK_FALSE) && (physicalDeviceShaderAtomicFloat2FeaturesEXT.shaderSharedFloat16AtomicAdd == VK_FALSE) && (physicalDeviceShaderAtomicFloat2FeaturesEXT.shaderSharedFloat16AtomicMinMax == VK_FALSE) && (physicalDeviceShaderAtomicFloat2FeaturesEXT.shaderSharedFloat32AtomicMinMax == VK_FALSE) && (physicalDeviceShaderAtomicFloat2FeaturesEXT.shaderSharedFloat64AtomicMinMax == VK_FALSE) && (physicalDeviceShaderAtomicFloat2FeaturesEXT.shaderImageFloat32AtomicMinMax == VK_FALSE) )
			failMesages.push_back("shaderBufferFloat16Atomics or shaderBufferFloat16AtomicAdd or shaderBufferFloat16AtomicMinMax or shaderBufferFloat32AtomicMinMax or shaderBufferFloat64AtomicMinMax or shaderSharedFloat16Atomics or shaderSharedFloat16AtomicAdd or shaderSharedFloat16AtomicMinMax or shaderSharedFloat32AtomicMinMax or shaderSharedFloat64AtomicMinMax or shaderImageFloat32AtomicMinMax");
	}

	// VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_shader_atomic_float2")) && physicalDeviceShaderAtomicFloat2FeaturesEXT.sparseImageFloat32AtomicMinMax )
	{
		if ( physicalDeviceShaderAtomicFloat2FeaturesEXT.shaderImageFloat32AtomicMinMax == VK_FALSE )
			failMesages.push_back("shaderImageFloat32AtomicMinMax");
	}

	// VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_swapchain_maintenance1")) )
	{
		if ( physicalDeviceSwapchainMaintenance1FeaturesKHR.swapchainMaintenance1 == VK_FALSE )
			failMesages.push_back("swapchainMaintenance1");
	}

	// VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_shader_demote_to_helper_invocation")) )
	{
		if ( physicalDeviceShaderDemoteToHelperInvocationFeatures.shaderDemoteToHelperInvocation == VK_FALSE )
			failMesages.push_back("shaderDemoteToHelperInvocation");
	}

	// VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_NV_device_generated_commands")) )
	{
		if ( physicalDeviceDeviceGeneratedCommandsFeaturesNV.deviceGeneratedCommands == VK_FALSE )
			failMesages.push_back("deviceGeneratedCommands");
	}

	// VkPhysicalDeviceInheritedViewportScissorFeaturesNV
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_NV_inherited_viewport_scissor")) )
	{
		if ( physicalDeviceInheritedViewportScissorFeaturesNV.inheritedViewportScissor2D == VK_FALSE )
			failMesages.push_back("inheritedViewportScissor2D");
	}

	// VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_texel_buffer_alignment")) )
	{
		if ( physicalDeviceTexelBufferAlignmentFeaturesEXT.texelBufferAlignment == VK_FALSE )
			failMesages.push_back("texelBufferAlignment");
	}

	// VkPhysicalDeviceDepthBiasControlFeaturesEXT
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_depth_bias_control")) )
	{
		if ( physicalDeviceDepthBiasControlFeaturesEXT.depthBiasControl == VK_FALSE )
			failMesages.push_back("depthBiasControl");
	}

	// VkPhysicalDeviceDeviceMemoryReportFeaturesEXT
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_device_memory_report")) )
	{
		if ( physicalDeviceDeviceMemoryReportFeaturesEXT.deviceMemoryReport == VK_FALSE )
			failMesages.push_back("deviceMemoryReport");
	}

	// VkPhysicalDeviceRobustness2FeaturesEXT
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_robustness2")) )
	{
		if ( (physicalDeviceRobustness2FeaturesKHR.robustBufferAccess2 == VK_FALSE) && (physicalDeviceRobustness2FeaturesKHR.robustImageAccess2 == VK_FALSE) && (physicalDeviceRobustness2FeaturesKHR.nullDescriptor == VK_FALSE) )
			failMesages.push_back("robustBufferAccess2 or robustImageAccess2 or nullDescriptor");
	}

	// VkPhysicalDeviceCustomBorderColorFeaturesEXT
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_custom_border_color")) )
	{
		if ( physicalDeviceCustomBorderColorFeaturesEXT.customBorderColors == VK_FALSE )
			failMesages.push_back("customBorderColors");
	}

	// VkPhysicalDevicePresentBarrierFeaturesNV
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_NV_present_barrier")) )
	{
		if ( physicalDevicePresentBarrierFeaturesNV.presentBarrier == VK_FALSE )
			failMesages.push_back("presentBarrier");
	}

	// VkPhysicalDevicePrivateDataFeaturesEXT
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_private_data")) )
	{
		if ( physicalDevicePrivateDataFeatures.privateData == VK_FALSE )
			failMesages.push_back("privateData");
	}

	// VkPhysicalDevicePipelineCreationCacheControlFeatures
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_pipeline_creation_cache_control")) )
	{
		if ( physicalDevicePipelineCreationCacheControlFeatures.pipelineCreationCacheControl == VK_FALSE )
			failMesages.push_back("pipelineCreationCacheControl");
	}

	// VkPhysicalDeviceDiagnosticsConfigFeaturesNV
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_NV_device_diagnostics_config")) )
	{
		if ( physicalDeviceDiagnosticsConfigFeaturesNV.diagnosticsConfig == VK_FALSE )
			failMesages.push_back("diagnosticsConfig");
	}

	// VkPhysicalDeviceCudaKernelLaunchFeaturesNV
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_NV_cuda_kernel_launch")) )
	{
		if ( physicalDeviceCudaKernelLaunchFeaturesNV.cudaKernelLaunchFeatures == VK_FALSE )
			failMesages.push_back("cudaKernelLaunchFeatures");
	}

	// VkPhysicalDeviceTileShadingFeaturesQCOM
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_QCOM_tile_shading")) )
	{
		if ( physicalDeviceTileShadingFeaturesQCOM.tileShading == VK_FALSE )
			failMesages.push_back("tileShading");
	}

	// VkPhysicalDeviceTileShadingFeaturesQCOM
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_QCOM_tile_shading")) )
	{
		if ( physicalDeviceTileShadingFeaturesQCOM.tileShadingFragmentStage == VK_FALSE )
			failMesages.push_back("tileShadingFragmentStage");
	}

	// VkPhysicalDeviceTileShadingFeaturesQCOM
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_QCOM_tile_shading")) )
	{
		if ( physicalDeviceTileShadingFeaturesQCOM.tileShadingPerTileDispatch == VK_FALSE )
			failMesages.push_back("tileShadingPerTileDispatch");
	}

	// VkPhysicalDeviceTileShadingFeaturesQCOM
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_QCOM_tile_shading")) )
	{
		if ( physicalDeviceTileShadingFeaturesQCOM.tileShadingAtomicOps == VK_FALSE )
			failMesages.push_back("tileShadingAtomicOps");
	}

	// VkPhysicalDeviceTileShadingFeaturesQCOM
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_QCOM_tile_shading")) )
	{
		if ( physicalDeviceTileShadingFeaturesQCOM.tileShadingColorAttachments == VK_FALSE )
			failMesages.push_back("tileShadingColorAttachments");
	}

	// VkPhysicalDeviceTileShadingFeaturesQCOM
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_QCOM_tile_shading")) )
	{
		if ( physicalDeviceTileShadingFeaturesQCOM.tileShadingPerTileDraw == VK_FALSE )
			failMesages.push_back("tileShadingPerTileDraw");
	}

	// VkPhysicalDeviceTileShadingFeaturesQCOM
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_QCOM_tile_shading")) )
	{
		if ( physicalDeviceTileShadingFeaturesQCOM.tileShadingDepthAttachments == VK_FALSE )
			failMesages.push_back("tileShadingDepthAttachments");
	}

	// VkPhysicalDeviceTileShadingFeaturesQCOM
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_QCOM_tile_shading")) )
	{
		if ( physicalDeviceTileShadingFeaturesQCOM.tileShadingStencilAttachments == VK_FALSE )
			failMesages.push_back("tileShadingStencilAttachments");
	}

	// VkPhysicalDeviceTileShadingFeaturesQCOM
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_QCOM_tile_shading")) )
	{
		if ( physicalDeviceTileShadingFeaturesQCOM.tileShadingInputAttachments == VK_FALSE )
			failMesages.push_back("tileShadingInputAttachments");
	}

	// VkPhysicalDeviceTileShadingFeaturesQCOM
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_QCOM_tile_shading")) )
	{
		if ( physicalDeviceTileShadingFeaturesQCOM.tileShadingSampledAttachments == VK_FALSE )
			failMesages.push_back("tileShadingSampledAttachments");
	}

	// VkPhysicalDeviceDescriptorBufferFeaturesEXT
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_descriptor_buffer")) )
	{
		if ( physicalDeviceDescriptorBufferFeaturesEXT.descriptorBuffer == VK_FALSE )
			failMesages.push_back("descriptorBuffer");
	}

	// VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_graphics_pipeline_library")) )
	{
		if ( physicalDeviceGraphicsPipelineLibraryFeaturesEXT.graphicsPipelineLibrary == VK_FALSE )
			failMesages.push_back("graphicsPipelineLibrary");
	}

	// VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_AMD_shader_early_and_late_fragment_tests")) )
	{
		if ( physicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD.shaderEarlyAndLateFragmentTests == VK_FALSE )
			failMesages.push_back("shaderEarlyAndLateFragmentTests");
	}

	// VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_NV_fragment_shading_rate_enums")) )
	{
		if ( physicalDeviceFragmentShadingRateEnumsFeaturesNV.fragmentShadingRateEnums == VK_FALSE )
			failMesages.push_back("fragmentShadingRateEnums");
	}

	// VkPhysicalDeviceRayTracingMotionBlurFeaturesNV
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_NV_ray_tracing_motion_blur")) )
	{
		if ( physicalDeviceRayTracingMotionBlurFeaturesNV.rayTracingMotionBlur == VK_FALSE )
			failMesages.push_back("rayTracingMotionBlur");
	}

	// VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_ycbcr_2plane_444_formats")) )
	{
		if ( physicalDeviceYcbcr2Plane444FormatsFeaturesEXT.ycbcr2plane444Formats == VK_FALSE )
			failMesages.push_back("ycbcr2plane444Formats");
	}

	// VkPhysicalDeviceFragmentDensityMap2FeaturesEXT
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_fragment_density_map2")) )
	{
		if ( physicalDeviceFragmentDensityMap2FeaturesEXT.fragmentDensityMapDeferred == VK_FALSE )
			failMesages.push_back("fragmentDensityMapDeferred");
	}

	// VkPhysicalDeviceImageRobustnessFeaturesEXT
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_image_robustness")) )
	{
		if ( physicalDeviceImageRobustnessFeatures.robustImageAccess == VK_FALSE )
			failMesages.push_back("robustImageAccess");
	}

	// VkPhysicalDeviceImageCompressionControlFeaturesEXT
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_image_compression_control")) )
	{
		if ( physicalDeviceImageCompressionControlFeaturesEXT.imageCompressionControl == VK_FALSE )
			failMesages.push_back("imageCompressionControl");
	}

	// VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_attachment_feedback_loop_layout")) )
	{
		if ( physicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT.attachmentFeedbackLoopLayout == VK_FALSE )
			failMesages.push_back("attachmentFeedbackLoopLayout");
	}

	// VkPhysicalDevice4444FormatsFeaturesEXT
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_4444_formats")) )
	{
		if ( physicalDevice4444FormatsFeaturesEXT.formatA4R4G4B4 == VK_FALSE )
			failMesages.push_back("formatA4R4G4B4");
	}

	// VkPhysicalDeviceFaultFeaturesEXT
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_device_fault")) )
	{
		if ( physicalDeviceFaultFeaturesEXT.deviceFault == VK_FALSE )
			failMesages.push_back("deviceFault");
	}

	// VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_rgba10x6_formats")) )
	{
		if ( physicalDeviceRGBA10X6FormatsFeaturesEXT.formatRgba10x6WithoutYCbCrSampler == VK_FALSE )
			failMesages.push_back("formatRgba10x6WithoutYCbCrSampler");
	}

	// VkPhysicalDeviceMutableDescriptorTypeFeaturesVALVE
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_VALVE_mutable_descriptor_type")) )
	{
		if ( physicalDeviceMutableDescriptorTypeFeaturesEXT.mutableDescriptorType == VK_FALSE )
			failMesages.push_back("mutableDescriptorType");
	}

	// VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_vertex_input_dynamic_state")) )
	{
		if ( physicalDeviceVertexInputDynamicStateFeaturesEXT.vertexInputDynamicState == VK_FALSE )
			failMesages.push_back("vertexInputDynamicState");
	}

	// VkPhysicalDeviceAddressBindingReportFeaturesEXT
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_device_address_binding_report")) )
	{
		if ( physicalDeviceAddressBindingReportFeaturesEXT.reportAddressBinding == VK_FALSE )
			failMesages.push_back("reportAddressBinding");
	}

	// VkPhysicalDeviceDepthClipControlFeaturesEXT
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_depth_clip_control")) )
	{
		if ( physicalDeviceDepthClipControlFeaturesEXT.depthClipControl == VK_FALSE )
			failMesages.push_back("depthClipControl");
	}

	// VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_primitive_topology_list_restart")) )
	{
		if ( physicalDevicePrimitiveTopologyListRestartFeaturesEXT.primitiveTopologyListRestart == VK_FALSE )
			failMesages.push_back("primitiveTopologyListRestart");
	}

	// VkPhysicalDevicePresentModeFifoLatestReadyFeaturesEXT
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_present_mode_fifo_latest_ready")) )
	{
		if ( physicalDevicePresentModeFifoLatestReadyFeaturesKHR.presentModeFifoLatestReady == VK_FALSE )
			failMesages.push_back("presentModeFifoLatestReady");
	}

	// VkPhysicalDeviceSubpassShadingFeaturesHUAWEI
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_HUAWEI_subpass_shading")) )
	{
		if ( physicalDeviceSubpassShadingFeaturesHUAWEI.subpassShading == VK_FALSE )
			failMesages.push_back("subpassShading");
	}

	// VkPhysicalDeviceInvocationMaskFeaturesHUAWEI
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_HUAWEI_invocation_mask")) )
	{
		if ( physicalDeviceInvocationMaskFeaturesHUAWEI.invocationMask == VK_FALSE )
			failMesages.push_back("invocationMask");
	}

	// VkPhysicalDeviceExternalMemoryRDMAFeaturesNV
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_NV_external_memory_rdma")) )
	{
		if ( physicalDeviceExternalMemoryRDMAFeaturesNV.externalMemoryRDMA == VK_FALSE )
			failMesages.push_back("externalMemoryRDMA");
	}

	// VkPhysicalDeviceFrameBoundaryFeaturesEXT
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_frame_boundary")) )
	{
		if ( physicalDeviceFrameBoundaryFeaturesEXT.frameBoundary == VK_FALSE )
			failMesages.push_back("frameBoundary");
	}

	// VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_multisampled_render_to_single_sampled")) )
	{
		if ( physicalDeviceMultisampledRenderToSingleSampledFeaturesEXT.multisampledRenderToSingleSampled == VK_FALSE )
			failMesages.push_back("multisampledRenderToSingleSampled");
	}

	// VkPhysicalDeviceExtendedDynamicState2FeaturesEXT
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_extended_dynamic_state2")) )
	{
		if ( physicalDeviceExtendedDynamicState2FeaturesEXT.extendedDynamicState2 == VK_FALSE )
			failMesages.push_back("extendedDynamicState2");
	}

	// VkPhysicalDeviceColorWriteEnableFeaturesEXT
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_color_write_enable")) )
	{
		if ( physicalDeviceColorWriteEnableFeaturesEXT.colorWriteEnable == VK_FALSE )
			failMesages.push_back("colorWriteEnable");
	}

	// VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_primitives_generated_query")) )
	{
		if ( physicalDevicePrimitivesGeneratedQueryFeaturesEXT.primitivesGeneratedQuery == VK_FALSE )
			failMesages.push_back("primitivesGeneratedQuery");
	}

	// VkPhysicalDeviceGlobalPriorityQueryFeaturesEXT
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_global_priority_query")) )
	{
		if ( physicalDeviceGlobalPriorityQueryFeatures.globalPriorityQuery == VK_FALSE )
			failMesages.push_back("globalPriorityQuery");
	}

	// VkPhysicalDeviceImageViewMinLodFeaturesEXT
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_image_view_min_lod")) )
	{
		if ( physicalDeviceImageViewMinLodFeaturesEXT.minLod == VK_FALSE )
			failMesages.push_back("minLod");
	}

	// VkPhysicalDeviceMultiDrawFeaturesEXT
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_multi_draw")) )
	{
		if ( physicalDeviceMultiDrawFeaturesEXT.multiDraw == VK_FALSE )
			failMesages.push_back("multiDraw");
	}

	// VkPhysicalDeviceImage2DViewOf3DFeaturesEXT
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_image_2d_view_of_3d")) )
	{
		if ( physicalDeviceImage2DViewOf3DFeaturesEXT.image2DViewOf3D == VK_FALSE )
			failMesages.push_back("image2DViewOf3D");
	}

	// VkPhysicalDeviceShaderTileImageFeaturesEXT
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_shader_tile_image")) )
	{
		if ( physicalDeviceShaderTileImageFeaturesEXT.shaderTileImageColorReadAccess == VK_FALSE )
			failMesages.push_back("shaderTileImageColorReadAccess");
	}

	// VkPhysicalDeviceOpacityMicromapFeaturesEXT
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_opacity_micromap")) )
	{
		if ( physicalDeviceOpacityMicromapFeaturesEXT.micromap == VK_FALSE )
			failMesages.push_back("micromap");
	}

	// VkPhysicalDeviceDisplacementMicromapFeaturesNV
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_NV_displacement_micromap")) )
	{
		if ( physicalDeviceDisplacementMicromapFeaturesNV.displacementMicromap == VK_FALSE )
			failMesages.push_back("displacementMicromap");
	}

	// VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_HUAWEI_cluster_culling_shader")) )
	{
		if ( physicalDeviceClusterCullingShaderFeaturesHUAWEI.clustercullingShader == VK_FALSE )
			failMesages.push_back("clustercullingShader");
	}

	// VkPhysicalDeviceBorderColorSwizzleFeaturesEXT
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_border_color_swizzle")) )
	{
		if ( physicalDeviceBorderColorSwizzleFeaturesEXT.borderColorSwizzle == VK_FALSE )
			failMesages.push_back("borderColorSwizzle");
	}

	// VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_pageable_device_local_memory")) )
	{
		if ( physicalDevicePageableDeviceLocalMemoryFeaturesEXT.pageableDeviceLocalMemory == VK_FALSE )
			failMesages.push_back("pageableDeviceLocalMemory");
	}

	// VkPhysicalDeviceSchedulingControlsFeaturesARM
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_ARM_scheduling_controls")) )
	{
		if ( physicalDeviceSchedulingControlsFeaturesARM.schedulingControls == VK_FALSE )
			failMesages.push_back("schedulingControls");
	}

	// VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_VALVE_descriptor_set_host_mapping")) )
	{
		if ( physicalDeviceDescriptorSetHostMappingFeaturesVALVE.descriptorSetHostMapping == VK_FALSE )
			failMesages.push_back("descriptorSetHostMapping");
	}

	// VkPhysicalDeviceDepthClampZeroOneFeaturesEXT
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_depth_clamp_zero_one")) )
	{
		if ( physicalDeviceDepthClampZeroOneFeaturesKHR.depthClampZeroOne == VK_FALSE )
			failMesages.push_back("depthClampZeroOne");
	}

	// VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_non_seamless_cube_map")) )
	{
		if ( physicalDeviceNonSeamlessCubeMapFeaturesEXT.nonSeamlessCubeMap == VK_FALSE )
			failMesages.push_back("nonSeamlessCubeMap");
	}

	// VkPhysicalDeviceRenderPassStripedFeaturesARM
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_ARM_render_pass_striped")) )
	{
		if ( physicalDeviceRenderPassStripedFeaturesARM.renderPassStriped == VK_FALSE )
			failMesages.push_back("renderPassStriped");
	}

	// VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_QCOM_fragment_density_map_offset")) )
	{
		if ( physicalDeviceFragmentDensityMapOffsetFeaturesEXT.fragmentDensityMapOffset == VK_FALSE )
			failMesages.push_back("fragmentDensityMapOffset");
	}

	// VkPhysicalDeviceCopyMemoryIndirectFeaturesNV
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_NV_copy_memory_indirect")) )
	{
		if ( physicalDeviceCopyMemoryIndirectFeaturesNV.indirectCopy == VK_FALSE )
			failMesages.push_back("indirectCopy");
	}

	// VkPhysicalDeviceMemoryDecompressionFeaturesNV
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_NV_memory_decompression")) )
	{
		if ( physicalDeviceMemoryDecompressionFeaturesNV.memoryDecompression == VK_FALSE )
			failMesages.push_back("memoryDecompression");
	}

	// VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_NV_device_generated_commands_compute")) )
	{
		if ( physicalDeviceDeviceGeneratedCommandsComputeFeaturesNV.deviceGeneratedCompute == VK_FALSE )
			failMesages.push_back("deviceGeneratedCompute");
	}

	// VkPhysicalDeviceRayTracingLinearSweptSpheresFeaturesNV
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_NV_ray_tracing_linear_swept_spheres")) )
	{
		if ( (physicalDeviceRayTracingLinearSweptSpheresFeaturesNV.spheres == VK_FALSE) && (physicalDeviceRayTracingLinearSweptSpheresFeaturesNV.linearSweptSpheres == VK_FALSE) )
			failMesages.push_back("spheres or linearSweptSpheres");
	}

	// VkPhysicalDeviceLinearColorAttachmentFeaturesNV
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_NV_linear_color_attachment")) )
	{
		if ( physicalDeviceLinearColorAttachmentFeaturesNV.linearColorAttachment == VK_FALSE )
			failMesages.push_back("linearColorAttachment");
	}

	// VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_image_compression_control_swapchain")) )
	{
		if ( physicalDeviceImageCompressionControlSwapchainFeaturesEXT.imageCompressionControlSwapchain == VK_FALSE )
			failMesages.push_back("imageCompressionControlSwapchain");
	}

	// VkPhysicalDeviceImageProcessingFeaturesQCOM
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_QCOM_image_processing")) )
	{
		if ( physicalDeviceImageProcessingFeaturesQCOM.textureSampleWeighted == VK_FALSE )
			failMesages.push_back("textureSampleWeighted");
	}

	// VkPhysicalDeviceImageProcessingFeaturesQCOM
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_QCOM_image_processing")) )
	{
		if ( physicalDeviceImageProcessingFeaturesQCOM.textureBlockMatch == VK_FALSE )
			failMesages.push_back("textureBlockMatch");
	}

	// VkPhysicalDeviceImageProcessingFeaturesQCOM
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_QCOM_image_processing")) )
	{
		if ( physicalDeviceImageProcessingFeaturesQCOM.textureBoxFilter == VK_FALSE )
			failMesages.push_back("textureBoxFilter");
	}

	// VkPhysicalDeviceNestedCommandBufferFeaturesEXT
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_nested_command_buffer")) )
	{
		if ( physicalDeviceNestedCommandBufferFeaturesEXT.nestedCommandBuffer == VK_FALSE )
			failMesages.push_back("nestedCommandBuffer");
	}

	// VkPhysicalDeviceFeatures
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_extended_dynamic_state3")) && physicalDeviceExtendedDynamicState3FeaturesEXT.extendedDynamicState3TessellationDomainOrigin )
	{
		if ( coreFeatures.features.tessellationShader == VK_FALSE )
			failMesages.push_back("tessellationShader");
	}

	// VkPhysicalDeviceFeatures
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_extended_dynamic_state3")) && physicalDeviceExtendedDynamicState3FeaturesEXT.extendedDynamicState3DepthClampEnable )
	{
		if ( coreFeatures.features.depthClamp == VK_FALSE )
			failMesages.push_back("depthClamp");
	}

	// VkPhysicalDeviceFeatures
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_extended_dynamic_state3")) && physicalDeviceExtendedDynamicState3FeaturesEXT.extendedDynamicState3PolygonMode )
	{
		if ( coreFeatures.features.fillModeNonSolid == VK_FALSE )
			failMesages.push_back("fillModeNonSolid");
	}

	// VkPhysicalDeviceFeatures
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_extended_dynamic_state3")) && physicalDeviceExtendedDynamicState3FeaturesEXT.extendedDynamicState3AlphaToOneEnable )
	{
		if ( coreFeatures.features.alphaToOne == VK_FALSE )
			failMesages.push_back("alphaToOne");
	}

	// VkPhysicalDeviceFeatures
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_extended_dynamic_state3")) && physicalDeviceExtendedDynamicState3FeaturesEXT.extendedDynamicState3LogicOpEnable )
	{
		if ( coreFeatures.features.logicOp == VK_FALSE )
			failMesages.push_back("logicOp");
	}

	// VkPhysicalDeviceTransformFeedbackFeaturesEXT
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_extended_dynamic_state3")) && isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_transform_feedback")) && physicalDeviceExtendedDynamicState3FeaturesEXT.extendedDynamicState3RasterizationStream )
	{
		if ( physicalDeviceTransformFeedbackFeaturesEXT.geometryStreams == VK_FALSE )
			failMesages.push_back("geometryStreams");
	}

	// VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_subpass_merge_feedback")) )
	{
		if ( physicalDeviceSubpassMergeFeedbackFeaturesEXT.subpassMergeFeedback == VK_FALSE )
			failMesages.push_back("subpassMergeFeedback");
	}

	// VkPhysicalDeviceTensorFeaturesARM
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_ARM_tensors")) )
	{
		if ( physicalDeviceTensorFeaturesARM.tensors == VK_FALSE )
			failMesages.push_back("tensors");
	}

	// VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_shader_module_identifier")) )
	{
		if ( physicalDeviceShaderModuleIdentifierFeaturesEXT.shaderModuleIdentifier == VK_FALSE )
			failMesages.push_back("shaderModuleIdentifier");
	}

	// VkPhysicalDeviceOpticalFlowFeaturesNV
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_NV_optical_flow")) )
	{
		if ( physicalDeviceOpticalFlowFeaturesNV.opticalFlow == VK_FALSE )
			failMesages.push_back("opticalFlow");
	}

	// VkPhysicalDeviceLegacyDitheringFeaturesEXT
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_legacy_dithering")) )
	{
		if ( physicalDeviceLegacyDitheringFeaturesEXT.legacyDithering == VK_FALSE )
			failMesages.push_back("legacyDithering");
	}

	// VkPhysicalDevicePipelineProtectedAccessFeaturesEXT
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_pipeline_protected_access")) )
	{
		if ( physicalDevicePipelineProtectedAccessFeatures.pipelineProtectedAccess == VK_FALSE )
			failMesages.push_back("pipelineProtectedAccess");
	}

	// VkPhysicalDeviceExternalFormatResolveFeaturesANDROID
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_ANDROID_external_format_resolve")) )
	{
		if ( physicalDeviceExternalFormatResolveFeaturesANDROID.externalFormatResolve == VK_FALSE )
			failMesages.push_back("externalFormatResolve");
	}

	// VkPhysicalDeviceAntiLagFeaturesAMD
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_AMD_anti_lag")) )
	{
		if ( physicalDeviceAntiLagFeaturesAMD.antiLag == VK_FALSE )
			failMesages.push_back("antiLag");
	}

	// VkPhysicalDeviceDenseGeometryFormatFeaturesAMDX
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_AMDX_dense_geometry_format")) )
	{
		if ( physicalDeviceDenseGeometryFormatFeaturesAMDX.denseGeometryFormat == VK_FALSE )
			failMesages.push_back("denseGeometryFormat");
	}

	// VkPhysicalDeviceShaderObjectFeaturesEXT
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_shader_object")) )
	{
		if ( physicalDeviceShaderObjectFeaturesEXT.shaderObject == VK_FALSE )
			failMesages.push_back("shaderObject");
	}

	// VkPhysicalDeviceTilePropertiesFeaturesQCOM
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_QCOM_tile_properties")) )
	{
		if ( physicalDeviceTilePropertiesFeaturesQCOM.tileProperties == VK_FALSE )
			failMesages.push_back("tileProperties");
	}

	// VkPhysicalDeviceAmigoProfilingFeaturesSEC
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_SEC_amigo_profiling")) )
	{
		if ( physicalDeviceAmigoProfilingFeaturesSEC.amigoProfiling == VK_FALSE )
			failMesages.push_back("amigoProfiling");
	}

	// VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_QCOM_multiview_per_view_viewports")) )
	{
		if ( physicalDeviceMultiviewPerViewViewportsFeaturesQCOM.multiviewPerViewViewports == VK_FALSE )
			failMesages.push_back("multiviewPerViewViewports");
	}

	// VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_NV_ray_tracing_invocation_reorder")) )
	{
		if ( physicalDeviceRayTracingInvocationReorderFeaturesNV.rayTracingInvocationReorder == VK_FALSE )
			failMesages.push_back("rayTracingInvocationReorder");
	}

	// VkPhysicalDeviceCooperativeVectorFeaturesNV
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_NV_cooperative_vector")) )
	{
		if ( physicalDeviceCooperativeVectorFeaturesNV.cooperativeVector == VK_FALSE )
			failMesages.push_back("cooperativeVector");
	}

	// VkPhysicalDeviceExtendedSparseAddressSpaceFeaturesNV
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_NV_extended_sparse_address_space")) )
	{
		if ( physicalDeviceExtendedSparseAddressSpaceFeaturesNV.extendedSparseAddressSpace == VK_FALSE )
			failMesages.push_back("extendedSparseAddressSpace");
	}

	// VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_mutable_descriptor_type")) )
	{
		if ( physicalDeviceMutableDescriptorTypeFeaturesEXT.mutableDescriptorType == VK_FALSE )
			failMesages.push_back("mutableDescriptorType");
	}

	// VkPhysicalDeviceLegacyVertexAttributesFeaturesEXT
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_legacy_vertex_attributes")) )
	{
		if ( physicalDeviceLegacyVertexAttributesFeaturesEXT.legacyVertexAttributes == VK_FALSE )
			failMesages.push_back("legacyVertexAttributes");
	}

	// VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_ARM_shader_core_builtins")) )
	{
		if ( physicalDeviceShaderCoreBuiltinsFeaturesARM.shaderCoreBuiltins == VK_FALSE )
			failMesages.push_back("shaderCoreBuiltins");
	}

	// VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_pipeline_library_group_handles")) )
	{
		if ( physicalDevicePipelineLibraryGroupHandlesFeaturesEXT.pipelineLibraryGroupHandles == VK_FALSE )
			failMesages.push_back("pipelineLibraryGroupHandles");
	}

	// VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_dynamic_rendering_unused_attachments")) )
	{
		if ( physicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT.dynamicRenderingUnusedAttachments == VK_FALSE )
			failMesages.push_back("dynamicRenderingUnusedAttachments");
	}

	// VkPhysicalDeviceDataGraphFeaturesARM
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_ARM_data_graph")) )
	{
		if ( physicalDeviceDataGraphFeaturesARM.dataGraph == VK_FALSE )
			failMesages.push_back("dataGraph");
	}

	// VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_QCOM_multiview_per_view_render_areas")) )
	{
		if ( physicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM.multiviewPerViewRenderAreas == VK_FALSE )
			failMesages.push_back("multiviewPerViewRenderAreas");
	}

	// VkPhysicalDevicePerStageDescriptorSetFeaturesNV
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_NV_per_stage_descriptor_set")) )
	{
		if ( physicalDevicePerStageDescriptorSetFeaturesNV.perStageDescriptorSet == VK_FALSE )
			failMesages.push_back("perStageDescriptorSet");
	}

	// VkPhysicalDeviceImageProcessing2FeaturesQCOM
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_QCOM_image_processing2")) )
	{
		if ( physicalDeviceImageProcessing2FeaturesQCOM.textureBlockMatch2 == VK_FALSE )
			failMesages.push_back("textureBlockMatch2");
	}

	// VkPhysicalDeviceCubicWeightsFeaturesQCOM
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_QCOM_filter_cubic_weights")) )
	{
		if ( physicalDeviceCubicWeightsFeaturesQCOM.selectableCubicWeights == VK_FALSE )
			failMesages.push_back("selectableCubicWeights");
	}

	// VkPhysicalDeviceYcbcrDegammaFeaturesQCOM
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_QCOM_ycbcr_degamma")) )
	{
		if ( physicalDeviceYcbcrDegammaFeaturesQCOM.ycbcrDegamma == VK_FALSE )
			failMesages.push_back("ycbcrDegamma");
	}

	// VkPhysicalDeviceCubicClampFeaturesQCOM
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_QCOM_filter_cubic_clamp")) )
	{
		if ( physicalDeviceCubicClampFeaturesQCOM.cubicRangeClamp == VK_FALSE )
			failMesages.push_back("cubicRangeClamp");
	}

	// VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_attachment_feedback_loop_dynamic_state")) )
	{
		if ( physicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT.attachmentFeedbackLoopDynamicState == VK_FALSE )
			failMesages.push_back("attachmentFeedbackLoopDynamicState");
	}

	// VkPhysicalDeviceExternalMemoryScreenBufferFeaturesQNX
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_QNX_external_memory_screen_buffer")) )
	{
		if ( physicalDeviceExternalMemoryScreenBufferFeaturesQNX.screenBufferImport == VK_FALSE )
			failMesages.push_back("screenBufferImport");
	}

	// VkPhysicalDeviceDescriptorPoolOverallocationFeaturesNV
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_NV_descriptor_pool_overallocation")) )
	{
		if ( physicalDeviceDescriptorPoolOverallocationFeaturesNV.descriptorPoolOverallocation == VK_FALSE )
			failMesages.push_back("descriptorPoolOverallocation");
	}

	// VkPhysicalDeviceTileMemoryHeapFeaturesQCOM
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_QCOM_tile_memory_heap")) )
	{
		if ( physicalDeviceTileMemoryHeapFeaturesQCOM.tileMemoryHeap == VK_FALSE )
			failMesages.push_back("tileMemoryHeap");
	}

	// VkPhysicalDeviceRawAccessChainsFeaturesNV
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_NV_raw_access_chains")) )
	{
		if ( physicalDeviceRawAccessChainsFeaturesNV.shaderRawAccessChains == VK_FALSE )
			failMesages.push_back("shaderRawAccessChains");
	}

	// VkPhysicalDeviceCommandBufferInheritanceFeaturesNV
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_NV_command_buffer_inheritance")) )
	{
		if ( physicalDeviceCommandBufferInheritanceFeaturesNV.commandBufferInheritance == VK_FALSE )
			failMesages.push_back("commandBufferInheritance");
	}

	// VkPhysicalDeviceShaderAtomicFloat16VectorFeaturesNV
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_NV_shader_atomic_float16_vector")) )
	{
		if ( physicalDeviceShaderAtomicFloat16VectorFeaturesNV.shaderFloat16VectorAtomics == VK_FALSE )
			failMesages.push_back("shaderFloat16VectorAtomics");
	}

	// VkPhysicalDeviceShaderFloat8FeaturesEXT
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_shader_float8")) )
	{
		if ( physicalDeviceShaderFloat8FeaturesEXT.shaderFloat8 == VK_FALSE )
			failMesages.push_back("shaderFloat8");
	}

	// VkPhysicalDeviceRayTracingValidationFeaturesNV
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_NV_ray_tracing_validation")) )
	{
		if ( physicalDeviceRayTracingValidationFeaturesNV.rayTracingValidation == VK_FALSE )
			failMesages.push_back("rayTracingValidation");
	}

	// VkPhysicalDeviceClusterAccelerationStructureFeaturesNV
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_NV_cluster_acceleration_structure")) )
	{
		if ( physicalDeviceClusterAccelerationStructureFeaturesNV.clusterAccelerationStructure == VK_FALSE )
			failMesages.push_back("clusterAccelerationStructure");
	}

	// VkPhysicalDevicePartitionedAccelerationStructureFeaturesNV
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_NV_partitioned_acceleration_structure")) )
	{
		if ( physicalDevicePartitionedAccelerationStructureFeaturesNV.partitionedAccelerationStructure == VK_FALSE )
			failMesages.push_back("partitionedAccelerationStructure");
	}

	// VkPhysicalDeviceDeviceGeneratedCommandsFeaturesEXT
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_device_generated_commands")) )
	{
		if ( physicalDeviceDeviceGeneratedCommandsFeaturesEXT.deviceGeneratedCommands == VK_FALSE )
			failMesages.push_back("deviceGeneratedCommands");
	}

	// VkPhysicalDeviceImageAlignmentControlFeaturesMESA
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_MESA_image_alignment_control")) )
	{
		if ( physicalDeviceImageAlignmentControlFeaturesMESA.imageAlignmentControl == VK_FALSE )
			failMesages.push_back("imageAlignmentControl");
	}

	// VkPhysicalDeviceDepthClampControlFeaturesEXT
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_depth_clamp_control")) )
	{
		if ( physicalDeviceDepthClampControlFeaturesEXT.depthClampControl == VK_FALSE )
			failMesages.push_back("depthClampControl");
	}

	// VkPhysicalDeviceHdrVividFeaturesHUAWEI
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_HUAWEI_hdr_vivid")) )
	{
		if ( physicalDeviceHdrVividFeaturesHUAWEI.hdrVivid == VK_FALSE )
			failMesages.push_back("hdrVivid");
	}

	// VkPhysicalDeviceCooperativeMatrix2FeaturesNV
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_NV_cooperative_matrix2")) )
	{
		if ( (physicalDeviceCooperativeMatrix2FeaturesNV.cooperativeMatrixWorkgroupScope == VK_FALSE) && (physicalDeviceCooperativeMatrix2FeaturesNV.cooperativeMatrixFlexibleDimensions == VK_FALSE) && (physicalDeviceCooperativeMatrix2FeaturesNV.cooperativeMatrixReductions == VK_FALSE) && (physicalDeviceCooperativeMatrix2FeaturesNV.cooperativeMatrixConversions == VK_FALSE) && (physicalDeviceCooperativeMatrix2FeaturesNV.cooperativeMatrixPerElementOperations == VK_FALSE) && (physicalDeviceCooperativeMatrix2FeaturesNV.cooperativeMatrixTensorAddressing == VK_FALSE) && (physicalDeviceCooperativeMatrix2FeaturesNV.cooperativeMatrixBlockLoads == VK_FALSE) )
			failMesages.push_back("cooperativeMatrixWorkgroupScope or cooperativeMatrixFlexibleDimensions or cooperativeMatrixReductions or cooperativeMatrixConversions or cooperativeMatrixPerElementOperations or cooperativeMatrixTensorAddressing or cooperativeMatrixBlockLoads");
	}

	// VkPhysicalDevicePipelineOpacityMicromapFeaturesARM
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_ARM_pipeline_opacity_micromap")) )
	{
		if ( physicalDevicePipelineOpacityMicromapFeaturesARM.pipelineOpacityMicromap == VK_FALSE )
			failMesages.push_back("pipelineOpacityMicromap");
	}

	// VkPhysicalDeviceFormatPackFeaturesARM
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_ARM_format_pack")) )
	{
		if ( physicalDeviceFormatPackFeaturesARM.formatPack == VK_FALSE )
			failMesages.push_back("formatPack");
	}

	// VkPhysicalDeviceFragmentDensityMapLayeredFeaturesVALVE
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_VALVE_fragment_density_map_layered")) )
	{
		if ( physicalDeviceFragmentDensityMapLayeredFeaturesVALVE.fragmentDensityMapLayered == VK_FALSE )
			failMesages.push_back("fragmentDensityMapLayered");
	}

	// VkPhysicalDevicePresentMeteringFeaturesNV
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_NV_present_metering")) )
	{
		if ( physicalDevicePresentMeteringFeaturesNV.presentMetering == VK_FALSE )
			failMesages.push_back("presentMetering");
	}

	// VkPhysicalDeviceFragmentDensityMapOffsetFeaturesEXT
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_fragment_density_map_offset")) )
	{
		if ( physicalDeviceFragmentDensityMapOffsetFeaturesEXT.fragmentDensityMapOffset == VK_FALSE )
			failMesages.push_back("fragmentDensityMapOffset");
	}

	// VkPhysicalDeviceZeroInitializeDeviceMemoryFeaturesEXT
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_zero_initialize_device_memory")) )
	{
		if ( physicalDeviceZeroInitializeDeviceMemoryFeaturesEXT.zeroInitializeDeviceMemory == VK_FALSE )
			failMesages.push_back("zeroInitializeDeviceMemory");
	}

	// VkPhysicalDevicePipelineCacheIncrementalModeFeaturesSEC
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_SEC_pipeline_cache_incremental_mode")) )
	{
		if ( physicalDevicePipelineCacheIncrementalModeFeaturesSEC.pipelineCacheIncrementalMode == VK_FALSE )
			failMesages.push_back("pipelineCacheIncrementalMode");
	}

	// VkPhysicalDeviceAccelerationStructureFeaturesKHR
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_acceleration_structure")) )
	{
		if ( physicalDeviceAccelerationStructureFeaturesKHR.accelerationStructure == VK_FALSE )
			failMesages.push_back("accelerationStructure");
	}

	// VkPhysicalDeviceBufferDeviceAddressFeatures
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_acceleration_structure")) )
	{
		if ( physicalDeviceBufferDeviceAddressFeatures.bufferDeviceAddress == VK_FALSE )
			failMesages.push_back("bufferDeviceAddress");
	}

	// VkPhysicalDeviceAccelerationStructureFeaturesKHR
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_acceleration_structure")) )
	{
		if ( physicalDeviceAccelerationStructureFeaturesKHR.descriptorBindingAccelerationStructureUpdateAfterBind == VK_FALSE )
			failMesages.push_back("descriptorBindingAccelerationStructureUpdateAfterBind");
	}

	// VkPhysicalDeviceVulkan12Features
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_acceleration_structure")) && context.contextSupports(vk::ApiVersion(0, 1, 2, 0)) )
	{
		if ( physicalDeviceVulkan12Features.descriptorIndexing == VK_FALSE )
			failMesages.push_back("descriptorIndexing");
	}

	// VkPhysicalDeviceRayTracingPipelineFeaturesKHR
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_ray_tracing_pipeline")) )
	{
		if ( physicalDeviceRayTracingPipelineFeaturesKHR.rayTracingPipeline == VK_FALSE )
			failMesages.push_back("rayTracingPipeline");
	}

	// VkPhysicalDeviceRayTracingPipelineFeaturesKHR
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_ray_tracing_pipeline")) )
	{
		if ( physicalDeviceRayTracingPipelineFeaturesKHR.rayTracingPipelineTraceRaysIndirect == VK_FALSE )
			failMesages.push_back("rayTracingPipelineTraceRaysIndirect");
	}

	// VkPhysicalDeviceRayTracingPipelineFeaturesKHR
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_ray_tracing_pipeline")) && isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_ray_query")) )
	{
		if ( physicalDeviceRayTracingPipelineFeaturesKHR.rayTraversalPrimitiveCulling == VK_FALSE )
			failMesages.push_back("rayTraversalPrimitiveCulling");
	}

	// VkPhysicalDeviceRayQueryFeaturesKHR
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_ray_query")) )
	{
		if ( physicalDeviceRayQueryFeaturesKHR.rayQuery == VK_FALSE )
			failMesages.push_back("rayQuery");
	}

	// VkPhysicalDeviceMeshShaderFeaturesEXT
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_mesh_shader")) )
	{
		if ( physicalDeviceMeshShaderFeaturesEXT.taskShader == VK_FALSE )
			failMesages.push_back("taskShader");
	}

	// VkPhysicalDeviceMeshShaderFeaturesEXT
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_mesh_shader")) )
	{
		if ( physicalDeviceMeshShaderFeaturesEXT.meshShader == VK_FALSE )
			failMesages.push_back("meshShader");
	}

	// VkPhysicalDeviceFragmentShadingRateFeaturesKHR
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_mesh_shader")) && isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_fragment_shading_rate")) && physicalDeviceMeshShaderFeaturesEXT.primitiveFragmentShadingRateMeshShader )
	{
		if ( physicalDeviceFragmentShadingRateFeaturesKHR.primitiveFragmentShadingRate == VK_FALSE )
			failMesages.push_back("primitiveFragmentShadingRate");
	}

	// VkPhysicalDevice16BitStorageFeatures
	if ( context.contextSupports(vk::ApiVersion(0, 1, 1, 0)) && physicalDevice16BitStorageFeatures.uniformAndStorageBuffer16BitAccess )
	{
		if ( physicalDevice16BitStorageFeatures.storageBuffer16BitAccess == VK_FALSE )
			failMesages.push_back("storageBuffer16BitAccess");
	}

	// VkPhysicalDeviceMultiviewFeatures
	if ( context.contextSupports(vk::ApiVersion(0, 1, 1, 0)) )
	{
		if ( physicalDeviceMultiviewFeatures.multiview == VK_FALSE )
			failMesages.push_back("multiview");
	}

	// VkPhysicalDeviceShaderDrawParametersFeatures
	if ( context.contextSupports(vk::ApiVersion(0, 1, 1, 0)) && isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_shader_draw_parameters")) )
	{
		if ( physicalDeviceShaderDrawParametersFeatures.shaderDrawParameters == VK_FALSE )
			failMesages.push_back("shaderDrawParameters");
	}

	// VkPhysicalDeviceVulkan12Features
	if ( context.contextSupports(vk::ApiVersion(0, 1, 2, 0)) )
	{
		if ( physicalDeviceVulkan12Features.subgroupBroadcastDynamicId == VK_FALSE )
			failMesages.push_back("subgroupBroadcastDynamicId");
	}

	// VkPhysicalDeviceVulkan12Features
	if ( context.contextSupports(vk::ApiVersion(0, 1, 2, 0)) && isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_sampler_mirror_clamp_to_edge")) )
	{
		if ( physicalDeviceVulkan12Features.samplerMirrorClampToEdge == VK_FALSE )
			failMesages.push_back("samplerMirrorClampToEdge");
	}

	// VkPhysicalDeviceVulkan12Features
	if ( context.contextSupports(vk::ApiVersion(0, 1, 2, 0)) && isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_draw_indirect_count")) )
	{
		if ( physicalDeviceVulkan12Features.drawIndirectCount == VK_FALSE )
			failMesages.push_back("drawIndirectCount");
	}

	// VkPhysicalDevice8BitStorageFeatures
	if ( context.contextSupports(vk::ApiVersion(0, 1, 2, 0)) && physicalDevice8BitStorageFeatures.uniformAndStorageBuffer8BitAccess )
	{
		if ( physicalDevice8BitStorageFeatures.storageBuffer8BitAccess == VK_FALSE )
			failMesages.push_back("storageBuffer8BitAccess");
	}

	// VkPhysicalDeviceVulkan12Features
	if ( context.contextSupports(vk::ApiVersion(0, 1, 2, 0)) && physicalDevice8BitStorageFeatures.uniformAndStorageBuffer8BitAccess )
	{
		if ( physicalDeviceVulkan12Features.storageBuffer8BitAccess == VK_FALSE )
			failMesages.push_back("storageBuffer8BitAccess");
	}

	// VkPhysicalDeviceFeatures
	if ( context.contextSupports(vk::ApiVersion(0, 1, 2, 0)) && (physicalDeviceShaderAtomicInt64Features.shaderSharedInt64Atomics || physicalDeviceShaderAtomicInt64Features.shaderBufferInt64Atomics) )
	{
		if ( coreFeatures.features.shaderInt64 == VK_FALSE )
			failMesages.push_back("shaderInt64");
	}

	// VkPhysicalDeviceVulkan12Features
	if ( context.contextSupports(vk::ApiVersion(0, 1, 2, 0)) && isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_descriptor_indexing")) )
	{
		if ( physicalDeviceVulkan12Features.descriptorIndexing == VK_FALSE )
			failMesages.push_back("descriptorIndexing");
	}

	// VkPhysicalDeviceFeatures
	if ( context.contextSupports(vk::ApiVersion(0, 1, 2, 0)) && physicalDeviceVulkan12Features.descriptorIndexing )
	{
		if ( coreFeatures.features.shaderSampledImageArrayDynamicIndexing == VK_FALSE )
			failMesages.push_back("shaderSampledImageArrayDynamicIndexing");
	}

	// VkPhysicalDeviceFeatures
	if ( context.contextSupports(vk::ApiVersion(0, 1, 2, 0)) && physicalDeviceVulkan12Features.descriptorIndexing )
	{
		if ( coreFeatures.features.shaderStorageBufferArrayDynamicIndexing == VK_FALSE )
			failMesages.push_back("shaderStorageBufferArrayDynamicIndexing");
	}

	// VkPhysicalDeviceVulkan12Features
	if ( context.contextSupports(vk::ApiVersion(0, 1, 2, 0)) && physicalDeviceVulkan12Features.descriptorIndexing )
	{
		if ( physicalDeviceVulkan12Features.shaderUniformTexelBufferArrayDynamicIndexing == VK_FALSE )
			failMesages.push_back("shaderUniformTexelBufferArrayDynamicIndexing");
	}

	// VkPhysicalDeviceVulkan12Features
	if ( context.contextSupports(vk::ApiVersion(0, 1, 2, 0)) && physicalDeviceVulkan12Features.descriptorIndexing )
	{
		if ( physicalDeviceVulkan12Features.shaderStorageTexelBufferArrayDynamicIndexing == VK_FALSE )
			failMesages.push_back("shaderStorageTexelBufferArrayDynamicIndexing");
	}

	// VkPhysicalDeviceVulkan12Features
	if ( context.contextSupports(vk::ApiVersion(0, 1, 2, 0)) && physicalDeviceVulkan12Features.descriptorIndexing )
	{
		if ( physicalDeviceVulkan12Features.shaderSampledImageArrayNonUniformIndexing == VK_FALSE )
			failMesages.push_back("shaderSampledImageArrayNonUniformIndexing");
	}

	// VkPhysicalDeviceVulkan12Features
	if ( context.contextSupports(vk::ApiVersion(0, 1, 2, 0)) && physicalDeviceVulkan12Features.descriptorIndexing )
	{
		if ( physicalDeviceVulkan12Features.shaderStorageBufferArrayNonUniformIndexing == VK_FALSE )
			failMesages.push_back("shaderStorageBufferArrayNonUniformIndexing");
	}

	// VkPhysicalDeviceVulkan12Features
	if ( context.contextSupports(vk::ApiVersion(0, 1, 2, 0)) && physicalDeviceVulkan12Features.descriptorIndexing )
	{
		if ( physicalDeviceVulkan12Features.shaderUniformTexelBufferArrayNonUniformIndexing == VK_FALSE )
			failMesages.push_back("shaderUniformTexelBufferArrayNonUniformIndexing");
	}

	// VkPhysicalDeviceVulkan12Features
	if ( context.contextSupports(vk::ApiVersion(0, 1, 2, 0)) && physicalDeviceVulkan12Features.descriptorIndexing )
	{
		if ( physicalDeviceVulkan12Features.descriptorBindingSampledImageUpdateAfterBind == VK_FALSE )
			failMesages.push_back("descriptorBindingSampledImageUpdateAfterBind");
	}

	// VkPhysicalDeviceVulkan12Features
	if ( context.contextSupports(vk::ApiVersion(0, 1, 2, 0)) && physicalDeviceVulkan12Features.descriptorIndexing )
	{
		if ( physicalDeviceVulkan12Features.descriptorBindingStorageImageUpdateAfterBind == VK_FALSE )
			failMesages.push_back("descriptorBindingStorageImageUpdateAfterBind");
	}

	// VkPhysicalDeviceVulkan12Features
	if ( context.contextSupports(vk::ApiVersion(0, 1, 2, 0)) && physicalDeviceVulkan12Features.descriptorIndexing )
	{
		if ( physicalDeviceVulkan12Features.descriptorBindingStorageBufferUpdateAfterBind == VK_FALSE )
			failMesages.push_back("descriptorBindingStorageBufferUpdateAfterBind");
	}

	// VkPhysicalDeviceVulkan12Features
	if ( context.contextSupports(vk::ApiVersion(0, 1, 2, 0)) && physicalDeviceVulkan12Features.descriptorIndexing )
	{
		if ( physicalDeviceVulkan12Features.descriptorBindingUniformTexelBufferUpdateAfterBind == VK_FALSE )
			failMesages.push_back("descriptorBindingUniformTexelBufferUpdateAfterBind");
	}

	// VkPhysicalDeviceVulkan12Features
	if ( context.contextSupports(vk::ApiVersion(0, 1, 2, 0)) && physicalDeviceVulkan12Features.descriptorIndexing )
	{
		if ( physicalDeviceVulkan12Features.descriptorBindingStorageTexelBufferUpdateAfterBind == VK_FALSE )
			failMesages.push_back("descriptorBindingStorageTexelBufferUpdateAfterBind");
	}

	// VkPhysicalDeviceVulkan12Features
	if ( context.contextSupports(vk::ApiVersion(0, 1, 2, 0)) && physicalDeviceVulkan12Features.descriptorIndexing )
	{
		if ( physicalDeviceVulkan12Features.descriptorBindingUpdateUnusedWhilePending == VK_FALSE )
			failMesages.push_back("descriptorBindingUpdateUnusedWhilePending");
	}

	// VkPhysicalDeviceVulkan12Features
	if ( context.contextSupports(vk::ApiVersion(0, 1, 2, 0)) && physicalDeviceVulkan12Features.descriptorIndexing )
	{
		if ( physicalDeviceVulkan12Features.descriptorBindingPartiallyBound == VK_FALSE )
			failMesages.push_back("descriptorBindingPartiallyBound");
	}

	// VkPhysicalDeviceVulkan12Features
	if ( context.contextSupports(vk::ApiVersion(0, 1, 2, 0)) && physicalDeviceVulkan12Features.descriptorIndexing )
	{
		if ( physicalDeviceVulkan12Features.runtimeDescriptorArray == VK_FALSE )
			failMesages.push_back("runtimeDescriptorArray");
	}

	// VkPhysicalDeviceVulkan12Features
	if ( context.contextSupports(vk::ApiVersion(0, 1, 2, 0)) && isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_shader_viewport_index_layer")) )
	{
		if ( physicalDeviceVulkan12Features.shaderOutputViewportIndex == VK_FALSE )
			failMesages.push_back("shaderOutputViewportIndex");
	}

	// VkPhysicalDeviceVulkan12Features
	if ( context.contextSupports(vk::ApiVersion(0, 1, 2, 0)) && isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_shader_viewport_index_layer")) )
	{
		if ( physicalDeviceVulkan12Features.shaderOutputLayer == VK_FALSE )
			failMesages.push_back("shaderOutputLayer");
	}

	// VkPhysicalDeviceVulkan12Features
	if ( context.contextSupports(vk::ApiVersion(0, 1, 2, 0)) && isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_sampler_filter_minmax")) )
	{
		if ( physicalDeviceVulkan12Features.samplerFilterMinmax == VK_FALSE )
			failMesages.push_back("samplerFilterMinmax");
	}

	// VkPhysicalDeviceImagelessFramebufferFeatures
	if ( context.contextSupports(vk::ApiVersion(0, 1, 2, 0)) )
	{
		if ( physicalDeviceImagelessFramebufferFeatures.imagelessFramebuffer == VK_FALSE )
			failMesages.push_back("imagelessFramebuffer");
	}

	// VkPhysicalDeviceVulkan12Features
	if ( context.contextSupports(vk::ApiVersion(0, 1, 2, 0)) )
	{
		if ( physicalDeviceVulkan12Features.imagelessFramebuffer == VK_FALSE )
			failMesages.push_back("imagelessFramebuffer");
	}

	// VkPhysicalDeviceUniformBufferStandardLayoutFeatures
	if ( context.contextSupports(vk::ApiVersion(0, 1, 2, 0)) )
	{
		if ( physicalDeviceUniformBufferStandardLayoutFeatures.uniformBufferStandardLayout == VK_FALSE )
			failMesages.push_back("uniformBufferStandardLayout");
	}

	// VkPhysicalDeviceVulkan12Features
	if ( context.contextSupports(vk::ApiVersion(0, 1, 2, 0)) )
	{
		if ( physicalDeviceVulkan12Features.uniformBufferStandardLayout == VK_FALSE )
			failMesages.push_back("uniformBufferStandardLayout");
	}

	// VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures
	if ( context.contextSupports(vk::ApiVersion(0, 1, 2, 0)) )
	{
		if ( physicalDeviceShaderSubgroupExtendedTypesFeatures.shaderSubgroupExtendedTypes == VK_FALSE )
			failMesages.push_back("shaderSubgroupExtendedTypes");
	}

	// VkPhysicalDeviceVulkan12Features
	if ( context.contextSupports(vk::ApiVersion(0, 1, 2, 0)) )
	{
		if ( physicalDeviceVulkan12Features.shaderSubgroupExtendedTypes == VK_FALSE )
			failMesages.push_back("shaderSubgroupExtendedTypes");
	}

	// VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures
	if ( context.contextSupports(vk::ApiVersion(0, 1, 2, 0)) )
	{
		if ( physicalDeviceSeparateDepthStencilLayoutsFeatures.separateDepthStencilLayouts == VK_FALSE )
			failMesages.push_back("separateDepthStencilLayouts");
	}

	// VkPhysicalDeviceVulkan12Features
	if ( context.contextSupports(vk::ApiVersion(0, 1, 2, 0)) )
	{
		if ( physicalDeviceVulkan12Features.separateDepthStencilLayouts == VK_FALSE )
			failMesages.push_back("separateDepthStencilLayouts");
	}

	// VkPhysicalDeviceHostQueryResetFeatures
	if ( context.contextSupports(vk::ApiVersion(0, 1, 2, 0)) )
	{
		if ( physicalDeviceHostQueryResetFeatures.hostQueryReset == VK_FALSE )
			failMesages.push_back("hostQueryReset");
	}

	// VkPhysicalDeviceVulkan12Features
	if ( context.contextSupports(vk::ApiVersion(0, 1, 2, 0)) )
	{
		if ( physicalDeviceVulkan12Features.hostQueryReset == VK_FALSE )
			failMesages.push_back("hostQueryReset");
	}

	// VkPhysicalDeviceTimelineSemaphoreFeatures
	if ( context.contextSupports(vk::ApiVersion(0, 1, 2, 0)) )
	{
		if ( physicalDeviceTimelineSemaphoreFeatures.timelineSemaphore == VK_FALSE )
			failMesages.push_back("timelineSemaphore");
	}

	// VkPhysicalDeviceVulkan12Features
	if ( context.contextSupports(vk::ApiVersion(0, 1, 2, 0)) )
	{
		if ( physicalDeviceVulkan12Features.timelineSemaphore == VK_FALSE )
			failMesages.push_back("timelineSemaphore");
	}

	// VkPhysicalDeviceShaderTerminateInvocationFeatures
	if ( context.contextSupports(vk::ApiVersion(0, 1, 3, 0)) )
	{
		if ( physicalDeviceShaderTerminateInvocationFeatures.shaderTerminateInvocation == VK_FALSE )
			failMesages.push_back("shaderTerminateInvocation");
	}

	// VkPhysicalDeviceVulkan13Features
	if ( context.contextSupports(vk::ApiVersion(0, 1, 3, 0)) )
	{
		if ( physicalDeviceVulkan13Features.shaderTerminateInvocation == VK_FALSE )
			failMesages.push_back("shaderTerminateInvocation");
	}

	// VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures
	if ( context.contextSupports(vk::ApiVersion(0, 1, 3, 0)) )
	{
		if ( physicalDeviceShaderDemoteToHelperInvocationFeatures.shaderDemoteToHelperInvocation == VK_FALSE )
			failMesages.push_back("shaderDemoteToHelperInvocation");
	}

	// VkPhysicalDeviceVulkan13Features
	if ( context.contextSupports(vk::ApiVersion(0, 1, 3, 0)) )
	{
		if ( physicalDeviceVulkan13Features.shaderDemoteToHelperInvocation == VK_FALSE )
			failMesages.push_back("shaderDemoteToHelperInvocation");
	}

	// VkPhysicalDevicePrivateDataFeatures
	if ( context.contextSupports(vk::ApiVersion(0, 1, 3, 0)) )
	{
		if ( physicalDevicePrivateDataFeatures.privateData == VK_FALSE )
			failMesages.push_back("privateData");
	}

	// VkPhysicalDeviceVulkan13Features
	if ( context.contextSupports(vk::ApiVersion(0, 1, 3, 0)) )
	{
		if ( physicalDeviceVulkan13Features.privateData == VK_FALSE )
			failMesages.push_back("privateData");
	}

	// VkPhysicalDevicePipelineCreationCacheControlFeatures
	if ( context.contextSupports(vk::ApiVersion(0, 1, 3, 0)) )
	{
		if ( physicalDevicePipelineCreationCacheControlFeatures.pipelineCreationCacheControl == VK_FALSE )
			failMesages.push_back("pipelineCreationCacheControl");
	}

	// VkPhysicalDeviceVulkan13Features
	if ( context.contextSupports(vk::ApiVersion(0, 1, 3, 0)) )
	{
		if ( physicalDeviceVulkan13Features.pipelineCreationCacheControl == VK_FALSE )
			failMesages.push_back("pipelineCreationCacheControl");
	}

	// VkPhysicalDeviceSynchronization2Features
	if ( context.contextSupports(vk::ApiVersion(0, 1, 3, 0)) )
	{
		if ( physicalDeviceSynchronization2Features.synchronization2 == VK_FALSE )
			failMesages.push_back("synchronization2");
	}

	// VkPhysicalDeviceVulkan13Features
	if ( context.contextSupports(vk::ApiVersion(0, 1, 3, 0)) )
	{
		if ( physicalDeviceVulkan13Features.synchronization2 == VK_FALSE )
			failMesages.push_back("synchronization2");
	}

	// VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures
	if ( context.contextSupports(vk::ApiVersion(0, 1, 3, 0)) )
	{
		if ( physicalDeviceZeroInitializeWorkgroupMemoryFeatures.shaderZeroInitializeWorkgroupMemory == VK_FALSE )
			failMesages.push_back("shaderZeroInitializeWorkgroupMemory");
	}

	// VkPhysicalDeviceVulkan13Features
	if ( context.contextSupports(vk::ApiVersion(0, 1, 3, 0)) )
	{
		if ( physicalDeviceVulkan13Features.shaderZeroInitializeWorkgroupMemory == VK_FALSE )
			failMesages.push_back("shaderZeroInitializeWorkgroupMemory");
	}

	// VkPhysicalDeviceImageRobustnessFeatures
	if ( context.contextSupports(vk::ApiVersion(0, 1, 3, 0)) )
	{
		if ( physicalDeviceImageRobustnessFeatures.robustImageAccess == VK_FALSE )
			failMesages.push_back("robustImageAccess");
	}

	// VkPhysicalDeviceVulkan13Features
	if ( context.contextSupports(vk::ApiVersion(0, 1, 3, 0)) )
	{
		if ( physicalDeviceVulkan13Features.robustImageAccess == VK_FALSE )
			failMesages.push_back("robustImageAccess");
	}

	// VkPhysicalDeviceSubgroupSizeControlFeatures
	if ( context.contextSupports(vk::ApiVersion(0, 1, 3, 0)) )
	{
		if ( physicalDeviceSubgroupSizeControlFeatures.subgroupSizeControl == VK_FALSE )
			failMesages.push_back("subgroupSizeControl");
	}

	// VkPhysicalDeviceSubgroupSizeControlFeatures
	if ( context.contextSupports(vk::ApiVersion(0, 1, 3, 0)) )
	{
		if ( physicalDeviceSubgroupSizeControlFeatures.computeFullSubgroups == VK_FALSE )
			failMesages.push_back("computeFullSubgroups");
	}

	// VkPhysicalDeviceVulkan13Features
	if ( context.contextSupports(vk::ApiVersion(0, 1, 3, 0)) )
	{
		if ( physicalDeviceVulkan13Features.subgroupSizeControl == VK_FALSE )
			failMesages.push_back("subgroupSizeControl");
	}

	// VkPhysicalDeviceVulkan13Features
	if ( context.contextSupports(vk::ApiVersion(0, 1, 3, 0)) )
	{
		if ( physicalDeviceVulkan13Features.computeFullSubgroups == VK_FALSE )
			failMesages.push_back("computeFullSubgroups");
	}

	// VkPhysicalDeviceDynamicRenderingFeatures
	if ( context.contextSupports(vk::ApiVersion(0, 1, 3, 0)) )
	{
		if ( physicalDeviceDynamicRenderingFeatures.dynamicRendering == VK_FALSE )
			failMesages.push_back("dynamicRendering");
	}

	// VkPhysicalDeviceVulkan13Features
	if ( context.contextSupports(vk::ApiVersion(0, 1, 3, 0)) )
	{
		if ( physicalDeviceVulkan13Features.dynamicRendering == VK_FALSE )
			failMesages.push_back("dynamicRendering");
	}

	// VkPhysicalDeviceShaderIntegerDotProductFeatures
	if ( context.contextSupports(vk::ApiVersion(0, 1, 3, 0)) )
	{
		if ( physicalDeviceShaderIntegerDotProductFeatures.shaderIntegerDotProduct == VK_FALSE )
			failMesages.push_back("shaderIntegerDotProduct");
	}

	// VkPhysicalDeviceVulkan13Features
	if ( context.contextSupports(vk::ApiVersion(0, 1, 3, 0)) )
	{
		if ( physicalDeviceVulkan13Features.shaderIntegerDotProduct == VK_FALSE )
			failMesages.push_back("shaderIntegerDotProduct");
	}

	// VkPhysicalDeviceMaintenance4Features
	if ( context.contextSupports(vk::ApiVersion(0, 1, 3, 0)) )
	{
		if ( physicalDeviceMaintenance4Features.maintenance4 == VK_FALSE )
			failMesages.push_back("maintenance4");
	}

	// VkPhysicalDeviceVulkan13Features
	if ( context.contextSupports(vk::ApiVersion(0, 1, 3, 0)) )
	{
		if ( physicalDeviceVulkan13Features.maintenance4 == VK_FALSE )
			failMesages.push_back("maintenance4");
	}

	// VkPhysicalDeviceVulkanMemoryModelFeatures
	if ( context.contextSupports(vk::ApiVersion(0, 1, 3, 0)) )
	{
		if ( physicalDeviceVulkanMemoryModelFeatures.vulkanMemoryModel == VK_FALSE )
			failMesages.push_back("vulkanMemoryModel");
	}

	// VkPhysicalDeviceVulkanMemoryModelFeatures
	if ( context.contextSupports(vk::ApiVersion(0, 1, 3, 0)) )
	{
		if ( physicalDeviceVulkanMemoryModelFeatures.vulkanMemoryModelDeviceScope == VK_FALSE )
			failMesages.push_back("vulkanMemoryModelDeviceScope");
	}

	// VkPhysicalDeviceInlineUniformBlockFeatures
	if ( context.contextSupports(vk::ApiVersion(0, 1, 3, 0)) )
	{
		if ( physicalDeviceInlineUniformBlockFeatures.inlineUniformBlock == VK_FALSE )
			failMesages.push_back("inlineUniformBlock");
	}

	// VkPhysicalDeviceBufferDeviceAddressFeatures
	if ( context.contextSupports(vk::ApiVersion(0, 1, 3, 0)) )
	{
		if ( physicalDeviceBufferDeviceAddressFeatures.bufferDeviceAddress == VK_FALSE )
			failMesages.push_back("bufferDeviceAddress");
	}

	// VkPhysicalDeviceVulkan12Features
	if ( context.contextSupports(vk::ApiVersion(0, 1, 3, 0)) )
	{
		if ( physicalDeviceVulkan12Features.vulkanMemoryModel == VK_FALSE )
			failMesages.push_back("vulkanMemoryModel");
	}

	// VkPhysicalDeviceVulkan12Features
	if ( context.contextSupports(vk::ApiVersion(0, 1, 3, 0)) )
	{
		if ( physicalDeviceVulkan12Features.vulkanMemoryModelDeviceScope == VK_FALSE )
			failMesages.push_back("vulkanMemoryModelDeviceScope");
	}

	// VkPhysicalDeviceVulkan13Features
	if ( context.contextSupports(vk::ApiVersion(0, 1, 3, 0)) )
	{
		if ( physicalDeviceVulkan13Features.inlineUniformBlock == VK_FALSE )
			failMesages.push_back("inlineUniformBlock");
	}

	// VkPhysicalDeviceVulkan12Features
	if ( context.contextSupports(vk::ApiVersion(0, 1, 3, 0)) )
	{
		if ( physicalDeviceVulkan12Features.bufferDeviceAddress == VK_FALSE )
			failMesages.push_back("bufferDeviceAddress");
	}

	// VkPhysicalDeviceInlineUniformBlockFeatures
	if ( context.contextSupports(vk::ApiVersion(0, 1, 3, 0)) && (isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_descriptor_indexing")) || physicalDeviceVulkan12Features.descriptorIndexing) )
	{
		if ( physicalDeviceInlineUniformBlockFeatures.descriptorBindingInlineUniformBlockUpdateAfterBind == VK_FALSE )
			failMesages.push_back("descriptorBindingInlineUniformBlockUpdateAfterBind");
	}

	// VkPhysicalDeviceVulkan13Features
	if ( context.contextSupports(vk::ApiVersion(0, 1, 3, 0)) && (isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_descriptor_indexing")) || physicalDeviceVulkan12Features.descriptorIndexing) )
	{
		if ( physicalDeviceVulkan13Features.descriptorBindingInlineUniformBlockUpdateAfterBind == VK_FALSE )
			failMesages.push_back("descriptorBindingInlineUniformBlockUpdateAfterBind");
	}

	// VkPhysicalDeviceFeatures
	if ( context.contextSupports(vk::ApiVersion(0, 1, 4, 0)) )
	{
		if ( coreFeatures.features.fullDrawIndexUint32 == VK_FALSE )
			failMesages.push_back("fullDrawIndexUint32");
	}

	// VkPhysicalDeviceFeatures
	if ( context.contextSupports(vk::ApiVersion(0, 1, 4, 0)) )
	{
		if ( coreFeatures.features.imageCubeArray == VK_FALSE )
			failMesages.push_back("imageCubeArray");
	}

	// VkPhysicalDeviceFeatures
	if ( context.contextSupports(vk::ApiVersion(0, 1, 4, 0)) )
	{
		if ( coreFeatures.features.independentBlend == VK_FALSE )
			failMesages.push_back("independentBlend");
	}

	// VkPhysicalDeviceFeatures
	if ( context.contextSupports(vk::ApiVersion(0, 1, 4, 0)) )
	{
		if ( coreFeatures.features.sampleRateShading == VK_FALSE )
			failMesages.push_back("sampleRateShading");
	}

	// VkPhysicalDeviceFeatures
	if ( context.contextSupports(vk::ApiVersion(0, 1, 4, 0)) )
	{
		if ( coreFeatures.features.drawIndirectFirstInstance == VK_FALSE )
			failMesages.push_back("drawIndirectFirstInstance");
	}

	// VkPhysicalDeviceFeatures
	if ( context.contextSupports(vk::ApiVersion(0, 1, 4, 0)) )
	{
		if ( coreFeatures.features.depthClamp == VK_FALSE )
			failMesages.push_back("depthClamp");
	}

	// VkPhysicalDeviceFeatures
	if ( context.contextSupports(vk::ApiVersion(0, 1, 4, 0)) )
	{
		if ( coreFeatures.features.depthBiasClamp == VK_FALSE )
			failMesages.push_back("depthBiasClamp");
	}

	// VkPhysicalDeviceFeatures
	if ( context.contextSupports(vk::ApiVersion(0, 1, 4, 0)) )
	{
		if ( coreFeatures.features.samplerAnisotropy == VK_FALSE )
			failMesages.push_back("samplerAnisotropy");
	}

	// VkPhysicalDeviceFeatures
	if ( context.contextSupports(vk::ApiVersion(0, 1, 4, 0)) )
	{
		if ( coreFeatures.features.fragmentStoresAndAtomics == VK_FALSE )
			failMesages.push_back("fragmentStoresAndAtomics");
	}

	// VkPhysicalDeviceFeatures
	if ( context.contextSupports(vk::ApiVersion(0, 1, 4, 0)) )
	{
		if ( coreFeatures.features.shaderStorageImageExtendedFormats == VK_FALSE )
			failMesages.push_back("shaderStorageImageExtendedFormats");
	}

	// VkPhysicalDeviceFeatures
	if ( context.contextSupports(vk::ApiVersion(0, 1, 4, 0)) )
	{
		if ( coreFeatures.features.shaderUniformBufferArrayDynamicIndexing == VK_FALSE )
			failMesages.push_back("shaderUniformBufferArrayDynamicIndexing");
	}

	// VkPhysicalDeviceFeatures
	if ( context.contextSupports(vk::ApiVersion(0, 1, 4, 0)) )
	{
		if ( coreFeatures.features.shaderSampledImageArrayDynamicIndexing == VK_FALSE )
			failMesages.push_back("shaderSampledImageArrayDynamicIndexing");
	}

	// VkPhysicalDeviceFeatures
	if ( context.contextSupports(vk::ApiVersion(0, 1, 4, 0)) )
	{
		if ( coreFeatures.features.shaderStorageBufferArrayDynamicIndexing == VK_FALSE )
			failMesages.push_back("shaderStorageBufferArrayDynamicIndexing");
	}

	// VkPhysicalDeviceFeatures
	if ( context.contextSupports(vk::ApiVersion(0, 1, 4, 0)) )
	{
		if ( coreFeatures.features.shaderStorageImageArrayDynamicIndexing == VK_FALSE )
			failMesages.push_back("shaderStorageImageArrayDynamicIndexing");
	}

	// VkPhysicalDeviceFeatures
	if ( context.contextSupports(vk::ApiVersion(0, 1, 4, 0)) )
	{
		if ( coreFeatures.features.shaderImageGatherExtended == VK_FALSE )
			failMesages.push_back("shaderImageGatherExtended");
	}

	// VkPhysicalDeviceFeatures
	if ( context.contextSupports(vk::ApiVersion(0, 1, 4, 0)) )
	{
		if ( coreFeatures.features.shaderInt16 == VK_FALSE )
			failMesages.push_back("shaderInt16");
	}

	// VkPhysicalDeviceFeatures
	if ( context.contextSupports(vk::ApiVersion(0, 1, 4, 0)) )
	{
		if ( coreFeatures.features.largePoints == VK_FALSE )
			failMesages.push_back("largePoints");
	}

	// VkPhysicalDeviceVulkan11Features
	if ( context.contextSupports(vk::ApiVersion(0, 1, 4, 0)) )
	{
		if ( physicalDeviceVulkan11Features.samplerYcbcrConversion == VK_FALSE )
			failMesages.push_back("samplerYcbcrConversion");
	}

	// VkPhysicalDeviceVulkan11Features
	if ( context.contextSupports(vk::ApiVersion(0, 1, 4, 0)) )
	{
		if ( physicalDeviceVulkan11Features.storageBuffer16BitAccess == VK_FALSE )
			failMesages.push_back("storageBuffer16BitAccess");
	}

	// VkPhysicalDeviceVulkan11Features
	if ( context.contextSupports(vk::ApiVersion(0, 1, 4, 0)) )
	{
		if ( physicalDeviceVulkan11Features.variablePointers == VK_FALSE )
			failMesages.push_back("variablePointers");
	}

	// VkPhysicalDeviceVulkan11Features
	if ( context.contextSupports(vk::ApiVersion(0, 1, 4, 0)) )
	{
		if ( physicalDeviceVulkan11Features.variablePointersStorageBuffer == VK_FALSE )
			failMesages.push_back("variablePointersStorageBuffer");
	}

	// VkPhysicalDeviceVulkan12Features
	if ( context.contextSupports(vk::ApiVersion(0, 1, 4, 0)) )
	{
		if ( physicalDeviceVulkan12Features.samplerMirrorClampToEdge == VK_FALSE )
			failMesages.push_back("samplerMirrorClampToEdge");
	}

	// VkPhysicalDeviceVulkan12Features
	if ( context.contextSupports(vk::ApiVersion(0, 1, 4, 0)) )
	{
		if ( physicalDeviceVulkan12Features.scalarBlockLayout == VK_FALSE )
			failMesages.push_back("scalarBlockLayout");
	}

	// VkPhysicalDeviceVulkan12Features
	if ( context.contextSupports(vk::ApiVersion(0, 1, 4, 0)) )
	{
		if ( physicalDeviceVulkan12Features.shaderUniformTexelBufferArrayDynamicIndexing == VK_FALSE )
			failMesages.push_back("shaderUniformTexelBufferArrayDynamicIndexing");
	}

	// VkPhysicalDeviceVulkan12Features
	if ( context.contextSupports(vk::ApiVersion(0, 1, 4, 0)) )
	{
		if ( physicalDeviceVulkan12Features.shaderStorageTexelBufferArrayDynamicIndexing == VK_FALSE )
			failMesages.push_back("shaderStorageTexelBufferArrayDynamicIndexing");
	}

	// VkPhysicalDeviceVulkan12Features
	if ( context.contextSupports(vk::ApiVersion(0, 1, 4, 0)) )
	{
		if ( physicalDeviceVulkan12Features.shaderInt8 == VK_FALSE )
			failMesages.push_back("shaderInt8");
	}

	// VkPhysicalDeviceVulkan12Features
	if ( context.contextSupports(vk::ApiVersion(0, 1, 4, 0)) )
	{
		if ( physicalDeviceVulkan12Features.storageBuffer8BitAccess == VK_FALSE )
			failMesages.push_back("storageBuffer8BitAccess");
	}

	// VkPhysicalDeviceGlobalPriorityQueryFeatures
	if ( context.contextSupports(vk::ApiVersion(0, 1, 4, 0)) )
	{
		if ( physicalDeviceGlobalPriorityQueryFeatures.globalPriorityQuery == VK_FALSE )
			failMesages.push_back("globalPriorityQuery");
	}

	// VkPhysicalDeviceShaderSubgroupRotateFeatures
	if ( context.contextSupports(vk::ApiVersion(0, 1, 4, 0)) )
	{
		if ( physicalDeviceShaderSubgroupRotateFeatures.shaderSubgroupRotate == VK_FALSE )
			failMesages.push_back("shaderSubgroupRotate");
	}

	// VkPhysicalDeviceShaderSubgroupRotateFeatures
	if ( context.contextSupports(vk::ApiVersion(0, 1, 4, 0)) )
	{
		if ( physicalDeviceShaderSubgroupRotateFeatures.shaderSubgroupRotateClustered == VK_FALSE )
			failMesages.push_back("shaderSubgroupRotateClustered");
	}

	// VkPhysicalDeviceShaderFloatControls2Features
	if ( context.contextSupports(vk::ApiVersion(0, 1, 4, 0)) )
	{
		if ( physicalDeviceShaderFloatControls2Features.shaderFloatControls2 == VK_FALSE )
			failMesages.push_back("shaderFloatControls2");
	}

	// VkPhysicalDeviceShaderExpectAssumeFeatures
	if ( context.contextSupports(vk::ApiVersion(0, 1, 4, 0)) )
	{
		if ( physicalDeviceShaderExpectAssumeFeatures.shaderExpectAssume == VK_FALSE )
			failMesages.push_back("shaderExpectAssume");
	}

	// VkPhysicalDeviceLineRasterizationFeatures
	if ( context.contextSupports(vk::ApiVersion(0, 1, 4, 0)) )
	{
		if ( physicalDeviceLineRasterizationFeatures.bresenhamLines == VK_FALSE )
			failMesages.push_back("bresenhamLines");
	}

	// VkPhysicalDeviceVertexAttributeDivisorFeatures
	if ( context.contextSupports(vk::ApiVersion(0, 1, 4, 0)) )
	{
		if ( physicalDeviceVertexAttributeDivisorFeatures.vertexAttributeInstanceRateDivisor == VK_FALSE )
			failMesages.push_back("vertexAttributeInstanceRateDivisor");
	}

	// VkPhysicalDeviceIndexTypeUint8Features
	if ( context.contextSupports(vk::ApiVersion(0, 1, 4, 0)) )
	{
		if ( physicalDeviceIndexTypeUint8Features.indexTypeUint8 == VK_FALSE )
			failMesages.push_back("indexTypeUint8");
	}

	// VkPhysicalDeviceMaintenance5Features
	if ( context.contextSupports(vk::ApiVersion(0, 1, 4, 0)) )
	{
		if ( physicalDeviceMaintenance5Features.maintenance5 == VK_FALSE )
			failMesages.push_back("maintenance5");
	}

	// VkPhysicalDeviceVulkan14Features
	if ( context.contextSupports(vk::ApiVersion(0, 1, 4, 0)) )
	{
		if ( physicalDeviceVulkan14Features.pushDescriptor == VK_FALSE )
			failMesages.push_back("pushDescriptor");
	}

	// VkPhysicalDeviceDynamicRenderingLocalReadFeatures
	if ( context.contextSupports(vk::ApiVersion(0, 1, 4, 0)) )
	{
		if ( physicalDeviceDynamicRenderingLocalReadFeatures.dynamicRenderingLocalRead == VK_FALSE )
			failMesages.push_back("dynamicRenderingLocalRead");
	}

	// VkPhysicalDeviceMaintenance6Features
	if ( context.contextSupports(vk::ApiVersion(0, 1, 4, 0)) )
	{
		if ( physicalDeviceMaintenance6Features.maintenance6 == VK_FALSE )
			failMesages.push_back("maintenance6");
	}

	// VkPhysicalDevicePipelineProtectedAccessFeatures
	if ( context.contextSupports(vk::ApiVersion(0, 1, 4, 0)) && physicalDeviceProtectedMemoryFeatures.protectedMemory )
	{
		if ( physicalDevicePipelineProtectedAccessFeatures.pipelineProtectedAccess == VK_FALSE )
			failMesages.push_back("pipelineProtectedAccess");
	}

	// VkPhysicalDeviceVulkan14Features
	if ( context.contextSupports(vk::ApiVersion(0, 1, 4, 0)) && physicalDeviceProtectedMemoryFeatures.protectedMemory )
	{
		if ( physicalDeviceVulkan14Features.pipelineProtectedAccess == VK_FALSE )
			failMesages.push_back("pipelineProtectedAccess");
	}

	// VkPhysicalDevicePipelineRobustnessFeatures
	if ( context.contextSupports(vk::ApiVersion(0, 1, 4, 0)) )
	{
		if ( physicalDevicePipelineRobustnessFeatures.pipelineRobustness == VK_FALSE )
			failMesages.push_back("pipelineRobustness");
	}

}

