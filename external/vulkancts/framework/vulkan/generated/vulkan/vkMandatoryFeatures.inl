/* WARNING: This is auto-generated file. Do not modify, since changes will
 * be lost! Modify the generating script instead.
 * This file was generated by /scripts/gen_framework.py
 */

bool canUseFeaturesStruct (const vector<VkExtensionProperties>& deviceExtensions, uint32_t usedApiVersion,
				const char* extension, const char* extensionPromotedFrom = nullptr)
{
	if (isCoreDeviceExtension(usedApiVersion, extension))
		return true;
	if (isExtensionStructSupported(deviceExtensions, RequiredExtension(extension)))
		return true;
	return extensionPromotedFrom && isExtensionStructSupported(deviceExtensions, RequiredExtension(extensionPromotedFrom));
}

bool checkBasicMandatoryFeatures(const vkt::Context& context)
{
	if (!context.isInstanceFunctionalitySupported("VK_KHR_get_physical_device_properties2"))
		TCU_THROW(NotSupportedError, "Extension VK_KHR_get_physical_device_properties2 is not present");

	VkPhysicalDevice					physicalDevice		= context.getPhysicalDevice();
	const InstanceInterface&			vki					= context.getInstanceInterface();
	const vector<VkExtensionProperties>	deviceExtensions	= enumerateDeviceExtensionProperties(vki, physicalDevice, nullptr);
	const uint32_t						usedApiVersion		= context.getUsedApiVersion();

	tcu::TestLog& log = context.getTestContext().getLog();
	vk::VkPhysicalDeviceFeatures2 coreFeatures;
	deMemset(&coreFeatures, 0, sizeof(coreFeatures));
	coreFeatures.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2;
	void** nextPtr = &coreFeatures.pNext;

	// VkPhysicalDevice16BitStorageFeatures,VkPhysicalDevice16BitStorageFeaturesKHR for ext [VK_KHR_16bit_storage] in APIs []

	vk::VkPhysicalDevice16BitStorageFeatures physicalDevice16BitStorageFeatures;
	deMemset(&physicalDevice16BitStorageFeatures, 0, sizeof(physicalDevice16BitStorageFeatures));

	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_KHR_16bit_storage"))
	{
		physicalDevice16BitStorageFeatures.sType = getStructureType<VkPhysicalDevice16BitStorageFeatures>();
		*nextPtr = &physicalDevice16BitStorageFeatures;
		nextPtr  = &physicalDevice16BitStorageFeatures.pNext;
	}

	// VkPhysicalDevice4444FormatsFeaturesEXT for ext [VK_EXT_4444_formats] in APIs []

	vk::VkPhysicalDevice4444FormatsFeaturesEXT physicalDevice4444FormatsFeaturesEXT;
	deMemset(&physicalDevice4444FormatsFeaturesEXT, 0, sizeof(physicalDevice4444FormatsFeaturesEXT));

	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_4444_formats"))
	{
		physicalDevice4444FormatsFeaturesEXT.sType = getStructureType<VkPhysicalDevice4444FormatsFeaturesEXT>();
		*nextPtr = &physicalDevice4444FormatsFeaturesEXT;
		nextPtr  = &physicalDevice4444FormatsFeaturesEXT.pNext;
	}

	// VkPhysicalDevice8BitStorageFeatures,VkPhysicalDevice8BitStorageFeaturesKHR for ext [VK_KHR_8bit_storage] in APIs []

	vk::VkPhysicalDevice8BitStorageFeatures physicalDevice8BitStorageFeatures;
	deMemset(&physicalDevice8BitStorageFeatures, 0, sizeof(physicalDevice8BitStorageFeatures));

	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_KHR_8bit_storage"))
	{
		physicalDevice8BitStorageFeatures.sType = getStructureType<VkPhysicalDevice8BitStorageFeatures>();
		*nextPtr = &physicalDevice8BitStorageFeatures;
		nextPtr  = &physicalDevice8BitStorageFeatures.pNext;
	}

	// VkPhysicalDeviceAccelerationStructureFeaturesKHR for ext [VK_KHR_acceleration_structure] in APIs []

	vk::VkPhysicalDeviceAccelerationStructureFeaturesKHR physicalDeviceAccelerationStructureFeaturesKHR;
	deMemset(&physicalDeviceAccelerationStructureFeaturesKHR, 0, sizeof(physicalDeviceAccelerationStructureFeaturesKHR));

	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_KHR_acceleration_structure"))
	{
		physicalDeviceAccelerationStructureFeaturesKHR.sType = getStructureType<VkPhysicalDeviceAccelerationStructureFeaturesKHR>();
		*nextPtr = &physicalDeviceAccelerationStructureFeaturesKHR;
		nextPtr  = &physicalDeviceAccelerationStructureFeaturesKHR.pNext;
	}

	// VkPhysicalDeviceAddressBindingReportFeaturesEXT for ext [VK_EXT_device_address_binding_report] in APIs []

	vk::VkPhysicalDeviceAddressBindingReportFeaturesEXT physicalDeviceAddressBindingReportFeaturesEXT;
	deMemset(&physicalDeviceAddressBindingReportFeaturesEXT, 0, sizeof(physicalDeviceAddressBindingReportFeaturesEXT));

	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_device_address_binding_report"))
	{
		physicalDeviceAddressBindingReportFeaturesEXT.sType = getStructureType<VkPhysicalDeviceAddressBindingReportFeaturesEXT>();
		*nextPtr = &physicalDeviceAddressBindingReportFeaturesEXT;
		nextPtr  = &physicalDeviceAddressBindingReportFeaturesEXT.pNext;
	}

	// VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT for ext [VK_EXT_attachment_feedback_loop_dynamic_state] in APIs [vulkan]

	vk::VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT physicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT;
	deMemset(&physicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT, 0, sizeof(physicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT));

	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_attachment_feedback_loop_dynamic_state"))
	{
		physicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT.sType = getStructureType<VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT>();
		*nextPtr = &physicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT;
		nextPtr  = &physicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT.pNext;
	}

	// VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT for ext [VK_EXT_attachment_feedback_loop_layout] in APIs [vulkan]

	vk::VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT physicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT;
	deMemset(&physicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT, 0, sizeof(physicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT));

	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_attachment_feedback_loop_layout"))
	{
		physicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT.sType = getStructureType<VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT>();
		*nextPtr = &physicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT;
		nextPtr  = &physicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT.pNext;
	}

	// VkPhysicalDeviceBorderColorSwizzleFeaturesEXT for ext [VK_EXT_border_color_swizzle] in APIs [vulkan]

	vk::VkPhysicalDeviceBorderColorSwizzleFeaturesEXT physicalDeviceBorderColorSwizzleFeaturesEXT;
	deMemset(&physicalDeviceBorderColorSwizzleFeaturesEXT, 0, sizeof(physicalDeviceBorderColorSwizzleFeaturesEXT));

	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_border_color_swizzle"))
	{
		physicalDeviceBorderColorSwizzleFeaturesEXT.sType = getStructureType<VkPhysicalDeviceBorderColorSwizzleFeaturesEXT>();
		*nextPtr = &physicalDeviceBorderColorSwizzleFeaturesEXT;
		nextPtr  = &physicalDeviceBorderColorSwizzleFeaturesEXT.pNext;
	}

	// VkPhysicalDeviceBufferDeviceAddressFeatures,VkPhysicalDeviceBufferDeviceAddressFeaturesKHR for ext [VK_KHR_buffer_device_address] in APIs []

	vk::VkPhysicalDeviceBufferDeviceAddressFeatures physicalDeviceBufferDeviceAddressFeatures;
	deMemset(&physicalDeviceBufferDeviceAddressFeatures, 0, sizeof(physicalDeviceBufferDeviceAddressFeatures));

	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_KHR_buffer_device_address"))
	{
		physicalDeviceBufferDeviceAddressFeatures.sType = getStructureType<VkPhysicalDeviceBufferDeviceAddressFeatures>();
		*nextPtr = &physicalDeviceBufferDeviceAddressFeatures;
		nextPtr  = &physicalDeviceBufferDeviceAddressFeatures.pNext;
	}

	// VkPhysicalDeviceColorWriteEnableFeaturesEXT for ext [VK_EXT_color_write_enable] in APIs []

	vk::VkPhysicalDeviceColorWriteEnableFeaturesEXT physicalDeviceColorWriteEnableFeaturesEXT;
	deMemset(&physicalDeviceColorWriteEnableFeaturesEXT, 0, sizeof(physicalDeviceColorWriteEnableFeaturesEXT));

	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_color_write_enable"))
	{
		physicalDeviceColorWriteEnableFeaturesEXT.sType = getStructureType<VkPhysicalDeviceColorWriteEnableFeaturesEXT>();
		*nextPtr = &physicalDeviceColorWriteEnableFeaturesEXT;
		nextPtr  = &physicalDeviceColorWriteEnableFeaturesEXT.pNext;
	}

	// VkPhysicalDeviceComputeShaderDerivativesFeaturesKHR,VkPhysicalDeviceComputeShaderDerivativesFeaturesNV for ext [VK_KHR_compute_shader_derivatives, VK_NV_compute_shader_derivatives] in APIs []

	vk::VkPhysicalDeviceComputeShaderDerivativesFeaturesKHR physicalDeviceComputeShaderDerivativesFeaturesKHR;
	deMemset(&physicalDeviceComputeShaderDerivativesFeaturesKHR, 0, sizeof(physicalDeviceComputeShaderDerivativesFeaturesKHR));

	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_KHR_compute_shader_derivatives", "VK_NV_compute_shader_derivatives"))
	{
		physicalDeviceComputeShaderDerivativesFeaturesKHR.sType = getStructureType<VkPhysicalDeviceComputeShaderDerivativesFeaturesKHR>();
		*nextPtr = &physicalDeviceComputeShaderDerivativesFeaturesKHR;
		nextPtr  = &physicalDeviceComputeShaderDerivativesFeaturesKHR.pNext;
	}

	// VkPhysicalDeviceConditionalRenderingFeaturesEXT for ext [VK_EXT_conditional_rendering] in APIs []

	vk::VkPhysicalDeviceConditionalRenderingFeaturesEXT physicalDeviceConditionalRenderingFeaturesEXT;
	deMemset(&physicalDeviceConditionalRenderingFeaturesEXT, 0, sizeof(physicalDeviceConditionalRenderingFeaturesEXT));

	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_conditional_rendering"))
	{
		physicalDeviceConditionalRenderingFeaturesEXT.sType = getStructureType<VkPhysicalDeviceConditionalRenderingFeaturesEXT>();
		*nextPtr = &physicalDeviceConditionalRenderingFeaturesEXT;
		nextPtr  = &physicalDeviceConditionalRenderingFeaturesEXT.pNext;
	}

	// VkPhysicalDeviceCooperativeMatrix2FeaturesNV for ext [VK_NV_cooperative_matrix2] in APIs [vulkan]

	vk::VkPhysicalDeviceCooperativeMatrix2FeaturesNV physicalDeviceCooperativeMatrix2FeaturesNV;
	deMemset(&physicalDeviceCooperativeMatrix2FeaturesNV, 0, sizeof(physicalDeviceCooperativeMatrix2FeaturesNV));

	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_NV_cooperative_matrix2"))
	{
		physicalDeviceCooperativeMatrix2FeaturesNV.sType = getStructureType<VkPhysicalDeviceCooperativeMatrix2FeaturesNV>();
		*nextPtr = &physicalDeviceCooperativeMatrix2FeaturesNV;
		nextPtr  = &physicalDeviceCooperativeMatrix2FeaturesNV.pNext;
	}

	// VkPhysicalDeviceCooperativeMatrixFeaturesKHR for ext [VK_KHR_cooperative_matrix] in APIs []

	vk::VkPhysicalDeviceCooperativeMatrixFeaturesKHR physicalDeviceCooperativeMatrixFeaturesKHR;
	deMemset(&physicalDeviceCooperativeMatrixFeaturesKHR, 0, sizeof(physicalDeviceCooperativeMatrixFeaturesKHR));

	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_KHR_cooperative_matrix"))
	{
		physicalDeviceCooperativeMatrixFeaturesKHR.sType = getStructureType<VkPhysicalDeviceCooperativeMatrixFeaturesKHR>();
		*nextPtr = &physicalDeviceCooperativeMatrixFeaturesKHR;
		nextPtr  = &physicalDeviceCooperativeMatrixFeaturesKHR.pNext;
	}

	// VkPhysicalDeviceCooperativeVectorFeaturesNV for ext [VK_NV_cooperative_vector] in APIs [vulkan]

	vk::VkPhysicalDeviceCooperativeVectorFeaturesNV physicalDeviceCooperativeVectorFeaturesNV;
	deMemset(&physicalDeviceCooperativeVectorFeaturesNV, 0, sizeof(physicalDeviceCooperativeVectorFeaturesNV));

	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_NV_cooperative_vector"))
	{
		physicalDeviceCooperativeVectorFeaturesNV.sType = getStructureType<VkPhysicalDeviceCooperativeVectorFeaturesNV>();
		*nextPtr = &physicalDeviceCooperativeVectorFeaturesNV;
		nextPtr  = &physicalDeviceCooperativeVectorFeaturesNV.pNext;
	}

	// VkPhysicalDeviceCustomBorderColorFeaturesEXT for ext [VK_EXT_custom_border_color] in APIs [vulkan, vulkansc]

	vk::VkPhysicalDeviceCustomBorderColorFeaturesEXT physicalDeviceCustomBorderColorFeaturesEXT;
	deMemset(&physicalDeviceCustomBorderColorFeaturesEXT, 0, sizeof(physicalDeviceCustomBorderColorFeaturesEXT));

	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_custom_border_color"))
	{
		physicalDeviceCustomBorderColorFeaturesEXT.sType = getStructureType<VkPhysicalDeviceCustomBorderColorFeaturesEXT>();
		*nextPtr = &physicalDeviceCustomBorderColorFeaturesEXT;
		nextPtr  = &physicalDeviceCustomBorderColorFeaturesEXT.pNext;
	}

	// VkPhysicalDeviceDepthBiasControlFeaturesEXT for ext [VK_EXT_depth_bias_control] in APIs [vulkan]

	vk::VkPhysicalDeviceDepthBiasControlFeaturesEXT physicalDeviceDepthBiasControlFeaturesEXT;
	deMemset(&physicalDeviceDepthBiasControlFeaturesEXT, 0, sizeof(physicalDeviceDepthBiasControlFeaturesEXT));

	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_depth_bias_control"))
	{
		physicalDeviceDepthBiasControlFeaturesEXT.sType = getStructureType<VkPhysicalDeviceDepthBiasControlFeaturesEXT>();
		*nextPtr = &physicalDeviceDepthBiasControlFeaturesEXT;
		nextPtr  = &physicalDeviceDepthBiasControlFeaturesEXT.pNext;
	}

	// VkPhysicalDeviceDepthClampControlFeaturesEXT for ext [VK_EXT_depth_clamp_control] in APIs []

	vk::VkPhysicalDeviceDepthClampControlFeaturesEXT physicalDeviceDepthClampControlFeaturesEXT;
	deMemset(&physicalDeviceDepthClampControlFeaturesEXT, 0, sizeof(physicalDeviceDepthClampControlFeaturesEXT));

	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_depth_clamp_control"))
	{
		physicalDeviceDepthClampControlFeaturesEXT.sType = getStructureType<VkPhysicalDeviceDepthClampControlFeaturesEXT>();
		*nextPtr = &physicalDeviceDepthClampControlFeaturesEXT;
		nextPtr  = &physicalDeviceDepthClampControlFeaturesEXT.pNext;
	}

	// VkPhysicalDeviceDepthClampZeroOneFeaturesKHR,VkPhysicalDeviceDepthClampZeroOneFeaturesEXT for ext [VK_EXT_depth_clamp_zero_one, VK_KHR_depth_clamp_zero_one] in APIs []

	vk::VkPhysicalDeviceDepthClampZeroOneFeaturesKHR physicalDeviceDepthClampZeroOneFeaturesKHR;
	deMemset(&physicalDeviceDepthClampZeroOneFeaturesKHR, 0, sizeof(physicalDeviceDepthClampZeroOneFeaturesKHR));

	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_depth_clamp_zero_one", "VK_KHR_depth_clamp_zero_one"))
	{
		physicalDeviceDepthClampZeroOneFeaturesKHR.sType = getStructureType<VkPhysicalDeviceDepthClampZeroOneFeaturesKHR>();
		*nextPtr = &physicalDeviceDepthClampZeroOneFeaturesKHR;
		nextPtr  = &physicalDeviceDepthClampZeroOneFeaturesKHR.pNext;
	}

	// VkPhysicalDeviceDepthClipControlFeaturesEXT for ext [VK_EXT_depth_clip_control] in APIs []

	vk::VkPhysicalDeviceDepthClipControlFeaturesEXT physicalDeviceDepthClipControlFeaturesEXT;
	deMemset(&physicalDeviceDepthClipControlFeaturesEXT, 0, sizeof(physicalDeviceDepthClipControlFeaturesEXT));

	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_depth_clip_control"))
	{
		physicalDeviceDepthClipControlFeaturesEXT.sType = getStructureType<VkPhysicalDeviceDepthClipControlFeaturesEXT>();
		*nextPtr = &physicalDeviceDepthClipControlFeaturesEXT;
		nextPtr  = &physicalDeviceDepthClipControlFeaturesEXT.pNext;
	}

	// VkPhysicalDeviceDepthClipEnableFeaturesEXT for ext [VK_EXT_depth_clip_enable] in APIs []

	vk::VkPhysicalDeviceDepthClipEnableFeaturesEXT physicalDeviceDepthClipEnableFeaturesEXT;
	deMemset(&physicalDeviceDepthClipEnableFeaturesEXT, 0, sizeof(physicalDeviceDepthClipEnableFeaturesEXT));

	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_depth_clip_enable"))
	{
		physicalDeviceDepthClipEnableFeaturesEXT.sType = getStructureType<VkPhysicalDeviceDepthClipEnableFeaturesEXT>();
		*nextPtr = &physicalDeviceDepthClipEnableFeaturesEXT;
		nextPtr  = &physicalDeviceDepthClipEnableFeaturesEXT.pNext;
	}

	// VkPhysicalDeviceDescriptorBufferFeaturesEXT for ext [VK_EXT_descriptor_buffer] in APIs []

	vk::VkPhysicalDeviceDescriptorBufferFeaturesEXT physicalDeviceDescriptorBufferFeaturesEXT;
	deMemset(&physicalDeviceDescriptorBufferFeaturesEXT, 0, sizeof(physicalDeviceDescriptorBufferFeaturesEXT));

	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_descriptor_buffer"))
	{
		physicalDeviceDescriptorBufferFeaturesEXT.sType = getStructureType<VkPhysicalDeviceDescriptorBufferFeaturesEXT>();
		*nextPtr = &physicalDeviceDescriptorBufferFeaturesEXT;
		nextPtr  = &physicalDeviceDescriptorBufferFeaturesEXT.pNext;
	}

	// VkPhysicalDeviceDescriptorIndexingFeatures,VkPhysicalDeviceDescriptorIndexingFeaturesEXT for ext [VK_EXT_descriptor_indexing] in APIs []

	vk::VkPhysicalDeviceDescriptorIndexingFeatures physicalDeviceDescriptorIndexingFeatures;
	deMemset(&physicalDeviceDescriptorIndexingFeatures, 0, sizeof(physicalDeviceDescriptorIndexingFeatures));

	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_descriptor_indexing"))
	{
		physicalDeviceDescriptorIndexingFeatures.sType = getStructureType<VkPhysicalDeviceDescriptorIndexingFeatures>();
		*nextPtr = &physicalDeviceDescriptorIndexingFeatures;
		nextPtr  = &physicalDeviceDescriptorIndexingFeatures.pNext;
	}

	// VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV for ext [VK_NV_device_generated_commands_compute] in APIs [vulkan]

	vk::VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV physicalDeviceDeviceGeneratedCommandsComputeFeaturesNV;
	deMemset(&physicalDeviceDeviceGeneratedCommandsComputeFeaturesNV, 0, sizeof(physicalDeviceDeviceGeneratedCommandsComputeFeaturesNV));

	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_NV_device_generated_commands_compute"))
	{
		physicalDeviceDeviceGeneratedCommandsComputeFeaturesNV.sType = getStructureType<VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV>();
		*nextPtr = &physicalDeviceDeviceGeneratedCommandsComputeFeaturesNV;
		nextPtr  = &physicalDeviceDeviceGeneratedCommandsComputeFeaturesNV.pNext;
	}

	// VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV for ext [VK_NV_device_generated_commands] in APIs [vulkan]

	vk::VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV physicalDeviceDeviceGeneratedCommandsFeaturesNV;
	deMemset(&physicalDeviceDeviceGeneratedCommandsFeaturesNV, 0, sizeof(physicalDeviceDeviceGeneratedCommandsFeaturesNV));

	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_NV_device_generated_commands"))
	{
		physicalDeviceDeviceGeneratedCommandsFeaturesNV.sType = getStructureType<VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV>();
		*nextPtr = &physicalDeviceDeviceGeneratedCommandsFeaturesNV;
		nextPtr  = &physicalDeviceDeviceGeneratedCommandsFeaturesNV.pNext;
	}

	// VkPhysicalDeviceDynamicRenderingFeatures,VkPhysicalDeviceDynamicRenderingFeaturesKHR for ext [VK_KHR_dynamic_rendering] in APIs [vulkan]

	vk::VkPhysicalDeviceDynamicRenderingFeatures physicalDeviceDynamicRenderingFeatures;
	deMemset(&physicalDeviceDynamicRenderingFeatures, 0, sizeof(physicalDeviceDynamicRenderingFeatures));

	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_KHR_dynamic_rendering"))
	{
		physicalDeviceDynamicRenderingFeatures.sType = getStructureType<VkPhysicalDeviceDynamicRenderingFeatures>();
		*nextPtr = &physicalDeviceDynamicRenderingFeatures;
		nextPtr  = &physicalDeviceDynamicRenderingFeatures.pNext;
	}

	// VkPhysicalDeviceDynamicRenderingLocalReadFeatures,VkPhysicalDeviceDynamicRenderingLocalReadFeaturesKHR for ext [VK_KHR_dynamic_rendering_local_read] in APIs [vulkan]

	vk::VkPhysicalDeviceDynamicRenderingLocalReadFeatures physicalDeviceDynamicRenderingLocalReadFeatures;
	deMemset(&physicalDeviceDynamicRenderingLocalReadFeatures, 0, sizeof(physicalDeviceDynamicRenderingLocalReadFeatures));

	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_KHR_dynamic_rendering_local_read"))
	{
		physicalDeviceDynamicRenderingLocalReadFeatures.sType = getStructureType<VkPhysicalDeviceDynamicRenderingLocalReadFeatures>();
		*nextPtr = &physicalDeviceDynamicRenderingLocalReadFeatures;
		nextPtr  = &physicalDeviceDynamicRenderingLocalReadFeatures.pNext;
	}

	// VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT for ext [VK_EXT_dynamic_rendering_unused_attachments] in APIs []

	vk::VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT physicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT;
	deMemset(&physicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT, 0, sizeof(physicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT));

	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_dynamic_rendering_unused_attachments"))
	{
		physicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT.sType = getStructureType<VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT>();
		*nextPtr = &physicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT;
		nextPtr  = &physicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT.pNext;
	}

	// VkPhysicalDeviceExtendedDynamicState2FeaturesEXT for ext [VK_EXT_extended_dynamic_state2] in APIs []

	vk::VkPhysicalDeviceExtendedDynamicState2FeaturesEXT physicalDeviceExtendedDynamicState2FeaturesEXT;
	deMemset(&physicalDeviceExtendedDynamicState2FeaturesEXT, 0, sizeof(physicalDeviceExtendedDynamicState2FeaturesEXT));

	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_extended_dynamic_state2"))
	{
		physicalDeviceExtendedDynamicState2FeaturesEXT.sType = getStructureType<VkPhysicalDeviceExtendedDynamicState2FeaturesEXT>();
		*nextPtr = &physicalDeviceExtendedDynamicState2FeaturesEXT;
		nextPtr  = &physicalDeviceExtendedDynamicState2FeaturesEXT.pNext;
	}

	// VkPhysicalDeviceExternalFormatResolveFeaturesANDROID for ext [VK_ANDROID_external_format_resolve] in APIs []

	vk::VkPhysicalDeviceExternalFormatResolveFeaturesANDROID physicalDeviceExternalFormatResolveFeaturesANDROID;
	deMemset(&physicalDeviceExternalFormatResolveFeaturesANDROID, 0, sizeof(physicalDeviceExternalFormatResolveFeaturesANDROID));

	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_ANDROID_external_format_resolve"))
	{
		physicalDeviceExternalFormatResolveFeaturesANDROID.sType = getStructureType<VkPhysicalDeviceExternalFormatResolveFeaturesANDROID>();
		*nextPtr = &physicalDeviceExternalFormatResolveFeaturesANDROID;
		nextPtr  = &physicalDeviceExternalFormatResolveFeaturesANDROID.pNext;
	}

	// VkPhysicalDeviceFaultFeaturesEXT for ext [VK_EXT_device_fault] in APIs []

	vk::VkPhysicalDeviceFaultFeaturesEXT physicalDeviceFaultFeaturesEXT;
	deMemset(&physicalDeviceFaultFeaturesEXT, 0, sizeof(physicalDeviceFaultFeaturesEXT));

	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_device_fault"))
	{
		physicalDeviceFaultFeaturesEXT.sType = getStructureType<VkPhysicalDeviceFaultFeaturesEXT>();
		*nextPtr = &physicalDeviceFaultFeaturesEXT;
		nextPtr  = &physicalDeviceFaultFeaturesEXT.pNext;
	}

	// VkPhysicalDeviceFragmentDensityMapFeaturesEXT for ext [VK_EXT_fragment_density_map] in APIs []

	vk::VkPhysicalDeviceFragmentDensityMapFeaturesEXT physicalDeviceFragmentDensityMapFeaturesEXT;
	deMemset(&physicalDeviceFragmentDensityMapFeaturesEXT, 0, sizeof(physicalDeviceFragmentDensityMapFeaturesEXT));

	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_fragment_density_map"))
	{
		physicalDeviceFragmentDensityMapFeaturesEXT.sType = getStructureType<VkPhysicalDeviceFragmentDensityMapFeaturesEXT>();
		*nextPtr = &physicalDeviceFragmentDensityMapFeaturesEXT;
		nextPtr  = &physicalDeviceFragmentDensityMapFeaturesEXT.pNext;
	}

	// VkPhysicalDeviceFragmentDensityMapOffsetFeaturesEXT,VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM for ext [VK_EXT_fragment_density_map_offset, VK_QCOM_fragment_density_map_offset] in APIs []

	vk::VkPhysicalDeviceFragmentDensityMapOffsetFeaturesEXT physicalDeviceFragmentDensityMapOffsetFeaturesEXT;
	deMemset(&physicalDeviceFragmentDensityMapOffsetFeaturesEXT, 0, sizeof(physicalDeviceFragmentDensityMapOffsetFeaturesEXT));

	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_fragment_density_map_offset", "VK_QCOM_fragment_density_map_offset"))
	{
		physicalDeviceFragmentDensityMapOffsetFeaturesEXT.sType = getStructureType<VkPhysicalDeviceFragmentDensityMapOffsetFeaturesEXT>();
		*nextPtr = &physicalDeviceFragmentDensityMapOffsetFeaturesEXT;
		nextPtr  = &physicalDeviceFragmentDensityMapOffsetFeaturesEXT.pNext;
	}

	// VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR,VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV,VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV for ext [VK_KHR_fragment_shader_barycentric, VK_NV_fragment_shader_barycentric] in APIs []

	vk::VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR physicalDeviceFragmentShaderBarycentricFeaturesKHR;
	deMemset(&physicalDeviceFragmentShaderBarycentricFeaturesKHR, 0, sizeof(physicalDeviceFragmentShaderBarycentricFeaturesKHR));

	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_KHR_fragment_shader_barycentric", "VK_NV_fragment_shader_barycentric"))
	{
		physicalDeviceFragmentShaderBarycentricFeaturesKHR.sType = getStructureType<VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR>();
		*nextPtr = &physicalDeviceFragmentShaderBarycentricFeaturesKHR;
		nextPtr  = &physicalDeviceFragmentShaderBarycentricFeaturesKHR.pNext;
	}

	// VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT for ext [VK_EXT_fragment_shader_interlock] in APIs []

	vk::VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT physicalDeviceFragmentShaderInterlockFeaturesEXT;
	deMemset(&physicalDeviceFragmentShaderInterlockFeaturesEXT, 0, sizeof(physicalDeviceFragmentShaderInterlockFeaturesEXT));

	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_fragment_shader_interlock"))
	{
		physicalDeviceFragmentShaderInterlockFeaturesEXT.sType = getStructureType<VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT>();
		*nextPtr = &physicalDeviceFragmentShaderInterlockFeaturesEXT;
		nextPtr  = &physicalDeviceFragmentShaderInterlockFeaturesEXT.pNext;
	}

	// VkPhysicalDeviceFragmentShadingRateFeaturesKHR for ext [VK_KHR_fragment_shading_rate] in APIs []

	vk::VkPhysicalDeviceFragmentShadingRateFeaturesKHR physicalDeviceFragmentShadingRateFeaturesKHR;
	deMemset(&physicalDeviceFragmentShadingRateFeaturesKHR, 0, sizeof(physicalDeviceFragmentShadingRateFeaturesKHR));

	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_KHR_fragment_shading_rate"))
	{
		physicalDeviceFragmentShadingRateFeaturesKHR.sType = getStructureType<VkPhysicalDeviceFragmentShadingRateFeaturesKHR>();
		*nextPtr = &physicalDeviceFragmentShadingRateFeaturesKHR;
		nextPtr  = &physicalDeviceFragmentShadingRateFeaturesKHR.pNext;
	}

	// VkPhysicalDeviceFrameBoundaryFeaturesEXT for ext [VK_EXT_frame_boundary] in APIs []

	vk::VkPhysicalDeviceFrameBoundaryFeaturesEXT physicalDeviceFrameBoundaryFeaturesEXT;
	deMemset(&physicalDeviceFrameBoundaryFeaturesEXT, 0, sizeof(physicalDeviceFrameBoundaryFeaturesEXT));

	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_frame_boundary"))
	{
		physicalDeviceFrameBoundaryFeaturesEXT.sType = getStructureType<VkPhysicalDeviceFrameBoundaryFeaturesEXT>();
		*nextPtr = &physicalDeviceFrameBoundaryFeaturesEXT;
		nextPtr  = &physicalDeviceFrameBoundaryFeaturesEXT.pNext;
	}

	// VkPhysicalDeviceGlobalPriorityQueryFeatures,VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR,VkPhysicalDeviceGlobalPriorityQueryFeaturesEXT for ext [VK_EXT_global_priority_query, VK_KHR_global_priority] in APIs []

	vk::VkPhysicalDeviceGlobalPriorityQueryFeatures physicalDeviceGlobalPriorityQueryFeatures;
	deMemset(&physicalDeviceGlobalPriorityQueryFeatures, 0, sizeof(physicalDeviceGlobalPriorityQueryFeatures));

	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_global_priority_query", "VK_KHR_global_priority"))
	{
		physicalDeviceGlobalPriorityQueryFeatures.sType = getStructureType<VkPhysicalDeviceGlobalPriorityQueryFeatures>();
		*nextPtr = &physicalDeviceGlobalPriorityQueryFeatures;
		nextPtr  = &physicalDeviceGlobalPriorityQueryFeatures.pNext;
	}

	// VkPhysicalDeviceHostQueryResetFeatures,VkPhysicalDeviceHostQueryResetFeaturesEXT for ext [VK_EXT_host_query_reset] in APIs []

	vk::VkPhysicalDeviceHostQueryResetFeatures physicalDeviceHostQueryResetFeatures;
	deMemset(&physicalDeviceHostQueryResetFeatures, 0, sizeof(physicalDeviceHostQueryResetFeatures));

	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_host_query_reset"))
	{
		physicalDeviceHostQueryResetFeatures.sType = getStructureType<VkPhysicalDeviceHostQueryResetFeatures>();
		*nextPtr = &physicalDeviceHostQueryResetFeatures;
		nextPtr  = &physicalDeviceHostQueryResetFeatures.pNext;
	}

	// VkPhysicalDeviceImage2DViewOf3DFeaturesEXT for ext [VK_EXT_image_2d_view_of_3d] in APIs [vulkan]

	vk::VkPhysicalDeviceImage2DViewOf3DFeaturesEXT physicalDeviceImage2DViewOf3DFeaturesEXT;
	deMemset(&physicalDeviceImage2DViewOf3DFeaturesEXT, 0, sizeof(physicalDeviceImage2DViewOf3DFeaturesEXT));

	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_image_2d_view_of_3d"))
	{
		physicalDeviceImage2DViewOf3DFeaturesEXT.sType = getStructureType<VkPhysicalDeviceImage2DViewOf3DFeaturesEXT>();
		*nextPtr = &physicalDeviceImage2DViewOf3DFeaturesEXT;
		nextPtr  = &physicalDeviceImage2DViewOf3DFeaturesEXT.pNext;
	}

	// VkPhysicalDeviceImageCompressionControlFeaturesEXT for ext [VK_EXT_image_compression_control] in APIs []

	vk::VkPhysicalDeviceImageCompressionControlFeaturesEXT physicalDeviceImageCompressionControlFeaturesEXT;
	deMemset(&physicalDeviceImageCompressionControlFeaturesEXT, 0, sizeof(physicalDeviceImageCompressionControlFeaturesEXT));

	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_image_compression_control"))
	{
		physicalDeviceImageCompressionControlFeaturesEXT.sType = getStructureType<VkPhysicalDeviceImageCompressionControlFeaturesEXT>();
		*nextPtr = &physicalDeviceImageCompressionControlFeaturesEXT;
		nextPtr  = &physicalDeviceImageCompressionControlFeaturesEXT.pNext;
	}

	// VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT for ext [VK_EXT_image_compression_control_swapchain] in APIs []

	vk::VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT physicalDeviceImageCompressionControlSwapchainFeaturesEXT;
	deMemset(&physicalDeviceImageCompressionControlSwapchainFeaturesEXT, 0, sizeof(physicalDeviceImageCompressionControlSwapchainFeaturesEXT));

	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_image_compression_control_swapchain"))
	{
		physicalDeviceImageCompressionControlSwapchainFeaturesEXT.sType = getStructureType<VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT>();
		*nextPtr = &physicalDeviceImageCompressionControlSwapchainFeaturesEXT;
		nextPtr  = &physicalDeviceImageCompressionControlSwapchainFeaturesEXT.pNext;
	}

	// VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT for ext [VK_EXT_image_sliced_view_of_3d] in APIs [vulkan]

	vk::VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT physicalDeviceImageSlicedViewOf3DFeaturesEXT;
	deMemset(&physicalDeviceImageSlicedViewOf3DFeaturesEXT, 0, sizeof(physicalDeviceImageSlicedViewOf3DFeaturesEXT));

	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_image_sliced_view_of_3d"))
	{
		physicalDeviceImageSlicedViewOf3DFeaturesEXT.sType = getStructureType<VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT>();
		*nextPtr = &physicalDeviceImageSlicedViewOf3DFeaturesEXT;
		nextPtr  = &physicalDeviceImageSlicedViewOf3DFeaturesEXT.pNext;
	}

	// VkPhysicalDeviceImagelessFramebufferFeatures,VkPhysicalDeviceImagelessFramebufferFeaturesKHR for ext [VK_KHR_imageless_framebuffer] in APIs []

	vk::VkPhysicalDeviceImagelessFramebufferFeatures physicalDeviceImagelessFramebufferFeatures;
	deMemset(&physicalDeviceImagelessFramebufferFeatures, 0, sizeof(physicalDeviceImagelessFramebufferFeatures));

	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_KHR_imageless_framebuffer"))
	{
		physicalDeviceImagelessFramebufferFeatures.sType = getStructureType<VkPhysicalDeviceImagelessFramebufferFeatures>();
		*nextPtr = &physicalDeviceImagelessFramebufferFeatures;
		nextPtr  = &physicalDeviceImagelessFramebufferFeatures.pNext;
	}

	// VkPhysicalDeviceIndexTypeUint8Features,VkPhysicalDeviceIndexTypeUint8FeaturesKHR,VkPhysicalDeviceIndexTypeUint8FeaturesEXT for ext [VK_EXT_index_type_uint8, VK_KHR_index_type_uint8] in APIs [vulkan, vulkansc]

	vk::VkPhysicalDeviceIndexTypeUint8Features physicalDeviceIndexTypeUint8Features;
	deMemset(&physicalDeviceIndexTypeUint8Features, 0, sizeof(physicalDeviceIndexTypeUint8Features));

	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_index_type_uint8", "VK_KHR_index_type_uint8"))
	{
		physicalDeviceIndexTypeUint8Features.sType = getStructureType<VkPhysicalDeviceIndexTypeUint8Features>();
		*nextPtr = &physicalDeviceIndexTypeUint8Features;
		nextPtr  = &physicalDeviceIndexTypeUint8Features.pNext;
	}

	// VkPhysicalDeviceInlineUniformBlockFeatures,VkPhysicalDeviceInlineUniformBlockFeaturesEXT for ext [VK_EXT_inline_uniform_block] in APIs []

	vk::VkPhysicalDeviceInlineUniformBlockFeatures physicalDeviceInlineUniformBlockFeatures;
	deMemset(&physicalDeviceInlineUniformBlockFeatures, 0, sizeof(physicalDeviceInlineUniformBlockFeatures));

	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_inline_uniform_block"))
	{
		physicalDeviceInlineUniformBlockFeatures.sType = getStructureType<VkPhysicalDeviceInlineUniformBlockFeatures>();
		*nextPtr = &physicalDeviceInlineUniformBlockFeatures;
		nextPtr  = &physicalDeviceInlineUniformBlockFeatures.pNext;
	}

	// VkPhysicalDeviceLegacyDitheringFeaturesEXT for ext [VK_EXT_legacy_dithering] in APIs []

	vk::VkPhysicalDeviceLegacyDitheringFeaturesEXT physicalDeviceLegacyDitheringFeaturesEXT;
	deMemset(&physicalDeviceLegacyDitheringFeaturesEXT, 0, sizeof(physicalDeviceLegacyDitheringFeaturesEXT));

	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_legacy_dithering"))
	{
		physicalDeviceLegacyDitheringFeaturesEXT.sType = getStructureType<VkPhysicalDeviceLegacyDitheringFeaturesEXT>();
		*nextPtr = &physicalDeviceLegacyDitheringFeaturesEXT;
		nextPtr  = &physicalDeviceLegacyDitheringFeaturesEXT.pNext;
	}

	// VkPhysicalDeviceLegacyVertexAttributesFeaturesEXT for ext [VK_EXT_legacy_vertex_attributes] in APIs []

	vk::VkPhysicalDeviceLegacyVertexAttributesFeaturesEXT physicalDeviceLegacyVertexAttributesFeaturesEXT;
	deMemset(&physicalDeviceLegacyVertexAttributesFeaturesEXT, 0, sizeof(physicalDeviceLegacyVertexAttributesFeaturesEXT));

	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_legacy_vertex_attributes"))
	{
		physicalDeviceLegacyVertexAttributesFeaturesEXT.sType = getStructureType<VkPhysicalDeviceLegacyVertexAttributesFeaturesEXT>();
		*nextPtr = &physicalDeviceLegacyVertexAttributesFeaturesEXT;
		nextPtr  = &physicalDeviceLegacyVertexAttributesFeaturesEXT.pNext;
	}

	// VkPhysicalDeviceLineRasterizationFeatures,VkPhysicalDeviceLineRasterizationFeaturesKHR,VkPhysicalDeviceLineRasterizationFeaturesEXT for ext [VK_EXT_line_rasterization, VK_KHR_line_rasterization] in APIs [vulkan, vulkansc]

	vk::VkPhysicalDeviceLineRasterizationFeatures physicalDeviceLineRasterizationFeatures;
	deMemset(&physicalDeviceLineRasterizationFeatures, 0, sizeof(physicalDeviceLineRasterizationFeatures));

	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_line_rasterization", "VK_KHR_line_rasterization"))
	{
		physicalDeviceLineRasterizationFeatures.sType = getStructureType<VkPhysicalDeviceLineRasterizationFeatures>();
		*nextPtr = &physicalDeviceLineRasterizationFeatures;
		nextPtr  = &physicalDeviceLineRasterizationFeatures.pNext;
	}

	// VkPhysicalDeviceMaintenance4Features,VkPhysicalDeviceMaintenance4FeaturesKHR for ext [VK_KHR_maintenance4] in APIs [vulkan]

	vk::VkPhysicalDeviceMaintenance4Features physicalDeviceMaintenance4Features;
	deMemset(&physicalDeviceMaintenance4Features, 0, sizeof(physicalDeviceMaintenance4Features));

	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_KHR_maintenance4"))
	{
		physicalDeviceMaintenance4Features.sType = getStructureType<VkPhysicalDeviceMaintenance4Features>();
		*nextPtr = &physicalDeviceMaintenance4Features;
		nextPtr  = &physicalDeviceMaintenance4Features.pNext;
	}

	// VkPhysicalDeviceMaintenance5Features,VkPhysicalDeviceMaintenance5FeaturesKHR for ext [VK_KHR_maintenance5] in APIs [vulkan]

	vk::VkPhysicalDeviceMaintenance5Features physicalDeviceMaintenance5Features;
	deMemset(&physicalDeviceMaintenance5Features, 0, sizeof(physicalDeviceMaintenance5Features));

	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_KHR_maintenance5"))
	{
		physicalDeviceMaintenance5Features.sType = getStructureType<VkPhysicalDeviceMaintenance5Features>();
		*nextPtr = &physicalDeviceMaintenance5Features;
		nextPtr  = &physicalDeviceMaintenance5Features.pNext;
	}

	// VkPhysicalDeviceMaintenance6Features,VkPhysicalDeviceMaintenance6FeaturesKHR for ext [VK_KHR_maintenance6] in APIs [vulkan]

	vk::VkPhysicalDeviceMaintenance6Features physicalDeviceMaintenance6Features;
	deMemset(&physicalDeviceMaintenance6Features, 0, sizeof(physicalDeviceMaintenance6Features));

	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_KHR_maintenance6"))
	{
		physicalDeviceMaintenance6Features.sType = getStructureType<VkPhysicalDeviceMaintenance6Features>();
		*nextPtr = &physicalDeviceMaintenance6Features;
		nextPtr  = &physicalDeviceMaintenance6Features.pNext;
	}

	// VkPhysicalDeviceMaintenance7FeaturesKHR for ext [VK_KHR_maintenance7] in APIs []

	vk::VkPhysicalDeviceMaintenance7FeaturesKHR physicalDeviceMaintenance7FeaturesKHR;
	deMemset(&physicalDeviceMaintenance7FeaturesKHR, 0, sizeof(physicalDeviceMaintenance7FeaturesKHR));

	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_KHR_maintenance7"))
	{
		physicalDeviceMaintenance7FeaturesKHR.sType = getStructureType<VkPhysicalDeviceMaintenance7FeaturesKHR>();
		*nextPtr = &physicalDeviceMaintenance7FeaturesKHR;
		nextPtr  = &physicalDeviceMaintenance7FeaturesKHR.pNext;
	}

	// VkPhysicalDeviceMaintenance8FeaturesKHR for ext [VK_KHR_maintenance8] in APIs []

	vk::VkPhysicalDeviceMaintenance8FeaturesKHR physicalDeviceMaintenance8FeaturesKHR;
	deMemset(&physicalDeviceMaintenance8FeaturesKHR, 0, sizeof(physicalDeviceMaintenance8FeaturesKHR));

	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_KHR_maintenance8"))
	{
		physicalDeviceMaintenance8FeaturesKHR.sType = getStructureType<VkPhysicalDeviceMaintenance8FeaturesKHR>();
		*nextPtr = &physicalDeviceMaintenance8FeaturesKHR;
		nextPtr  = &physicalDeviceMaintenance8FeaturesKHR.pNext;
	}

	// VkPhysicalDeviceMaintenance9FeaturesKHR for ext [VK_EXT_vertex_attribute_robustness, VK_KHR_maintenance9] in APIs []

	vk::VkPhysicalDeviceMaintenance9FeaturesKHR physicalDeviceMaintenance9FeaturesKHR;
	deMemset(&physicalDeviceMaintenance9FeaturesKHR, 0, sizeof(physicalDeviceMaintenance9FeaturesKHR));

	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_vertex_attribute_robustness", "VK_KHR_maintenance9"))
	{
		physicalDeviceMaintenance9FeaturesKHR.sType = getStructureType<VkPhysicalDeviceMaintenance9FeaturesKHR>();
		*nextPtr = &physicalDeviceMaintenance9FeaturesKHR;
		nextPtr  = &physicalDeviceMaintenance9FeaturesKHR.pNext;
	}

	// VkPhysicalDeviceMemoryPriorityFeaturesEXT for ext [VK_EXT_memory_priority] in APIs []

	vk::VkPhysicalDeviceMemoryPriorityFeaturesEXT physicalDeviceMemoryPriorityFeaturesEXT;
	deMemset(&physicalDeviceMemoryPriorityFeaturesEXT, 0, sizeof(physicalDeviceMemoryPriorityFeaturesEXT));

	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_memory_priority"))
	{
		physicalDeviceMemoryPriorityFeaturesEXT.sType = getStructureType<VkPhysicalDeviceMemoryPriorityFeaturesEXT>();
		*nextPtr = &physicalDeviceMemoryPriorityFeaturesEXT;
		nextPtr  = &physicalDeviceMemoryPriorityFeaturesEXT.pNext;
	}

	// VkPhysicalDeviceMeshShaderFeaturesEXT for ext [VK_EXT_mesh_shader] in APIs []

	vk::VkPhysicalDeviceMeshShaderFeaturesEXT physicalDeviceMeshShaderFeaturesEXT;
	deMemset(&physicalDeviceMeshShaderFeaturesEXT, 0, sizeof(physicalDeviceMeshShaderFeaturesEXT));

	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_mesh_shader"))
	{
		physicalDeviceMeshShaderFeaturesEXT.sType = getStructureType<VkPhysicalDeviceMeshShaderFeaturesEXT>();
		*nextPtr = &physicalDeviceMeshShaderFeaturesEXT;
		nextPtr  = &physicalDeviceMeshShaderFeaturesEXT.pNext;
	}

	// VkPhysicalDeviceMultiDrawFeaturesEXT for ext [VK_EXT_multi_draw] in APIs []

	vk::VkPhysicalDeviceMultiDrawFeaturesEXT physicalDeviceMultiDrawFeaturesEXT;
	deMemset(&physicalDeviceMultiDrawFeaturesEXT, 0, sizeof(physicalDeviceMultiDrawFeaturesEXT));

	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_multi_draw"))
	{
		physicalDeviceMultiDrawFeaturesEXT.sType = getStructureType<VkPhysicalDeviceMultiDrawFeaturesEXT>();
		*nextPtr = &physicalDeviceMultiDrawFeaturesEXT;
		nextPtr  = &physicalDeviceMultiDrawFeaturesEXT.pNext;
	}

	// VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT for ext [VK_EXT_multisampled_render_to_single_sampled] in APIs []

	vk::VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT physicalDeviceMultisampledRenderToSingleSampledFeaturesEXT;
	deMemset(&physicalDeviceMultisampledRenderToSingleSampledFeaturesEXT, 0, sizeof(physicalDeviceMultisampledRenderToSingleSampledFeaturesEXT));

	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_multisampled_render_to_single_sampled"))
	{
		physicalDeviceMultisampledRenderToSingleSampledFeaturesEXT.sType = getStructureType<VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT>();
		*nextPtr = &physicalDeviceMultisampledRenderToSingleSampledFeaturesEXT;
		nextPtr  = &physicalDeviceMultisampledRenderToSingleSampledFeaturesEXT.pNext;
	}

	// VkPhysicalDeviceMultiviewFeatures,VkPhysicalDeviceMultiviewFeaturesKHR for ext [VK_KHR_multiview] in APIs []

	vk::VkPhysicalDeviceMultiviewFeatures physicalDeviceMultiviewFeatures;
	deMemset(&physicalDeviceMultiviewFeatures, 0, sizeof(physicalDeviceMultiviewFeatures));

	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_KHR_multiview"))
	{
		physicalDeviceMultiviewFeatures.sType = getStructureType<VkPhysicalDeviceMultiviewFeatures>();
		*nextPtr = &physicalDeviceMultiviewFeatures;
		nextPtr  = &physicalDeviceMultiviewFeatures.pNext;
	}

	// VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT,VkPhysicalDeviceMutableDescriptorTypeFeaturesVALVE for ext [VK_EXT_mutable_descriptor_type, VK_VALVE_mutable_descriptor_type] in APIs []

	vk::VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT physicalDeviceMutableDescriptorTypeFeaturesEXT;
	deMemset(&physicalDeviceMutableDescriptorTypeFeaturesEXT, 0, sizeof(physicalDeviceMutableDescriptorTypeFeaturesEXT));

	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_mutable_descriptor_type", "VK_VALVE_mutable_descriptor_type"))
	{
		physicalDeviceMutableDescriptorTypeFeaturesEXT.sType = getStructureType<VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT>();
		*nextPtr = &physicalDeviceMutableDescriptorTypeFeaturesEXT;
		nextPtr  = &physicalDeviceMutableDescriptorTypeFeaturesEXT.pNext;
	}

	// VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT for ext [VK_EXT_non_seamless_cube_map] in APIs [vulkan]

	vk::VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT physicalDeviceNonSeamlessCubeMapFeaturesEXT;
	deMemset(&physicalDeviceNonSeamlessCubeMapFeaturesEXT, 0, sizeof(physicalDeviceNonSeamlessCubeMapFeaturesEXT));

	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_non_seamless_cube_map"))
	{
		physicalDeviceNonSeamlessCubeMapFeaturesEXT.sType = getStructureType<VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT>();
		*nextPtr = &physicalDeviceNonSeamlessCubeMapFeaturesEXT;
		nextPtr  = &physicalDeviceNonSeamlessCubeMapFeaturesEXT.pNext;
	}

	// VkPhysicalDeviceOpacityMicromapFeaturesEXT for ext [VK_EXT_opacity_micromap] in APIs [vulkan]

	vk::VkPhysicalDeviceOpacityMicromapFeaturesEXT physicalDeviceOpacityMicromapFeaturesEXT;
	deMemset(&physicalDeviceOpacityMicromapFeaturesEXT, 0, sizeof(physicalDeviceOpacityMicromapFeaturesEXT));

	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_opacity_micromap"))
	{
		physicalDeviceOpacityMicromapFeaturesEXT.sType = getStructureType<VkPhysicalDeviceOpacityMicromapFeaturesEXT>();
		*nextPtr = &physicalDeviceOpacityMicromapFeaturesEXT;
		nextPtr  = &physicalDeviceOpacityMicromapFeaturesEXT.pNext;
	}

	// VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT for ext [VK_EXT_pageable_device_local_memory] in APIs [vulkan]

	vk::VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT physicalDevicePageableDeviceLocalMemoryFeaturesEXT;
	deMemset(&physicalDevicePageableDeviceLocalMemoryFeaturesEXT, 0, sizeof(physicalDevicePageableDeviceLocalMemoryFeaturesEXT));

	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_pageable_device_local_memory"))
	{
		physicalDevicePageableDeviceLocalMemoryFeaturesEXT.sType = getStructureType<VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT>();
		*nextPtr = &physicalDevicePageableDeviceLocalMemoryFeaturesEXT;
		nextPtr  = &physicalDevicePageableDeviceLocalMemoryFeaturesEXT.pNext;
	}

	// VkPhysicalDevicePerformanceQueryFeaturesKHR for ext [VK_KHR_performance_query] in APIs [vulkan, vulkansc]

	vk::VkPhysicalDevicePerformanceQueryFeaturesKHR physicalDevicePerformanceQueryFeaturesKHR;
	deMemset(&physicalDevicePerformanceQueryFeaturesKHR, 0, sizeof(physicalDevicePerformanceQueryFeaturesKHR));

	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_KHR_performance_query"))
	{
		physicalDevicePerformanceQueryFeaturesKHR.sType = getStructureType<VkPhysicalDevicePerformanceQueryFeaturesKHR>();
		*nextPtr = &physicalDevicePerformanceQueryFeaturesKHR;
		nextPtr  = &physicalDevicePerformanceQueryFeaturesKHR.pNext;
	}

	// VkPhysicalDevicePipelineBinaryFeaturesKHR for ext [VK_KHR_pipeline_binary] in APIs []

	vk::VkPhysicalDevicePipelineBinaryFeaturesKHR physicalDevicePipelineBinaryFeaturesKHR;
	deMemset(&physicalDevicePipelineBinaryFeaturesKHR, 0, sizeof(physicalDevicePipelineBinaryFeaturesKHR));

	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_KHR_pipeline_binary"))
	{
		physicalDevicePipelineBinaryFeaturesKHR.sType = getStructureType<VkPhysicalDevicePipelineBinaryFeaturesKHR>();
		*nextPtr = &physicalDevicePipelineBinaryFeaturesKHR;
		nextPtr  = &physicalDevicePipelineBinaryFeaturesKHR.pNext;
	}

	// VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR for ext [VK_KHR_pipeline_executable_properties] in APIs []

	vk::VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR physicalDevicePipelineExecutablePropertiesFeaturesKHR;
	deMemset(&physicalDevicePipelineExecutablePropertiesFeaturesKHR, 0, sizeof(physicalDevicePipelineExecutablePropertiesFeaturesKHR));

	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_KHR_pipeline_executable_properties"))
	{
		physicalDevicePipelineExecutablePropertiesFeaturesKHR.sType = getStructureType<VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR>();
		*nextPtr = &physicalDevicePipelineExecutablePropertiesFeaturesKHR;
		nextPtr  = &physicalDevicePipelineExecutablePropertiesFeaturesKHR.pNext;
	}

	// VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT for ext [VK_EXT_pipeline_library_group_handles] in APIs []

	vk::VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT physicalDevicePipelineLibraryGroupHandlesFeaturesEXT;
	deMemset(&physicalDevicePipelineLibraryGroupHandlesFeaturesEXT, 0, sizeof(physicalDevicePipelineLibraryGroupHandlesFeaturesEXT));

	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_pipeline_library_group_handles"))
	{
		physicalDevicePipelineLibraryGroupHandlesFeaturesEXT.sType = getStructureType<VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT>();
		*nextPtr = &physicalDevicePipelineLibraryGroupHandlesFeaturesEXT;
		nextPtr  = &physicalDevicePipelineLibraryGroupHandlesFeaturesEXT.pNext;
	}

	// VkPhysicalDevicePipelineProtectedAccessFeatures,VkPhysicalDevicePipelineProtectedAccessFeaturesEXT for ext [VK_EXT_pipeline_protected_access] in APIs []

	vk::VkPhysicalDevicePipelineProtectedAccessFeatures physicalDevicePipelineProtectedAccessFeatures;
	deMemset(&physicalDevicePipelineProtectedAccessFeatures, 0, sizeof(physicalDevicePipelineProtectedAccessFeatures));

	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_pipeline_protected_access"))
	{
		physicalDevicePipelineProtectedAccessFeatures.sType = getStructureType<VkPhysicalDevicePipelineProtectedAccessFeatures>();
		*nextPtr = &physicalDevicePipelineProtectedAccessFeatures;
		nextPtr  = &physicalDevicePipelineProtectedAccessFeatures.pNext;
	}

	// VkPhysicalDevicePresentId2FeaturesKHR for ext [VK_KHR_present_id2] in APIs []

	vk::VkPhysicalDevicePresentId2FeaturesKHR physicalDevicePresentId2FeaturesKHR;
	deMemset(&physicalDevicePresentId2FeaturesKHR, 0, sizeof(physicalDevicePresentId2FeaturesKHR));

	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_KHR_present_id2"))
	{
		physicalDevicePresentId2FeaturesKHR.sType = getStructureType<VkPhysicalDevicePresentId2FeaturesKHR>();
		*nextPtr = &physicalDevicePresentId2FeaturesKHR;
		nextPtr  = &physicalDevicePresentId2FeaturesKHR.pNext;
	}

	// VkPhysicalDevicePresentIdFeaturesKHR for ext [VK_KHR_present_id] in APIs []

	vk::VkPhysicalDevicePresentIdFeaturesKHR physicalDevicePresentIdFeaturesKHR;
	deMemset(&physicalDevicePresentIdFeaturesKHR, 0, sizeof(physicalDevicePresentIdFeaturesKHR));

	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_KHR_present_id"))
	{
		physicalDevicePresentIdFeaturesKHR.sType = getStructureType<VkPhysicalDevicePresentIdFeaturesKHR>();
		*nextPtr = &physicalDevicePresentIdFeaturesKHR;
		nextPtr  = &physicalDevicePresentIdFeaturesKHR.pNext;
	}

	// VkPhysicalDevicePresentModeFifoLatestReadyFeaturesKHR,VkPhysicalDevicePresentModeFifoLatestReadyFeaturesEXT for ext [VK_EXT_present_mode_fifo_latest_ready, VK_KHR_present_mode_fifo_latest_ready] in APIs []

	vk::VkPhysicalDevicePresentModeFifoLatestReadyFeaturesKHR physicalDevicePresentModeFifoLatestReadyFeaturesKHR;
	deMemset(&physicalDevicePresentModeFifoLatestReadyFeaturesKHR, 0, sizeof(physicalDevicePresentModeFifoLatestReadyFeaturesKHR));

	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_present_mode_fifo_latest_ready", "VK_KHR_present_mode_fifo_latest_ready"))
	{
		physicalDevicePresentModeFifoLatestReadyFeaturesKHR.sType = getStructureType<VkPhysicalDevicePresentModeFifoLatestReadyFeaturesKHR>();
		*nextPtr = &physicalDevicePresentModeFifoLatestReadyFeaturesKHR;
		nextPtr  = &physicalDevicePresentModeFifoLatestReadyFeaturesKHR.pNext;
	}

	// VkPhysicalDevicePresentWait2FeaturesKHR for ext [VK_KHR_present_wait2] in APIs []

	vk::VkPhysicalDevicePresentWait2FeaturesKHR physicalDevicePresentWait2FeaturesKHR;
	deMemset(&physicalDevicePresentWait2FeaturesKHR, 0, sizeof(physicalDevicePresentWait2FeaturesKHR));

	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_KHR_present_wait2"))
	{
		physicalDevicePresentWait2FeaturesKHR.sType = getStructureType<VkPhysicalDevicePresentWait2FeaturesKHR>();
		*nextPtr = &physicalDevicePresentWait2FeaturesKHR;
		nextPtr  = &physicalDevicePresentWait2FeaturesKHR.pNext;
	}

	// VkPhysicalDevicePresentWaitFeaturesKHR for ext [VK_KHR_present_wait] in APIs []

	vk::VkPhysicalDevicePresentWaitFeaturesKHR physicalDevicePresentWaitFeaturesKHR;
	deMemset(&physicalDevicePresentWaitFeaturesKHR, 0, sizeof(physicalDevicePresentWaitFeaturesKHR));

	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_KHR_present_wait"))
	{
		physicalDevicePresentWaitFeaturesKHR.sType = getStructureType<VkPhysicalDevicePresentWaitFeaturesKHR>();
		*nextPtr = &physicalDevicePresentWaitFeaturesKHR;
		nextPtr  = &physicalDevicePresentWaitFeaturesKHR.pNext;
	}

	// VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT for ext [VK_EXT_primitive_topology_list_restart] in APIs [vulkan]

	vk::VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT physicalDevicePrimitiveTopologyListRestartFeaturesEXT;
	deMemset(&physicalDevicePrimitiveTopologyListRestartFeaturesEXT, 0, sizeof(physicalDevicePrimitiveTopologyListRestartFeaturesEXT));

	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_primitive_topology_list_restart"))
	{
		physicalDevicePrimitiveTopologyListRestartFeaturesEXT.sType = getStructureType<VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT>();
		*nextPtr = &physicalDevicePrimitiveTopologyListRestartFeaturesEXT;
		nextPtr  = &physicalDevicePrimitiveTopologyListRestartFeaturesEXT.pNext;
	}

	// VkPhysicalDeviceRawAccessChainsFeaturesNV for ext [VK_NV_raw_access_chains] in APIs []

	vk::VkPhysicalDeviceRawAccessChainsFeaturesNV physicalDeviceRawAccessChainsFeaturesNV;
	deMemset(&physicalDeviceRawAccessChainsFeaturesNV, 0, sizeof(physicalDeviceRawAccessChainsFeaturesNV));

	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_NV_raw_access_chains"))
	{
		physicalDeviceRawAccessChainsFeaturesNV.sType = getStructureType<VkPhysicalDeviceRawAccessChainsFeaturesNV>();
		*nextPtr = &physicalDeviceRawAccessChainsFeaturesNV;
		nextPtr  = &physicalDeviceRawAccessChainsFeaturesNV.pNext;
	}

	// VkPhysicalDeviceRayQueryFeaturesKHR for ext [VK_KHR_ray_query] in APIs []

	vk::VkPhysicalDeviceRayQueryFeaturesKHR physicalDeviceRayQueryFeaturesKHR;
	deMemset(&physicalDeviceRayQueryFeaturesKHR, 0, sizeof(physicalDeviceRayQueryFeaturesKHR));

	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_KHR_ray_query"))
	{
		physicalDeviceRayQueryFeaturesKHR.sType = getStructureType<VkPhysicalDeviceRayQueryFeaturesKHR>();
		*nextPtr = &physicalDeviceRayQueryFeaturesKHR;
		nextPtr  = &physicalDeviceRayQueryFeaturesKHR.pNext;
	}

	// VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR for ext [VK_KHR_ray_tracing_maintenance1] in APIs []

	vk::VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR physicalDeviceRayTracingMaintenance1FeaturesKHR;
	deMemset(&physicalDeviceRayTracingMaintenance1FeaturesKHR, 0, sizeof(physicalDeviceRayTracingMaintenance1FeaturesKHR));

	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_KHR_ray_tracing_maintenance1"))
	{
		physicalDeviceRayTracingMaintenance1FeaturesKHR.sType = getStructureType<VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR>();
		*nextPtr = &physicalDeviceRayTracingMaintenance1FeaturesKHR;
		nextPtr  = &physicalDeviceRayTracingMaintenance1FeaturesKHR.pNext;
	}

	// VkPhysicalDeviceRayTracingPipelineFeaturesKHR for ext [VK_KHR_ray_tracing_pipeline] in APIs []

	vk::VkPhysicalDeviceRayTracingPipelineFeaturesKHR physicalDeviceRayTracingPipelineFeaturesKHR;
	deMemset(&physicalDeviceRayTracingPipelineFeaturesKHR, 0, sizeof(physicalDeviceRayTracingPipelineFeaturesKHR));

	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_KHR_ray_tracing_pipeline"))
	{
		physicalDeviceRayTracingPipelineFeaturesKHR.sType = getStructureType<VkPhysicalDeviceRayTracingPipelineFeaturesKHR>();
		*nextPtr = &physicalDeviceRayTracingPipelineFeaturesKHR;
		nextPtr  = &physicalDeviceRayTracingPipelineFeaturesKHR.pNext;
	}

	// VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR for ext [VK_KHR_ray_tracing_position_fetch] in APIs []

	vk::VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR physicalDeviceRayTracingPositionFetchFeaturesKHR;
	deMemset(&physicalDeviceRayTracingPositionFetchFeaturesKHR, 0, sizeof(physicalDeviceRayTracingPositionFetchFeaturesKHR));

	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_KHR_ray_tracing_position_fetch"))
	{
		physicalDeviceRayTracingPositionFetchFeaturesKHR.sType = getStructureType<VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR>();
		*nextPtr = &physicalDeviceRayTracingPositionFetchFeaturesKHR;
		nextPtr  = &physicalDeviceRayTracingPositionFetchFeaturesKHR.pNext;
	}

	// VkPhysicalDeviceRobustness2FeaturesKHR,VkPhysicalDeviceRobustness2FeaturesEXT for ext [VK_EXT_robustness2, VK_KHR_robustness2] in APIs []

	vk::VkPhysicalDeviceRobustness2FeaturesKHR physicalDeviceRobustness2FeaturesKHR;
	deMemset(&physicalDeviceRobustness2FeaturesKHR, 0, sizeof(physicalDeviceRobustness2FeaturesKHR));

	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_robustness2", "VK_KHR_robustness2"))
	{
		physicalDeviceRobustness2FeaturesKHR.sType = getStructureType<VkPhysicalDeviceRobustness2FeaturesKHR>();
		*nextPtr = &physicalDeviceRobustness2FeaturesKHR;
		nextPtr  = &physicalDeviceRobustness2FeaturesKHR.pNext;
	}

	// VkPhysicalDeviceSamplerYcbcrConversionFeatures,VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR for ext [VK_KHR_sampler_ycbcr_conversion] in APIs []

	vk::VkPhysicalDeviceSamplerYcbcrConversionFeatures physicalDeviceSamplerYcbcrConversionFeatures;
	deMemset(&physicalDeviceSamplerYcbcrConversionFeatures, 0, sizeof(physicalDeviceSamplerYcbcrConversionFeatures));

	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_KHR_sampler_ycbcr_conversion"))
	{
		physicalDeviceSamplerYcbcrConversionFeatures.sType = getStructureType<VkPhysicalDeviceSamplerYcbcrConversionFeatures>();
		*nextPtr = &physicalDeviceSamplerYcbcrConversionFeatures;
		nextPtr  = &physicalDeviceSamplerYcbcrConversionFeatures.pNext;
	}

	// VkPhysicalDeviceScalarBlockLayoutFeatures,VkPhysicalDeviceScalarBlockLayoutFeaturesEXT for ext [VK_EXT_scalar_block_layout] in APIs []

	vk::VkPhysicalDeviceScalarBlockLayoutFeatures physicalDeviceScalarBlockLayoutFeatures;
	deMemset(&physicalDeviceScalarBlockLayoutFeatures, 0, sizeof(physicalDeviceScalarBlockLayoutFeatures));

	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_scalar_block_layout"))
	{
		physicalDeviceScalarBlockLayoutFeatures.sType = getStructureType<VkPhysicalDeviceScalarBlockLayoutFeatures>();
		*nextPtr = &physicalDeviceScalarBlockLayoutFeatures;
		nextPtr  = &physicalDeviceScalarBlockLayoutFeatures.pNext;
	}

	// VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures,VkPhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHR for ext [VK_KHR_separate_depth_stencil_layouts] in APIs []

	vk::VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures physicalDeviceSeparateDepthStencilLayoutsFeatures;
	deMemset(&physicalDeviceSeparateDepthStencilLayoutsFeatures, 0, sizeof(physicalDeviceSeparateDepthStencilLayoutsFeatures));

	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_KHR_separate_depth_stencil_layouts"))
	{
		physicalDeviceSeparateDepthStencilLayoutsFeatures.sType = getStructureType<VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures>();
		*nextPtr = &physicalDeviceSeparateDepthStencilLayoutsFeatures;
		nextPtr  = &physicalDeviceSeparateDepthStencilLayoutsFeatures.pNext;
	}

	// VkPhysicalDeviceShaderAtomicFloat16VectorFeaturesNV for ext [VK_NV_shader_atomic_float16_vector] in APIs []

	vk::VkPhysicalDeviceShaderAtomicFloat16VectorFeaturesNV physicalDeviceShaderAtomicFloat16VectorFeaturesNV;
	deMemset(&physicalDeviceShaderAtomicFloat16VectorFeaturesNV, 0, sizeof(physicalDeviceShaderAtomicFloat16VectorFeaturesNV));

	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_NV_shader_atomic_float16_vector"))
	{
		physicalDeviceShaderAtomicFloat16VectorFeaturesNV.sType = getStructureType<VkPhysicalDeviceShaderAtomicFloat16VectorFeaturesNV>();
		*nextPtr = &physicalDeviceShaderAtomicFloat16VectorFeaturesNV;
		nextPtr  = &physicalDeviceShaderAtomicFloat16VectorFeaturesNV.pNext;
	}

	// VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT for ext [VK_EXT_shader_atomic_float2] in APIs []

	vk::VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT physicalDeviceShaderAtomicFloat2FeaturesEXT;
	deMemset(&physicalDeviceShaderAtomicFloat2FeaturesEXT, 0, sizeof(physicalDeviceShaderAtomicFloat2FeaturesEXT));

	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_shader_atomic_float2"))
	{
		physicalDeviceShaderAtomicFloat2FeaturesEXT.sType = getStructureType<VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT>();
		*nextPtr = &physicalDeviceShaderAtomicFloat2FeaturesEXT;
		nextPtr  = &physicalDeviceShaderAtomicFloat2FeaturesEXT.pNext;
	}

	// VkPhysicalDeviceShaderAtomicFloatFeaturesEXT for ext [VK_EXT_shader_atomic_float] in APIs [vulkan, vulkansc]

	vk::VkPhysicalDeviceShaderAtomicFloatFeaturesEXT physicalDeviceShaderAtomicFloatFeaturesEXT;
	deMemset(&physicalDeviceShaderAtomicFloatFeaturesEXT, 0, sizeof(physicalDeviceShaderAtomicFloatFeaturesEXT));

	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_shader_atomic_float"))
	{
		physicalDeviceShaderAtomicFloatFeaturesEXT.sType = getStructureType<VkPhysicalDeviceShaderAtomicFloatFeaturesEXT>();
		*nextPtr = &physicalDeviceShaderAtomicFloatFeaturesEXT;
		nextPtr  = &physicalDeviceShaderAtomicFloatFeaturesEXT.pNext;
	}

	// VkPhysicalDeviceShaderAtomicInt64Features,VkPhysicalDeviceShaderAtomicInt64FeaturesKHR for ext [VK_KHR_shader_atomic_int64] in APIs []

	vk::VkPhysicalDeviceShaderAtomicInt64Features physicalDeviceShaderAtomicInt64Features;
	deMemset(&physicalDeviceShaderAtomicInt64Features, 0, sizeof(physicalDeviceShaderAtomicInt64Features));

	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_KHR_shader_atomic_int64"))
	{
		physicalDeviceShaderAtomicInt64Features.sType = getStructureType<VkPhysicalDeviceShaderAtomicInt64Features>();
		*nextPtr = &physicalDeviceShaderAtomicInt64Features;
		nextPtr  = &physicalDeviceShaderAtomicInt64Features.pNext;
	}

	// VkPhysicalDeviceShaderBfloat16FeaturesKHR for ext [VK_KHR_shader_bfloat16] in APIs []

	vk::VkPhysicalDeviceShaderBfloat16FeaturesKHR physicalDeviceShaderBfloat16FeaturesKHR;
	deMemset(&physicalDeviceShaderBfloat16FeaturesKHR, 0, sizeof(physicalDeviceShaderBfloat16FeaturesKHR));

	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_KHR_shader_bfloat16"))
	{
		physicalDeviceShaderBfloat16FeaturesKHR.sType = getStructureType<VkPhysicalDeviceShaderBfloat16FeaturesKHR>();
		*nextPtr = &physicalDeviceShaderBfloat16FeaturesKHR;
		nextPtr  = &physicalDeviceShaderBfloat16FeaturesKHR.pNext;
	}

	// VkPhysicalDeviceShaderClockFeaturesKHR for ext [VK_KHR_shader_clock] in APIs [vulkan, vulkansc]

	vk::VkPhysicalDeviceShaderClockFeaturesKHR physicalDeviceShaderClockFeaturesKHR;
	deMemset(&physicalDeviceShaderClockFeaturesKHR, 0, sizeof(physicalDeviceShaderClockFeaturesKHR));

	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_KHR_shader_clock"))
	{
		physicalDeviceShaderClockFeaturesKHR.sType = getStructureType<VkPhysicalDeviceShaderClockFeaturesKHR>();
		*nextPtr = &physicalDeviceShaderClockFeaturesKHR;
		nextPtr  = &physicalDeviceShaderClockFeaturesKHR.pNext;
	}

	// VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures,VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT for ext [VK_EXT_shader_demote_to_helper_invocation] in APIs []

	vk::VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures physicalDeviceShaderDemoteToHelperInvocationFeatures;
	deMemset(&physicalDeviceShaderDemoteToHelperInvocationFeatures, 0, sizeof(physicalDeviceShaderDemoteToHelperInvocationFeatures));

	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_shader_demote_to_helper_invocation"))
	{
		physicalDeviceShaderDemoteToHelperInvocationFeatures.sType = getStructureType<VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures>();
		*nextPtr = &physicalDeviceShaderDemoteToHelperInvocationFeatures;
		nextPtr  = &physicalDeviceShaderDemoteToHelperInvocationFeatures.pNext;
	}

	// VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD for ext [VK_AMD_shader_early_and_late_fragment_tests] in APIs []

	vk::VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD physicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD;
	deMemset(&physicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD, 0, sizeof(physicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD));

	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_AMD_shader_early_and_late_fragment_tests"))
	{
		physicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD.sType = getStructureType<VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD>();
		*nextPtr = &physicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD;
		nextPtr  = &physicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD.pNext;
	}

	// VkPhysicalDeviceShaderExpectAssumeFeatures,VkPhysicalDeviceShaderExpectAssumeFeaturesKHR for ext [VK_KHR_shader_expect_assume] in APIs [vulkan]

	vk::VkPhysicalDeviceShaderExpectAssumeFeatures physicalDeviceShaderExpectAssumeFeatures;
	deMemset(&physicalDeviceShaderExpectAssumeFeatures, 0, sizeof(physicalDeviceShaderExpectAssumeFeatures));

	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_KHR_shader_expect_assume"))
	{
		physicalDeviceShaderExpectAssumeFeatures.sType = getStructureType<VkPhysicalDeviceShaderExpectAssumeFeatures>();
		*nextPtr = &physicalDeviceShaderExpectAssumeFeatures;
		nextPtr  = &physicalDeviceShaderExpectAssumeFeatures.pNext;
	}

	// VkPhysicalDeviceShaderFloat16Int8Features,VkPhysicalDeviceShaderFloat16Int8FeaturesKHR,VkPhysicalDeviceFloat16Int8FeaturesKHR for ext [VK_KHR_shader_float16_int8] in APIs []

	vk::VkPhysicalDeviceShaderFloat16Int8Features physicalDeviceShaderFloat16Int8Features;
	deMemset(&physicalDeviceShaderFloat16Int8Features, 0, sizeof(physicalDeviceShaderFloat16Int8Features));

	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_KHR_shader_float16_int8"))
	{
		physicalDeviceShaderFloat16Int8Features.sType = getStructureType<VkPhysicalDeviceShaderFloat16Int8Features>();
		*nextPtr = &physicalDeviceShaderFloat16Int8Features;
		nextPtr  = &physicalDeviceShaderFloat16Int8Features.pNext;
	}

	// VkPhysicalDeviceShaderFloat8FeaturesEXT for ext [VK_EXT_shader_float8] in APIs []

	vk::VkPhysicalDeviceShaderFloat8FeaturesEXT physicalDeviceShaderFloat8FeaturesEXT;
	deMemset(&physicalDeviceShaderFloat8FeaturesEXT, 0, sizeof(physicalDeviceShaderFloat8FeaturesEXT));

	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_shader_float8"))
	{
		physicalDeviceShaderFloat8FeaturesEXT.sType = getStructureType<VkPhysicalDeviceShaderFloat8FeaturesEXT>();
		*nextPtr = &physicalDeviceShaderFloat8FeaturesEXT;
		nextPtr  = &physicalDeviceShaderFloat8FeaturesEXT.pNext;
	}

	// VkPhysicalDeviceShaderFloatControls2Features,VkPhysicalDeviceShaderFloatControls2FeaturesKHR for ext [VK_KHR_shader_float_controls2] in APIs [vulkan]

	vk::VkPhysicalDeviceShaderFloatControls2Features physicalDeviceShaderFloatControls2Features;
	deMemset(&physicalDeviceShaderFloatControls2Features, 0, sizeof(physicalDeviceShaderFloatControls2Features));

	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_KHR_shader_float_controls2"))
	{
		physicalDeviceShaderFloatControls2Features.sType = getStructureType<VkPhysicalDeviceShaderFloatControls2Features>();
		*nextPtr = &physicalDeviceShaderFloatControls2Features;
		nextPtr  = &physicalDeviceShaderFloatControls2Features.pNext;
	}

	// VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT for ext [VK_EXT_shader_image_atomic_int64] in APIs [vulkan, vulkansc]

	vk::VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT physicalDeviceShaderImageAtomicInt64FeaturesEXT;
	deMemset(&physicalDeviceShaderImageAtomicInt64FeaturesEXT, 0, sizeof(physicalDeviceShaderImageAtomicInt64FeaturesEXT));

	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_shader_image_atomic_int64"))
	{
		physicalDeviceShaderImageAtomicInt64FeaturesEXT.sType = getStructureType<VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT>();
		*nextPtr = &physicalDeviceShaderImageAtomicInt64FeaturesEXT;
		nextPtr  = &physicalDeviceShaderImageAtomicInt64FeaturesEXT.pNext;
	}

	// VkPhysicalDeviceShaderIntegerDotProductFeatures,VkPhysicalDeviceShaderIntegerDotProductFeaturesKHR for ext [VK_KHR_shader_integer_dot_product] in APIs [vulkan]

	vk::VkPhysicalDeviceShaderIntegerDotProductFeatures physicalDeviceShaderIntegerDotProductFeatures;
	deMemset(&physicalDeviceShaderIntegerDotProductFeatures, 0, sizeof(physicalDeviceShaderIntegerDotProductFeatures));

	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_KHR_shader_integer_dot_product"))
	{
		physicalDeviceShaderIntegerDotProductFeatures.sType = getStructureType<VkPhysicalDeviceShaderIntegerDotProductFeatures>();
		*nextPtr = &physicalDeviceShaderIntegerDotProductFeatures;
		nextPtr  = &physicalDeviceShaderIntegerDotProductFeatures.pNext;
	}

	// VkPhysicalDeviceShaderMaximalReconvergenceFeaturesKHR for ext [VK_KHR_shader_maximal_reconvergence] in APIs []

	vk::VkPhysicalDeviceShaderMaximalReconvergenceFeaturesKHR physicalDeviceShaderMaximalReconvergenceFeaturesKHR;
	deMemset(&physicalDeviceShaderMaximalReconvergenceFeaturesKHR, 0, sizeof(physicalDeviceShaderMaximalReconvergenceFeaturesKHR));

	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_KHR_shader_maximal_reconvergence"))
	{
		physicalDeviceShaderMaximalReconvergenceFeaturesKHR.sType = getStructureType<VkPhysicalDeviceShaderMaximalReconvergenceFeaturesKHR>();
		*nextPtr = &physicalDeviceShaderMaximalReconvergenceFeaturesKHR;
		nextPtr  = &physicalDeviceShaderMaximalReconvergenceFeaturesKHR.pNext;
	}

	// VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT for ext [VK_EXT_shader_module_identifier] in APIs []

	vk::VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT physicalDeviceShaderModuleIdentifierFeaturesEXT;
	deMemset(&physicalDeviceShaderModuleIdentifierFeaturesEXT, 0, sizeof(physicalDeviceShaderModuleIdentifierFeaturesEXT));

	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_shader_module_identifier"))
	{
		physicalDeviceShaderModuleIdentifierFeaturesEXT.sType = getStructureType<VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT>();
		*nextPtr = &physicalDeviceShaderModuleIdentifierFeaturesEXT;
		nextPtr  = &physicalDeviceShaderModuleIdentifierFeaturesEXT.pNext;
	}

	// VkPhysicalDeviceShaderObjectFeaturesEXT for ext [VK_EXT_shader_object] in APIs []

	vk::VkPhysicalDeviceShaderObjectFeaturesEXT physicalDeviceShaderObjectFeaturesEXT;
	deMemset(&physicalDeviceShaderObjectFeaturesEXT, 0, sizeof(physicalDeviceShaderObjectFeaturesEXT));

	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_shader_object"))
	{
		physicalDeviceShaderObjectFeaturesEXT.sType = getStructureType<VkPhysicalDeviceShaderObjectFeaturesEXT>();
		*nextPtr = &physicalDeviceShaderObjectFeaturesEXT;
		nextPtr  = &physicalDeviceShaderObjectFeaturesEXT.pNext;
	}

	// VkPhysicalDeviceShaderQuadControlFeaturesKHR for ext [VK_KHR_shader_quad_control] in APIs []

	vk::VkPhysicalDeviceShaderQuadControlFeaturesKHR physicalDeviceShaderQuadControlFeaturesKHR;
	deMemset(&physicalDeviceShaderQuadControlFeaturesKHR, 0, sizeof(physicalDeviceShaderQuadControlFeaturesKHR));

	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_KHR_shader_quad_control"))
	{
		physicalDeviceShaderQuadControlFeaturesKHR.sType = getStructureType<VkPhysicalDeviceShaderQuadControlFeaturesKHR>();
		*nextPtr = &physicalDeviceShaderQuadControlFeaturesKHR;
		nextPtr  = &physicalDeviceShaderQuadControlFeaturesKHR.pNext;
	}

	// VkPhysicalDeviceShaderRelaxedExtendedInstructionFeaturesKHR for ext [VK_KHR_shader_relaxed_extended_instruction] in APIs []

	vk::VkPhysicalDeviceShaderRelaxedExtendedInstructionFeaturesKHR physicalDeviceShaderRelaxedExtendedInstructionFeaturesKHR;
	deMemset(&physicalDeviceShaderRelaxedExtendedInstructionFeaturesKHR, 0, sizeof(physicalDeviceShaderRelaxedExtendedInstructionFeaturesKHR));

	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_KHR_shader_relaxed_extended_instruction"))
	{
		physicalDeviceShaderRelaxedExtendedInstructionFeaturesKHR.sType = getStructureType<VkPhysicalDeviceShaderRelaxedExtendedInstructionFeaturesKHR>();
		*nextPtr = &physicalDeviceShaderRelaxedExtendedInstructionFeaturesKHR;
		nextPtr  = &physicalDeviceShaderRelaxedExtendedInstructionFeaturesKHR.pNext;
	}

	// VkPhysicalDeviceShaderReplicatedCompositesFeaturesEXT for ext [VK_EXT_shader_replicated_composites] in APIs []

	vk::VkPhysicalDeviceShaderReplicatedCompositesFeaturesEXT physicalDeviceShaderReplicatedCompositesFeaturesEXT;
	deMemset(&physicalDeviceShaderReplicatedCompositesFeaturesEXT, 0, sizeof(physicalDeviceShaderReplicatedCompositesFeaturesEXT));

	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_shader_replicated_composites"))
	{
		physicalDeviceShaderReplicatedCompositesFeaturesEXT.sType = getStructureType<VkPhysicalDeviceShaderReplicatedCompositesFeaturesEXT>();
		*nextPtr = &physicalDeviceShaderReplicatedCompositesFeaturesEXT;
		nextPtr  = &physicalDeviceShaderReplicatedCompositesFeaturesEXT.pNext;
	}

	// VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures,VkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR for ext [VK_KHR_shader_subgroup_extended_types] in APIs []

	vk::VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures physicalDeviceShaderSubgroupExtendedTypesFeatures;
	deMemset(&physicalDeviceShaderSubgroupExtendedTypesFeatures, 0, sizeof(physicalDeviceShaderSubgroupExtendedTypesFeatures));

	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_KHR_shader_subgroup_extended_types"))
	{
		physicalDeviceShaderSubgroupExtendedTypesFeatures.sType = getStructureType<VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures>();
		*nextPtr = &physicalDeviceShaderSubgroupExtendedTypesFeatures;
		nextPtr  = &physicalDeviceShaderSubgroupExtendedTypesFeatures.pNext;
	}

	// VkPhysicalDeviceShaderSubgroupRotateFeatures,VkPhysicalDeviceShaderSubgroupRotateFeaturesKHR for ext [VK_KHR_shader_subgroup_rotate] in APIs [vulkan]

	vk::VkPhysicalDeviceShaderSubgroupRotateFeatures physicalDeviceShaderSubgroupRotateFeatures;
	deMemset(&physicalDeviceShaderSubgroupRotateFeatures, 0, sizeof(physicalDeviceShaderSubgroupRotateFeatures));

	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_KHR_shader_subgroup_rotate"))
	{
		physicalDeviceShaderSubgroupRotateFeatures.sType = getStructureType<VkPhysicalDeviceShaderSubgroupRotateFeatures>();
		*nextPtr = &physicalDeviceShaderSubgroupRotateFeatures;
		nextPtr  = &physicalDeviceShaderSubgroupRotateFeatures.pNext;
	}

	// VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR for ext [VK_KHR_shader_subgroup_uniform_control_flow] in APIs []

	vk::VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR physicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR;
	deMemset(&physicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR, 0, sizeof(physicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR));

	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_KHR_shader_subgroup_uniform_control_flow"))
	{
		physicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR.sType = getStructureType<VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR>();
		*nextPtr = &physicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR;
		nextPtr  = &physicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR.pNext;
	}

	// VkPhysicalDeviceShaderTerminateInvocationFeatures,VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR for ext [VK_KHR_shader_terminate_invocation] in APIs [vulkan, vulkansc]

	vk::VkPhysicalDeviceShaderTerminateInvocationFeatures physicalDeviceShaderTerminateInvocationFeatures;
	deMemset(&physicalDeviceShaderTerminateInvocationFeatures, 0, sizeof(physicalDeviceShaderTerminateInvocationFeatures));

	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_KHR_shader_terminate_invocation"))
	{
		physicalDeviceShaderTerminateInvocationFeatures.sType = getStructureType<VkPhysicalDeviceShaderTerminateInvocationFeatures>();
		*nextPtr = &physicalDeviceShaderTerminateInvocationFeatures;
		nextPtr  = &physicalDeviceShaderTerminateInvocationFeatures.pNext;
	}

	// VkPhysicalDeviceShaderUntypedPointersFeaturesKHR for ext [VK_KHR_shader_untyped_pointers] in APIs []

	vk::VkPhysicalDeviceShaderUntypedPointersFeaturesKHR physicalDeviceShaderUntypedPointersFeaturesKHR;
	deMemset(&physicalDeviceShaderUntypedPointersFeaturesKHR, 0, sizeof(physicalDeviceShaderUntypedPointersFeaturesKHR));

	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_KHR_shader_untyped_pointers"))
	{
		physicalDeviceShaderUntypedPointersFeaturesKHR.sType = getStructureType<VkPhysicalDeviceShaderUntypedPointersFeaturesKHR>();
		*nextPtr = &physicalDeviceShaderUntypedPointersFeaturesKHR;
		nextPtr  = &physicalDeviceShaderUntypedPointersFeaturesKHR.pNext;
	}

	// VkPhysicalDeviceSubgroupSizeControlFeatures,VkPhysicalDeviceSubgroupSizeControlFeaturesEXT for ext [VK_EXT_subgroup_size_control] in APIs []

	vk::VkPhysicalDeviceSubgroupSizeControlFeatures physicalDeviceSubgroupSizeControlFeatures;
	deMemset(&physicalDeviceSubgroupSizeControlFeatures, 0, sizeof(physicalDeviceSubgroupSizeControlFeatures));

	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_subgroup_size_control"))
	{
		physicalDeviceSubgroupSizeControlFeatures.sType = getStructureType<VkPhysicalDeviceSubgroupSizeControlFeatures>();
		*nextPtr = &physicalDeviceSubgroupSizeControlFeatures;
		nextPtr  = &physicalDeviceSubgroupSizeControlFeatures.pNext;
	}

	// VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT for ext [VK_EXT_subpass_merge_feedback] in APIs []

	vk::VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT physicalDeviceSubpassMergeFeedbackFeaturesEXT;
	deMemset(&physicalDeviceSubpassMergeFeedbackFeaturesEXT, 0, sizeof(physicalDeviceSubpassMergeFeedbackFeaturesEXT));

	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_subpass_merge_feedback"))
	{
		physicalDeviceSubpassMergeFeedbackFeaturesEXT.sType = getStructureType<VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT>();
		*nextPtr = &physicalDeviceSubpassMergeFeedbackFeaturesEXT;
		nextPtr  = &physicalDeviceSubpassMergeFeedbackFeaturesEXT.pNext;
	}

	// VkPhysicalDeviceSwapchainMaintenance1FeaturesKHR,VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT for ext [VK_EXT_swapchain_maintenance1, VK_KHR_swapchain_maintenance1] in APIs []

	vk::VkPhysicalDeviceSwapchainMaintenance1FeaturesKHR physicalDeviceSwapchainMaintenance1FeaturesKHR;
	deMemset(&physicalDeviceSwapchainMaintenance1FeaturesKHR, 0, sizeof(physicalDeviceSwapchainMaintenance1FeaturesKHR));

	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_swapchain_maintenance1", "VK_KHR_swapchain_maintenance1"))
	{
		physicalDeviceSwapchainMaintenance1FeaturesKHR.sType = getStructureType<VkPhysicalDeviceSwapchainMaintenance1FeaturesKHR>();
		*nextPtr = &physicalDeviceSwapchainMaintenance1FeaturesKHR;
		nextPtr  = &physicalDeviceSwapchainMaintenance1FeaturesKHR.pNext;
	}

	// VkPhysicalDeviceSynchronization2Features,VkPhysicalDeviceSynchronization2FeaturesKHR for ext [VK_KHR_synchronization2] in APIs [vulkan, vulkansc]

	vk::VkPhysicalDeviceSynchronization2Features physicalDeviceSynchronization2Features;
	deMemset(&physicalDeviceSynchronization2Features, 0, sizeof(physicalDeviceSynchronization2Features));

	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_KHR_synchronization2"))
	{
		physicalDeviceSynchronization2Features.sType = getStructureType<VkPhysicalDeviceSynchronization2Features>();
		*nextPtr = &physicalDeviceSynchronization2Features;
		nextPtr  = &physicalDeviceSynchronization2Features.pNext;
	}

	// VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT for ext [VK_EXT_texel_buffer_alignment] in APIs []

	vk::VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT physicalDeviceTexelBufferAlignmentFeaturesEXT;
	deMemset(&physicalDeviceTexelBufferAlignmentFeaturesEXT, 0, sizeof(physicalDeviceTexelBufferAlignmentFeaturesEXT));

	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_texel_buffer_alignment"))
	{
		physicalDeviceTexelBufferAlignmentFeaturesEXT.sType = getStructureType<VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT>();
		*nextPtr = &physicalDeviceTexelBufferAlignmentFeaturesEXT;
		nextPtr  = &physicalDeviceTexelBufferAlignmentFeaturesEXT.pNext;
	}

	// VkPhysicalDeviceTextureCompressionASTCHDRFeatures,VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT for ext [VK_EXT_texture_compression_astc_hdr] in APIs []

	vk::VkPhysicalDeviceTextureCompressionASTCHDRFeatures physicalDeviceTextureCompressionASTCHDRFeatures;
	deMemset(&physicalDeviceTextureCompressionASTCHDRFeatures, 0, sizeof(physicalDeviceTextureCompressionASTCHDRFeatures));

	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_texture_compression_astc_hdr"))
	{
		physicalDeviceTextureCompressionASTCHDRFeatures.sType = getStructureType<VkPhysicalDeviceTextureCompressionASTCHDRFeatures>();
		*nextPtr = &physicalDeviceTextureCompressionASTCHDRFeatures;
		nextPtr  = &physicalDeviceTextureCompressionASTCHDRFeatures.pNext;
	}

	// VkPhysicalDeviceTimelineSemaphoreFeatures,VkPhysicalDeviceTimelineSemaphoreFeaturesKHR for ext [VK_KHR_timeline_semaphore] in APIs []

	vk::VkPhysicalDeviceTimelineSemaphoreFeatures physicalDeviceTimelineSemaphoreFeatures;
	deMemset(&physicalDeviceTimelineSemaphoreFeatures, 0, sizeof(physicalDeviceTimelineSemaphoreFeatures));

	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_KHR_timeline_semaphore"))
	{
		physicalDeviceTimelineSemaphoreFeatures.sType = getStructureType<VkPhysicalDeviceTimelineSemaphoreFeatures>();
		*nextPtr = &physicalDeviceTimelineSemaphoreFeatures;
		nextPtr  = &physicalDeviceTimelineSemaphoreFeatures.pNext;
	}

	// VkPhysicalDeviceTransformFeedbackFeaturesEXT for ext [VK_EXT_transform_feedback] in APIs []

	vk::VkPhysicalDeviceTransformFeedbackFeaturesEXT physicalDeviceTransformFeedbackFeaturesEXT;
	deMemset(&physicalDeviceTransformFeedbackFeaturesEXT, 0, sizeof(physicalDeviceTransformFeedbackFeaturesEXT));

	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_transform_feedback"))
	{
		physicalDeviceTransformFeedbackFeaturesEXT.sType = getStructureType<VkPhysicalDeviceTransformFeedbackFeaturesEXT>();
		*nextPtr = &physicalDeviceTransformFeedbackFeaturesEXT;
		nextPtr  = &physicalDeviceTransformFeedbackFeaturesEXT.pNext;
	}

	// VkPhysicalDeviceUnifiedImageLayoutsFeaturesKHR for ext [VK_KHR_unified_image_layouts] in APIs []

	vk::VkPhysicalDeviceUnifiedImageLayoutsFeaturesKHR physicalDeviceUnifiedImageLayoutsFeaturesKHR;
	deMemset(&physicalDeviceUnifiedImageLayoutsFeaturesKHR, 0, sizeof(physicalDeviceUnifiedImageLayoutsFeaturesKHR));

	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_KHR_unified_image_layouts"))
	{
		physicalDeviceUnifiedImageLayoutsFeaturesKHR.sType = getStructureType<VkPhysicalDeviceUnifiedImageLayoutsFeaturesKHR>();
		*nextPtr = &physicalDeviceUnifiedImageLayoutsFeaturesKHR;
		nextPtr  = &physicalDeviceUnifiedImageLayoutsFeaturesKHR.pNext;
	}

	// VkPhysicalDeviceUniformBufferStandardLayoutFeatures,VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR for ext [VK_KHR_uniform_buffer_standard_layout] in APIs []

	vk::VkPhysicalDeviceUniformBufferStandardLayoutFeatures physicalDeviceUniformBufferStandardLayoutFeatures;
	deMemset(&physicalDeviceUniformBufferStandardLayoutFeatures, 0, sizeof(physicalDeviceUniformBufferStandardLayoutFeatures));

	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_KHR_uniform_buffer_standard_layout"))
	{
		physicalDeviceUniformBufferStandardLayoutFeatures.sType = getStructureType<VkPhysicalDeviceUniformBufferStandardLayoutFeatures>();
		*nextPtr = &physicalDeviceUniformBufferStandardLayoutFeatures;
		nextPtr  = &physicalDeviceUniformBufferStandardLayoutFeatures.pNext;
	}

	// VkPhysicalDeviceVariablePointersFeatures,VkPhysicalDeviceVariablePointersFeaturesKHR,VkPhysicalDeviceVariablePointerFeaturesKHR,VkPhysicalDeviceVariablePointerFeatures for ext [VK_KHR_variable_pointers] in APIs []

	vk::VkPhysicalDeviceVariablePointersFeatures physicalDeviceVariablePointersFeatures;
	deMemset(&physicalDeviceVariablePointersFeatures, 0, sizeof(physicalDeviceVariablePointersFeatures));

	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_KHR_variable_pointers"))
	{
		physicalDeviceVariablePointersFeatures.sType = getStructureType<VkPhysicalDeviceVariablePointersFeatures>();
		*nextPtr = &physicalDeviceVariablePointersFeatures;
		nextPtr  = &physicalDeviceVariablePointersFeatures.pNext;
	}

	// VkPhysicalDeviceVertexAttributeDivisorFeatures,VkPhysicalDeviceVertexAttributeDivisorFeaturesKHR,VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT for ext [VK_EXT_vertex_attribute_divisor, VK_KHR_vertex_attribute_divisor] in APIs [vulkan, vulkansc]

	vk::VkPhysicalDeviceVertexAttributeDivisorFeatures physicalDeviceVertexAttributeDivisorFeatures;
	deMemset(&physicalDeviceVertexAttributeDivisorFeatures, 0, sizeof(physicalDeviceVertexAttributeDivisorFeatures));

	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_vertex_attribute_divisor", "VK_KHR_vertex_attribute_divisor"))
	{
		physicalDeviceVertexAttributeDivisorFeatures.sType = getStructureType<VkPhysicalDeviceVertexAttributeDivisorFeatures>();
		*nextPtr = &physicalDeviceVertexAttributeDivisorFeatures;
		nextPtr  = &physicalDeviceVertexAttributeDivisorFeatures.pNext;
	}

	// VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT for ext [VK_EXT_vertex_input_dynamic_state] in APIs []

	vk::VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT physicalDeviceVertexInputDynamicStateFeaturesEXT;
	deMemset(&physicalDeviceVertexInputDynamicStateFeaturesEXT, 0, sizeof(physicalDeviceVertexInputDynamicStateFeaturesEXT));

	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_vertex_input_dynamic_state"))
	{
		physicalDeviceVertexInputDynamicStateFeaturesEXT.sType = getStructureType<VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT>();
		*nextPtr = &physicalDeviceVertexInputDynamicStateFeaturesEXT;
		nextPtr  = &physicalDeviceVertexInputDynamicStateFeaturesEXT.pNext;
	}

	// VkPhysicalDeviceVideoDecodeVP9FeaturesKHR for ext [VK_KHR_video_decode_vp9] in APIs []

	vk::VkPhysicalDeviceVideoDecodeVP9FeaturesKHR physicalDeviceVideoDecodeVP9FeaturesKHR;
	deMemset(&physicalDeviceVideoDecodeVP9FeaturesKHR, 0, sizeof(physicalDeviceVideoDecodeVP9FeaturesKHR));

	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_KHR_video_decode_vp9"))
	{
		physicalDeviceVideoDecodeVP9FeaturesKHR.sType = getStructureType<VkPhysicalDeviceVideoDecodeVP9FeaturesKHR>();
		*nextPtr = &physicalDeviceVideoDecodeVP9FeaturesKHR;
		nextPtr  = &physicalDeviceVideoDecodeVP9FeaturesKHR.pNext;
	}

	// VkPhysicalDeviceVideoEncodeAV1FeaturesKHR for ext [VK_KHR_video_encode_av1] in APIs []

	vk::VkPhysicalDeviceVideoEncodeAV1FeaturesKHR physicalDeviceVideoEncodeAV1FeaturesKHR;
	deMemset(&physicalDeviceVideoEncodeAV1FeaturesKHR, 0, sizeof(physicalDeviceVideoEncodeAV1FeaturesKHR));

	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_KHR_video_encode_av1"))
	{
		physicalDeviceVideoEncodeAV1FeaturesKHR.sType = getStructureType<VkPhysicalDeviceVideoEncodeAV1FeaturesKHR>();
		*nextPtr = &physicalDeviceVideoEncodeAV1FeaturesKHR;
		nextPtr  = &physicalDeviceVideoEncodeAV1FeaturesKHR.pNext;
	}

	// VkPhysicalDeviceVideoEncodeIntraRefreshFeaturesKHR for ext [VK_KHR_video_encode_intra_refresh] in APIs []

	vk::VkPhysicalDeviceVideoEncodeIntraRefreshFeaturesKHR physicalDeviceVideoEncodeIntraRefreshFeaturesKHR;
	deMemset(&physicalDeviceVideoEncodeIntraRefreshFeaturesKHR, 0, sizeof(physicalDeviceVideoEncodeIntraRefreshFeaturesKHR));

	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_KHR_video_encode_intra_refresh"))
	{
		physicalDeviceVideoEncodeIntraRefreshFeaturesKHR.sType = getStructureType<VkPhysicalDeviceVideoEncodeIntraRefreshFeaturesKHR>();
		*nextPtr = &physicalDeviceVideoEncodeIntraRefreshFeaturesKHR;
		nextPtr  = &physicalDeviceVideoEncodeIntraRefreshFeaturesKHR.pNext;
	}

	// VkPhysicalDeviceVideoEncodeQuantizationMapFeaturesKHR for ext [VK_KHR_video_encode_quantization_map] in APIs []

	vk::VkPhysicalDeviceVideoEncodeQuantizationMapFeaturesKHR physicalDeviceVideoEncodeQuantizationMapFeaturesKHR;
	deMemset(&physicalDeviceVideoEncodeQuantizationMapFeaturesKHR, 0, sizeof(physicalDeviceVideoEncodeQuantizationMapFeaturesKHR));

	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_KHR_video_encode_quantization_map"))
	{
		physicalDeviceVideoEncodeQuantizationMapFeaturesKHR.sType = getStructureType<VkPhysicalDeviceVideoEncodeQuantizationMapFeaturesKHR>();
		*nextPtr = &physicalDeviceVideoEncodeQuantizationMapFeaturesKHR;
		nextPtr  = &physicalDeviceVideoEncodeQuantizationMapFeaturesKHR.pNext;
	}

	// VkPhysicalDeviceVideoMaintenance1FeaturesKHR for ext [VK_KHR_video_maintenance1] in APIs []

	vk::VkPhysicalDeviceVideoMaintenance1FeaturesKHR physicalDeviceVideoMaintenance1FeaturesKHR;
	deMemset(&physicalDeviceVideoMaintenance1FeaturesKHR, 0, sizeof(physicalDeviceVideoMaintenance1FeaturesKHR));

	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_KHR_video_maintenance1"))
	{
		physicalDeviceVideoMaintenance1FeaturesKHR.sType = getStructureType<VkPhysicalDeviceVideoMaintenance1FeaturesKHR>();
		*nextPtr = &physicalDeviceVideoMaintenance1FeaturesKHR;
		nextPtr  = &physicalDeviceVideoMaintenance1FeaturesKHR.pNext;
	}

	// VkPhysicalDeviceVideoMaintenance2FeaturesKHR for ext [VK_KHR_video_maintenance2] in APIs []

	vk::VkPhysicalDeviceVideoMaintenance2FeaturesKHR physicalDeviceVideoMaintenance2FeaturesKHR;
	deMemset(&physicalDeviceVideoMaintenance2FeaturesKHR, 0, sizeof(physicalDeviceVideoMaintenance2FeaturesKHR));

	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_KHR_video_maintenance2"))
	{
		physicalDeviceVideoMaintenance2FeaturesKHR.sType = getStructureType<VkPhysicalDeviceVideoMaintenance2FeaturesKHR>();
		*nextPtr = &physicalDeviceVideoMaintenance2FeaturesKHR;
		nextPtr  = &physicalDeviceVideoMaintenance2FeaturesKHR.pNext;
	}

	// VkPhysicalDeviceVulkan11Features for ext [] in APIs [vulkan]

	vk::VkPhysicalDeviceVulkan11Features physicalDeviceVulkan11Features;
	deMemset(&physicalDeviceVulkan11Features, 0, sizeof(physicalDeviceVulkan11Features));

	if ( context.contextSupports(vk::ApiVersion(0, 1, 4, 0)) )
	{
		physicalDeviceVulkan11Features.sType = getStructureType<VkPhysicalDeviceVulkan11Features>();
		*nextPtr = &physicalDeviceVulkan11Features;
		nextPtr  = &physicalDeviceVulkan11Features.pNext;
	}

	// VkPhysicalDeviceVulkan12Features for ext [] in APIs []

	vk::VkPhysicalDeviceVulkan12Features physicalDeviceVulkan12Features;
	deMemset(&physicalDeviceVulkan12Features, 0, sizeof(physicalDeviceVulkan12Features));

	if ( context.contextSupports(vk::ApiVersion(0, 1, 2, 0)) || context.contextSupports(vk::ApiVersion(0, 1, 3, 0)) || context.contextSupports(vk::ApiVersion(0, 1, 4, 0)) )
	{
		physicalDeviceVulkan12Features.sType = getStructureType<VkPhysicalDeviceVulkan12Features>();
		*nextPtr = &physicalDeviceVulkan12Features;
		nextPtr  = &physicalDeviceVulkan12Features.pNext;
	}

	// VkPhysicalDeviceVulkan13Features for ext [] in APIs [vulkan]

	vk::VkPhysicalDeviceVulkan13Features physicalDeviceVulkan13Features;
	deMemset(&physicalDeviceVulkan13Features, 0, sizeof(physicalDeviceVulkan13Features));

	if ( context.contextSupports(vk::ApiVersion(0, 1, 3, 0)) )
	{
		physicalDeviceVulkan13Features.sType = getStructureType<VkPhysicalDeviceVulkan13Features>();
		*nextPtr = &physicalDeviceVulkan13Features;
		nextPtr  = &physicalDeviceVulkan13Features.pNext;
	}

	// VkPhysicalDeviceVulkan14Features for ext [] in APIs [vulkan]

	vk::VkPhysicalDeviceVulkan14Features physicalDeviceVulkan14Features;
	deMemset(&physicalDeviceVulkan14Features, 0, sizeof(physicalDeviceVulkan14Features));

	if ( context.contextSupports(vk::ApiVersion(0, 1, 4, 0)) )
	{
		physicalDeviceVulkan14Features.sType = getStructureType<VkPhysicalDeviceVulkan14Features>();
		*nextPtr = &physicalDeviceVulkan14Features;
		nextPtr  = &physicalDeviceVulkan14Features.pNext;
	}

	// VkPhysicalDeviceVulkanMemoryModelFeatures,VkPhysicalDeviceVulkanMemoryModelFeaturesKHR for ext [VK_KHR_vulkan_memory_model] in APIs []

	vk::VkPhysicalDeviceVulkanMemoryModelFeatures physicalDeviceVulkanMemoryModelFeatures;
	deMemset(&physicalDeviceVulkanMemoryModelFeatures, 0, sizeof(physicalDeviceVulkanMemoryModelFeatures));

	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_KHR_vulkan_memory_model"))
	{
		physicalDeviceVulkanMemoryModelFeatures.sType = getStructureType<VkPhysicalDeviceVulkanMemoryModelFeatures>();
		*nextPtr = &physicalDeviceVulkanMemoryModelFeatures;
		nextPtr  = &physicalDeviceVulkanMemoryModelFeatures.pNext;
	}

	// VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR for ext [VK_KHR_workgroup_memory_explicit_layout] in APIs []

	vk::VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR physicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR;
	deMemset(&physicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR, 0, sizeof(physicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR));

	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_KHR_workgroup_memory_explicit_layout"))
	{
		physicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR.sType = getStructureType<VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR>();
		*nextPtr = &physicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR;
		nextPtr  = &physicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR.pNext;
	}

	// VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT for ext [VK_EXT_ycbcr_2plane_444_formats] in APIs []

	vk::VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT physicalDeviceYcbcr2Plane444FormatsFeaturesEXT;
	deMemset(&physicalDeviceYcbcr2Plane444FormatsFeaturesEXT, 0, sizeof(physicalDeviceYcbcr2Plane444FormatsFeaturesEXT));

	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_ycbcr_2plane_444_formats"))
	{
		physicalDeviceYcbcr2Plane444FormatsFeaturesEXT.sType = getStructureType<VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT>();
		*nextPtr = &physicalDeviceYcbcr2Plane444FormatsFeaturesEXT;
		nextPtr  = &physicalDeviceYcbcr2Plane444FormatsFeaturesEXT.pNext;
	}

	// VkPhysicalDeviceYcbcrImageArraysFeaturesEXT for ext [VK_EXT_ycbcr_image_arrays] in APIs []

	vk::VkPhysicalDeviceYcbcrImageArraysFeaturesEXT physicalDeviceYcbcrImageArraysFeaturesEXT;
	deMemset(&physicalDeviceYcbcrImageArraysFeaturesEXT, 0, sizeof(physicalDeviceYcbcrImageArraysFeaturesEXT));

	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_ycbcr_image_arrays"))
	{
		physicalDeviceYcbcrImageArraysFeaturesEXT.sType = getStructureType<VkPhysicalDeviceYcbcrImageArraysFeaturesEXT>();
		*nextPtr = &physicalDeviceYcbcrImageArraysFeaturesEXT;
		nextPtr  = &physicalDeviceYcbcrImageArraysFeaturesEXT.pNext;
	}

	// VkPhysicalDeviceZeroInitializeDeviceMemoryFeaturesEXT for ext [VK_EXT_zero_initialize_device_memory] in APIs []

	vk::VkPhysicalDeviceZeroInitializeDeviceMemoryFeaturesEXT physicalDeviceZeroInitializeDeviceMemoryFeaturesEXT;
	deMemset(&physicalDeviceZeroInitializeDeviceMemoryFeaturesEXT, 0, sizeof(physicalDeviceZeroInitializeDeviceMemoryFeaturesEXT));

	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_EXT_zero_initialize_device_memory"))
	{
		physicalDeviceZeroInitializeDeviceMemoryFeaturesEXT.sType = getStructureType<VkPhysicalDeviceZeroInitializeDeviceMemoryFeaturesEXT>();
		*nextPtr = &physicalDeviceZeroInitializeDeviceMemoryFeaturesEXT;
		nextPtr  = &physicalDeviceZeroInitializeDeviceMemoryFeaturesEXT.pNext;
	}

	// VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures,VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR for ext [VK_KHR_zero_initialize_workgroup_memory] in APIs [vulkan]

	vk::VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures physicalDeviceZeroInitializeWorkgroupMemoryFeatures;
	deMemset(&physicalDeviceZeroInitializeWorkgroupMemoryFeatures, 0, sizeof(physicalDeviceZeroInitializeWorkgroupMemoryFeatures));

	if (canUseFeaturesStruct(deviceExtensions, usedApiVersion, "VK_KHR_zero_initialize_workgroup_memory"))
	{
		physicalDeviceZeroInitializeWorkgroupMemoryFeatures.sType = getStructureType<VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures>();
		*nextPtr = &physicalDeviceZeroInitializeWorkgroupMemoryFeatures;
		nextPtr  = &physicalDeviceZeroInitializeWorkgroupMemoryFeatures.pNext;
	}

	context.getInstanceInterface().getPhysicalDeviceFeatures2(context.getPhysicalDevice(), &coreFeatures);
	bool result = true;

	// VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD in APIs []
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_AMD_shader_early_and_late_fragment_tests")) )
	{
		if ( physicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD.shaderEarlyAndLateFragmentTests == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature shaderEarlyAndLateFragmentTests not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceExternalFormatResolveFeaturesANDROID in APIs []
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_ANDROID_external_format_resolve")) )
	{
		if ( physicalDeviceExternalFormatResolveFeaturesANDROID.externalFormatResolve == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature externalFormatResolve not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDevice4444FormatsFeaturesEXT in APIs []
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_4444_formats")) )
	{
		if ( physicalDevice4444FormatsFeaturesEXT.formatA4R4G4B4 == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature formatA4R4G4B4 not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT in APIs [vulkan]
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_attachment_feedback_loop_dynamic_state")) )
	{
		if ( physicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT.attachmentFeedbackLoopDynamicState == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature attachmentFeedbackLoopDynamicState not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT in APIs [vulkan]
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_attachment_feedback_loop_layout")) )
	{
		if ( physicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT.attachmentFeedbackLoopLayout == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature attachmentFeedbackLoopLayout not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceBorderColorSwizzleFeaturesEXT in APIs [vulkan]
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_border_color_swizzle")) )
	{
		if ( physicalDeviceBorderColorSwizzleFeaturesEXT.borderColorSwizzle == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature borderColorSwizzle not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceColorWriteEnableFeaturesEXT in APIs []
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_color_write_enable")) )
	{
		if ( physicalDeviceColorWriteEnableFeaturesEXT.colorWriteEnable == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature colorWriteEnable not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceConditionalRenderingFeaturesEXT in APIs []
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_conditional_rendering")) )
	{
		if ( physicalDeviceConditionalRenderingFeaturesEXT.conditionalRendering == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature conditionalRendering not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceCustomBorderColorFeaturesEXT in APIs [vulkan, vulkansc]
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_custom_border_color")) )
	{
		if ( physicalDeviceCustomBorderColorFeaturesEXT.customBorderColors == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature customBorderColors not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceDepthBiasControlFeaturesEXT in APIs [vulkan]
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_depth_bias_control")) )
	{
		if ( physicalDeviceDepthBiasControlFeaturesEXT.depthBiasControl == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature depthBiasControl not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceDepthClampControlFeaturesEXT in APIs []
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_depth_clamp_control")) )
	{
		if ( physicalDeviceDepthClampControlFeaturesEXT.depthClampControl == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature depthClampControl not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceDepthClipControlFeaturesEXT in APIs []
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_depth_clip_control")) )
	{
		if ( physicalDeviceDepthClipControlFeaturesEXT.depthClipControl == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature depthClipControl not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceDepthClipEnableFeaturesEXT in APIs []
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_depth_clip_enable")) )
	{
		if ( physicalDeviceDepthClipEnableFeaturesEXT.depthClipEnable == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature depthClipEnable not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceDescriptorBufferFeaturesEXT in APIs []
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_descriptor_buffer")) )
	{
		if ( physicalDeviceDescriptorBufferFeaturesEXT.descriptorBuffer == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature descriptorBuffer not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceDescriptorIndexingFeatures in APIs []
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_descriptor_indexing")) )
	{
		if ( physicalDeviceDescriptorIndexingFeatures.shaderUniformTexelBufferArrayDynamicIndexing == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature shaderUniformTexelBufferArrayDynamicIndexing not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceDescriptorIndexingFeatures in APIs []
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_descriptor_indexing")) )
	{
		if ( physicalDeviceDescriptorIndexingFeatures.shaderStorageTexelBufferArrayDynamicIndexing == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature shaderStorageTexelBufferArrayDynamicIndexing not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceDescriptorIndexingFeatures in APIs []
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_descriptor_indexing")) )
	{
		if ( physicalDeviceDescriptorIndexingFeatures.shaderSampledImageArrayNonUniformIndexing == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature shaderSampledImageArrayNonUniformIndexing not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceDescriptorIndexingFeatures in APIs []
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_descriptor_indexing")) )
	{
		if ( physicalDeviceDescriptorIndexingFeatures.shaderStorageBufferArrayNonUniformIndexing == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature shaderStorageBufferArrayNonUniformIndexing not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceDescriptorIndexingFeatures in APIs []
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_descriptor_indexing")) )
	{
		if ( physicalDeviceDescriptorIndexingFeatures.shaderUniformTexelBufferArrayNonUniformIndexing == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature shaderUniformTexelBufferArrayNonUniformIndexing not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceDescriptorIndexingFeatures in APIs []
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_descriptor_indexing")) )
	{
		if ( physicalDeviceDescriptorIndexingFeatures.descriptorBindingSampledImageUpdateAfterBind == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature descriptorBindingSampledImageUpdateAfterBind not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceDescriptorIndexingFeatures in APIs []
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_descriptor_indexing")) )
	{
		if ( physicalDeviceDescriptorIndexingFeatures.descriptorBindingStorageImageUpdateAfterBind == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature descriptorBindingStorageImageUpdateAfterBind not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceDescriptorIndexingFeatures in APIs []
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_descriptor_indexing")) )
	{
		if ( physicalDeviceDescriptorIndexingFeatures.descriptorBindingStorageBufferUpdateAfterBind == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature descriptorBindingStorageBufferUpdateAfterBind not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceDescriptorIndexingFeatures in APIs []
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_descriptor_indexing")) )
	{
		if ( physicalDeviceDescriptorIndexingFeatures.descriptorBindingUniformTexelBufferUpdateAfterBind == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature descriptorBindingUniformTexelBufferUpdateAfterBind not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceDescriptorIndexingFeatures in APIs []
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_descriptor_indexing")) )
	{
		if ( physicalDeviceDescriptorIndexingFeatures.descriptorBindingStorageTexelBufferUpdateAfterBind == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature descriptorBindingStorageTexelBufferUpdateAfterBind not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceDescriptorIndexingFeatures in APIs []
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_descriptor_indexing")) )
	{
		if ( physicalDeviceDescriptorIndexingFeatures.descriptorBindingUpdateUnusedWhilePending == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature descriptorBindingUpdateUnusedWhilePending not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceDescriptorIndexingFeatures in APIs []
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_descriptor_indexing")) )
	{
		if ( physicalDeviceDescriptorIndexingFeatures.descriptorBindingPartiallyBound == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature descriptorBindingPartiallyBound not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceDescriptorIndexingFeatures in APIs []
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_descriptor_indexing")) )
	{
		if ( physicalDeviceDescriptorIndexingFeatures.runtimeDescriptorArray == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature runtimeDescriptorArray not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceDescriptorIndexingFeatures in APIs []
	if ( context.contextSupports(vk::ApiVersion(0, 1, 1, 0)) && isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_acceleration_structure")) )
	{
		if ( physicalDeviceDescriptorIndexingFeatures.shaderUniformTexelBufferArrayDynamicIndexing == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature shaderUniformTexelBufferArrayDynamicIndexing not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceDescriptorIndexingFeatures in APIs []
	if ( context.contextSupports(vk::ApiVersion(0, 1, 1, 0)) && isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_acceleration_structure")) )
	{
		if ( physicalDeviceDescriptorIndexingFeatures.shaderStorageTexelBufferArrayDynamicIndexing == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature shaderStorageTexelBufferArrayDynamicIndexing not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceDescriptorIndexingFeatures in APIs []
	if ( context.contextSupports(vk::ApiVersion(0, 1, 1, 0)) && isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_acceleration_structure")) )
	{
		if ( physicalDeviceDescriptorIndexingFeatures.shaderSampledImageArrayNonUniformIndexing == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature shaderSampledImageArrayNonUniformIndexing not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceDescriptorIndexingFeatures in APIs []
	if ( context.contextSupports(vk::ApiVersion(0, 1, 1, 0)) && isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_acceleration_structure")) )
	{
		if ( physicalDeviceDescriptorIndexingFeatures.shaderStorageBufferArrayNonUniformIndexing == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature shaderStorageBufferArrayNonUniformIndexing not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceDescriptorIndexingFeatures in APIs []
	if ( context.contextSupports(vk::ApiVersion(0, 1, 1, 0)) && isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_acceleration_structure")) )
	{
		if ( physicalDeviceDescriptorIndexingFeatures.shaderUniformTexelBufferArrayNonUniformIndexing == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature shaderUniformTexelBufferArrayNonUniformIndexing not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceDescriptorIndexingFeatures in APIs []
	if ( context.contextSupports(vk::ApiVersion(0, 1, 1, 0)) && isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_acceleration_structure")) )
	{
		if ( physicalDeviceDescriptorIndexingFeatures.descriptorBindingSampledImageUpdateAfterBind == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature descriptorBindingSampledImageUpdateAfterBind not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceDescriptorIndexingFeatures in APIs []
	if ( context.contextSupports(vk::ApiVersion(0, 1, 1, 0)) && isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_acceleration_structure")) )
	{
		if ( physicalDeviceDescriptorIndexingFeatures.descriptorBindingStorageImageUpdateAfterBind == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature descriptorBindingStorageImageUpdateAfterBind not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceDescriptorIndexingFeatures in APIs []
	if ( context.contextSupports(vk::ApiVersion(0, 1, 1, 0)) && isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_acceleration_structure")) )
	{
		if ( physicalDeviceDescriptorIndexingFeatures.descriptorBindingStorageBufferUpdateAfterBind == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature descriptorBindingStorageBufferUpdateAfterBind not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceDescriptorIndexingFeatures in APIs []
	if ( context.contextSupports(vk::ApiVersion(0, 1, 1, 0)) && isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_acceleration_structure")) )
	{
		if ( physicalDeviceDescriptorIndexingFeatures.descriptorBindingUniformTexelBufferUpdateAfterBind == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature descriptorBindingUniformTexelBufferUpdateAfterBind not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceDescriptorIndexingFeatures in APIs []
	if ( context.contextSupports(vk::ApiVersion(0, 1, 1, 0)) && isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_acceleration_structure")) )
	{
		if ( physicalDeviceDescriptorIndexingFeatures.descriptorBindingStorageTexelBufferUpdateAfterBind == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature descriptorBindingStorageTexelBufferUpdateAfterBind not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceDescriptorIndexingFeatures in APIs []
	if ( context.contextSupports(vk::ApiVersion(0, 1, 1, 0)) && isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_acceleration_structure")) )
	{
		if ( physicalDeviceDescriptorIndexingFeatures.descriptorBindingUpdateUnusedWhilePending == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature descriptorBindingUpdateUnusedWhilePending not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceDescriptorIndexingFeatures in APIs []
	if ( context.contextSupports(vk::ApiVersion(0, 1, 1, 0)) && isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_acceleration_structure")) )
	{
		if ( physicalDeviceDescriptorIndexingFeatures.descriptorBindingPartiallyBound == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature descriptorBindingPartiallyBound not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceDescriptorIndexingFeatures in APIs []
	if ( context.contextSupports(vk::ApiVersion(0, 1, 1, 0)) && isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_acceleration_structure")) )
	{
		if ( physicalDeviceDescriptorIndexingFeatures.runtimeDescriptorArray == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature runtimeDescriptorArray not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceFeatures in APIs []
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_descriptor_indexing")) )
	{
		if ( coreFeatures.features.shaderSampledImageArrayDynamicIndexing == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature shaderSampledImageArrayDynamicIndexing not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceFeatures in APIs []
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_descriptor_indexing")) )
	{
		if ( coreFeatures.features.shaderStorageBufferArrayDynamicIndexing == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature shaderStorageBufferArrayDynamicIndexing not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceFeatures in APIs []
	if ( context.contextSupports(vk::ApiVersion(0, 1, 1, 0)) && isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_acceleration_structure")) )
	{
		if ( coreFeatures.features.shaderSampledImageArrayDynamicIndexing == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature shaderSampledImageArrayDynamicIndexing not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceFeatures in APIs []
	if ( context.contextSupports(vk::ApiVersion(0, 1, 1, 0)) && isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_acceleration_structure")) )
	{
		if ( coreFeatures.features.shaderStorageBufferArrayDynamicIndexing == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature shaderStorageBufferArrayDynamicIndexing not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceAddressBindingReportFeaturesEXT in APIs []
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_device_address_binding_report")) )
	{
		if ( physicalDeviceAddressBindingReportFeaturesEXT.reportAddressBinding == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature reportAddressBinding not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceFaultFeaturesEXT in APIs []
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_device_fault")) )
	{
		if ( physicalDeviceFaultFeaturesEXT.deviceFault == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature deviceFault not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT in APIs []
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_dynamic_rendering_unused_attachments")) )
	{
		if ( physicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT.dynamicRenderingUnusedAttachments == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature dynamicRenderingUnusedAttachments not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceExtendedDynamicState2FeaturesEXT in APIs []
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_extended_dynamic_state2")) )
	{
		if ( physicalDeviceExtendedDynamicState2FeaturesEXT.extendedDynamicState2 == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature extendedDynamicState2 not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceFeatures in APIs []
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_extended_dynamic_state3")) && isExtensionStructSupported(deviceExtensions, RequiredExtension("VkPhysicalDeviceExtendedDynamicState3FeaturesEXT::extendedDynamicState3TessellationDomainOrigin")) )
	{
		if ( coreFeatures.features.tessellationShader == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature tessellationShader not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceFeatures in APIs []
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_extended_dynamic_state3")) && isExtensionStructSupported(deviceExtensions, RequiredExtension("VkPhysicalDeviceExtendedDynamicState3FeaturesEXT::extendedDynamicState3DepthClampEnable")) )
	{
		if ( coreFeatures.features.depthClamp == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature depthClamp not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceFeatures in APIs []
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_extended_dynamic_state3")) && isExtensionStructSupported(deviceExtensions, RequiredExtension("VkPhysicalDeviceExtendedDynamicState3FeaturesEXT::extendedDynamicState3PolygonMode")) )
	{
		if ( coreFeatures.features.fillModeNonSolid == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature fillModeNonSolid not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceFeatures in APIs []
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_extended_dynamic_state3")) && isExtensionStructSupported(deviceExtensions, RequiredExtension("VkPhysicalDeviceExtendedDynamicState3FeaturesEXT::extendedDynamicState3AlphaToOneEnable")) )
	{
		if ( coreFeatures.features.alphaToOne == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature alphaToOne not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceFeatures in APIs []
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_extended_dynamic_state3")) && isExtensionStructSupported(deviceExtensions, RequiredExtension("VkPhysicalDeviceExtendedDynamicState3FeaturesEXT::extendedDynamicState3LogicOpEnable")) )
	{
		if ( coreFeatures.features.logicOp == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature logicOp not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceTransformFeedbackFeaturesEXT in APIs []
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_extended_dynamic_state3")) && isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_transform_feedback+VkPhysicalDeviceExtendedDynamicState3FeaturesEXT::extendedDynamicState3RasterizationStream")) )
	{
		if ( physicalDeviceTransformFeedbackFeaturesEXT.geometryStreams == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature geometryStreams not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceFragmentDensityMapFeaturesEXT in APIs []
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_fragment_density_map")) )
	{
		if ( physicalDeviceFragmentDensityMapFeaturesEXT.fragmentDensityMap == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature fragmentDensityMap not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceFragmentDensityMapOffsetFeaturesEXT in APIs []
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_fragment_density_map_offset")) )
	{
		if ( physicalDeviceFragmentDensityMapOffsetFeaturesEXT.fragmentDensityMapOffset == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature fragmentDensityMapOffset not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT in APIs []
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_fragment_shader_interlock")) )
	{
		if ( ( physicalDeviceFragmentShaderInterlockFeaturesEXT.fragmentShaderSampleInterlock == VK_FALSE ) && ( physicalDeviceFragmentShaderInterlockFeaturesEXT.fragmentShaderPixelInterlock == VK_FALSE ) && ( physicalDeviceFragmentShaderInterlockFeaturesEXT.fragmentShaderShadingRateInterlock == VK_FALSE ) )
		{
			log << tcu::TestLog::Message << "Mandatory feature fragmentShaderSampleInterlock or fragmentShaderPixelInterlock or fragmentShaderShadingRateInterlock not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceFrameBoundaryFeaturesEXT in APIs []
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_frame_boundary")) )
	{
		if ( physicalDeviceFrameBoundaryFeaturesEXT.frameBoundary == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature frameBoundary not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceGlobalPriorityQueryFeaturesEXT in APIs []
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_global_priority_query")) )
	{
		if ( physicalDeviceGlobalPriorityQueryFeatures.globalPriorityQuery == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature globalPriorityQuery not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceHostQueryResetFeatures in APIs []
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_host_query_reset")) )
	{
		if ( physicalDeviceHostQueryResetFeatures.hostQueryReset == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature hostQueryReset not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceImage2DViewOf3DFeaturesEXT in APIs [vulkan]
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_image_2d_view_of_3d")) )
	{
		if ( physicalDeviceImage2DViewOf3DFeaturesEXT.image2DViewOf3D == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature image2DViewOf3D not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceImageCompressionControlFeaturesEXT in APIs []
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_image_compression_control")) )
	{
		if ( physicalDeviceImageCompressionControlFeaturesEXT.imageCompressionControl == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature imageCompressionControl not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT in APIs []
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_image_compression_control")) && isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_image_compression_control_swapchain")) )
	{
		if ( physicalDeviceImageCompressionControlSwapchainFeaturesEXT.imageCompressionControlSwapchain == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature imageCompressionControlSwapchain not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT in APIs [vulkan]
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_image_sliced_view_of_3d")) )
	{
		if ( physicalDeviceImageSlicedViewOf3DFeaturesEXT.imageSlicedViewOf3D == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature imageSlicedViewOf3D not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceInlineUniformBlockFeaturesEXT in APIs []
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_inline_uniform_block")) )
	{
		if ( physicalDeviceInlineUniformBlockFeatures.inlineUniformBlock == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature inlineUniformBlock not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceInlineUniformBlockFeaturesEXT in APIs []
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_inline_uniform_block")) && isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_descriptor_indexing")) )
	{
		if ( physicalDeviceInlineUniformBlockFeatures.descriptorBindingInlineUniformBlockUpdateAfterBind == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature descriptorBindingInlineUniformBlockUpdateAfterBind not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceLegacyDitheringFeaturesEXT in APIs []
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_legacy_dithering")) )
	{
		if ( physicalDeviceLegacyDitheringFeaturesEXT.legacyDithering == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature legacyDithering not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceLegacyVertexAttributesFeaturesEXT in APIs []
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_legacy_vertex_attributes")) )
	{
		if ( physicalDeviceLegacyVertexAttributesFeaturesEXT.legacyVertexAttributes == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature legacyVertexAttributes not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceMemoryPriorityFeaturesEXT in APIs []
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_memory_priority")) )
	{
		if ( physicalDeviceMemoryPriorityFeaturesEXT.memoryPriority == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature memoryPriority not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceFragmentShadingRateFeaturesKHR in APIs []
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_mesh_shader")) && isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_fragment_shading_rate+VkPhysicalDeviceMeshShaderFeaturesEXT::primitiveFragmentShadingRateMeshShader")) )
	{
		if ( physicalDeviceFragmentShadingRateFeaturesKHR.primitiveFragmentShadingRate == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature primitiveFragmentShadingRate not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceMeshShaderFeaturesEXT in APIs []
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_mesh_shader")) )
	{
		if ( ( physicalDeviceMeshShaderFeaturesEXT.taskShader == VK_FALSE ) && ( physicalDeviceMeshShaderFeaturesEXT.meshShader == VK_FALSE ) )
		{
			log << tcu::TestLog::Message << "Mandatory feature taskShader or meshShader not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceMultiDrawFeaturesEXT in APIs []
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_multi_draw")) )
	{
		if ( physicalDeviceMultiDrawFeaturesEXT.multiDraw == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature multiDraw not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT in APIs []
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_multisampled_render_to_single_sampled")) )
	{
		if ( physicalDeviceMultisampledRenderToSingleSampledFeaturesEXT.multisampledRenderToSingleSampled == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature multisampledRenderToSingleSampled not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT in APIs []
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_mutable_descriptor_type")) )
	{
		if ( physicalDeviceMutableDescriptorTypeFeaturesEXT.mutableDescriptorType == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature mutableDescriptorType not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT in APIs [vulkan]
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_non_seamless_cube_map")) )
	{
		if ( physicalDeviceNonSeamlessCubeMapFeaturesEXT.nonSeamlessCubeMap == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature nonSeamlessCubeMap not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceOpacityMicromapFeaturesEXT in APIs [vulkan]
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_opacity_micromap")) )
	{
		if ( physicalDeviceOpacityMicromapFeaturesEXT.micromap == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature micromap not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT in APIs [vulkan]
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_pageable_device_local_memory")) )
	{
		if ( physicalDevicePageableDeviceLocalMemoryFeaturesEXT.pageableDeviceLocalMemory == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature pageableDeviceLocalMemory not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT in APIs []
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_pipeline_library_group_handles")) )
	{
		if ( physicalDevicePipelineLibraryGroupHandlesFeaturesEXT.pipelineLibraryGroupHandles == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature pipelineLibraryGroupHandles not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDevicePipelineProtectedAccessFeaturesEXT in APIs []
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_pipeline_protected_access")) )
	{
		if ( physicalDevicePipelineProtectedAccessFeatures.pipelineProtectedAccess == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature pipelineProtectedAccess not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT in APIs [vulkan]
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_primitive_topology_list_restart")) )
	{
		if ( physicalDevicePrimitiveTopologyListRestartFeaturesEXT.primitiveTopologyListRestart == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature primitiveTopologyListRestart not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceScalarBlockLayoutFeatures in APIs []
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_scalar_block_layout")) )
	{
		if ( physicalDeviceScalarBlockLayoutFeatures.scalarBlockLayout == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature scalarBlockLayout not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceShaderAtomicFloatFeaturesEXT in APIs [vulkan, vulkansc]
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_shader_atomic_float")) )
	{
		if ( ( physicalDeviceShaderAtomicFloatFeaturesEXT.shaderBufferFloat32Atomics == VK_FALSE ) && ( physicalDeviceShaderAtomicFloatFeaturesEXT.shaderBufferFloat32AtomicAdd == VK_FALSE ) && ( physicalDeviceShaderAtomicFloatFeaturesEXT.shaderBufferFloat64Atomics == VK_FALSE ) && ( physicalDeviceShaderAtomicFloatFeaturesEXT.shaderBufferFloat64AtomicAdd == VK_FALSE ) && ( physicalDeviceShaderAtomicFloatFeaturesEXT.shaderSharedFloat32Atomics == VK_FALSE ) && ( physicalDeviceShaderAtomicFloatFeaturesEXT.shaderSharedFloat32AtomicAdd == VK_FALSE ) && ( physicalDeviceShaderAtomicFloatFeaturesEXT.shaderSharedFloat64Atomics == VK_FALSE ) && ( physicalDeviceShaderAtomicFloatFeaturesEXT.shaderSharedFloat64AtomicAdd == VK_FALSE ) && ( physicalDeviceShaderAtomicFloatFeaturesEXT.shaderImageFloat32Atomics == VK_FALSE ) && ( physicalDeviceShaderAtomicFloatFeaturesEXT.shaderImageFloat32AtomicAdd == VK_FALSE ) )
		{
			log << tcu::TestLog::Message << "Mandatory feature shaderBufferFloat32Atomics or shaderBufferFloat32AtomicAdd or shaderBufferFloat64Atomics or shaderBufferFloat64AtomicAdd or shaderSharedFloat32Atomics or shaderSharedFloat32AtomicAdd or shaderSharedFloat64Atomics or shaderSharedFloat64AtomicAdd or shaderImageFloat32Atomics or shaderImageFloat32AtomicAdd not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceShaderAtomicFloatFeaturesEXT in APIs [vulkan, vulkansc]
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_shader_atomic_float")) && isExtensionStructSupported(deviceExtensions, RequiredExtension("VkPhysicalDeviceShaderAtomicFloatFeaturesEXT::sparseImageFloat32Atomics")) )
	{
		if ( physicalDeviceShaderAtomicFloatFeaturesEXT.shaderImageFloat32Atomics == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature shaderImageFloat32Atomics not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceShaderAtomicFloatFeaturesEXT in APIs [vulkan, vulkansc]
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_shader_atomic_float")) && isExtensionStructSupported(deviceExtensions, RequiredExtension("VkPhysicalDeviceShaderAtomicFloatFeaturesEXT::sparseImageFloat32AtomicAdd")) )
	{
		if ( physicalDeviceShaderAtomicFloatFeaturesEXT.shaderImageFloat32AtomicAdd == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature shaderImageFloat32AtomicAdd not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT in APIs []
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_shader_atomic_float2")) )
	{
		if ( ( physicalDeviceShaderAtomicFloat2FeaturesEXT.shaderBufferFloat16Atomics == VK_FALSE ) && ( physicalDeviceShaderAtomicFloat2FeaturesEXT.shaderBufferFloat16AtomicAdd == VK_FALSE ) && ( physicalDeviceShaderAtomicFloat2FeaturesEXT.shaderBufferFloat16AtomicMinMax == VK_FALSE ) && ( physicalDeviceShaderAtomicFloat2FeaturesEXT.shaderBufferFloat32AtomicMinMax == VK_FALSE ) && ( physicalDeviceShaderAtomicFloat2FeaturesEXT.shaderBufferFloat64AtomicMinMax == VK_FALSE ) && ( physicalDeviceShaderAtomicFloat2FeaturesEXT.shaderSharedFloat16Atomics == VK_FALSE ) && ( physicalDeviceShaderAtomicFloat2FeaturesEXT.shaderSharedFloat16AtomicAdd == VK_FALSE ) && ( physicalDeviceShaderAtomicFloat2FeaturesEXT.shaderSharedFloat16AtomicMinMax == VK_FALSE ) && ( physicalDeviceShaderAtomicFloat2FeaturesEXT.shaderSharedFloat32AtomicMinMax == VK_FALSE ) && ( physicalDeviceShaderAtomicFloat2FeaturesEXT.shaderSharedFloat64AtomicMinMax == VK_FALSE ) && ( physicalDeviceShaderAtomicFloat2FeaturesEXT.shaderImageFloat32AtomicMinMax == VK_FALSE ) )
		{
			log << tcu::TestLog::Message << "Mandatory feature shaderBufferFloat16Atomics or shaderBufferFloat16AtomicAdd or shaderBufferFloat16AtomicMinMax or shaderBufferFloat32AtomicMinMax or shaderBufferFloat64AtomicMinMax or shaderSharedFloat16Atomics or shaderSharedFloat16AtomicAdd or shaderSharedFloat16AtomicMinMax or shaderSharedFloat32AtomicMinMax or shaderSharedFloat64AtomicMinMax or shaderImageFloat32AtomicMinMax not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT in APIs []
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_shader_atomic_float2")) && isExtensionStructSupported(deviceExtensions, RequiredExtension("VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT::sparseImageFloat32AtomicMinMax")) )
	{
		if ( physicalDeviceShaderAtomicFloat2FeaturesEXT.shaderImageFloat32AtomicMinMax == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature shaderImageFloat32AtomicMinMax not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT in APIs []
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_shader_demote_to_helper_invocation")) )
	{
		if ( physicalDeviceShaderDemoteToHelperInvocationFeatures.shaderDemoteToHelperInvocation == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature shaderDemoteToHelperInvocation not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceShaderFloat8FeaturesEXT in APIs []
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_shader_float8")) )
	{
		if ( physicalDeviceShaderFloat8FeaturesEXT.shaderFloat8 == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature shaderFloat8 not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceFeatures in APIs [vulkan, vulkansc]
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_shader_image_atomic_int64")) )
	{
		if ( coreFeatures.features.shaderInt64 == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature shaderInt64 not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT in APIs [vulkan, vulkansc]
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_shader_image_atomic_int64")) )
	{
		if ( physicalDeviceShaderImageAtomicInt64FeaturesEXT.shaderImageInt64Atomics == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature shaderImageInt64Atomics not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT in APIs []
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_shader_module_identifier")) )
	{
		if ( physicalDeviceShaderModuleIdentifierFeaturesEXT.shaderModuleIdentifier == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature shaderModuleIdentifier not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceShaderObjectFeaturesEXT in APIs []
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_shader_object")) )
	{
		if ( physicalDeviceShaderObjectFeaturesEXT.shaderObject == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature shaderObject not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceShaderReplicatedCompositesFeaturesEXT in APIs []
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_shader_replicated_composites")) )
	{
		if ( physicalDeviceShaderReplicatedCompositesFeaturesEXT.shaderReplicatedComposites == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature shaderReplicatedComposites not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceSubgroupSizeControlFeaturesEXT in APIs []
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_subgroup_size_control")) )
	{
		if ( physicalDeviceSubgroupSizeControlFeatures.subgroupSizeControl == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature subgroupSizeControl not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceSubgroupSizeControlFeaturesEXT in APIs []
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_subgroup_size_control")) )
	{
		if ( physicalDeviceSubgroupSizeControlFeatures.computeFullSubgroups == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature computeFullSubgroups not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT in APIs []
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_subpass_merge_feedback")) && isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_create_renderpass2")) )
	{
		if ( physicalDeviceSubpassMergeFeedbackFeaturesEXT.subpassMergeFeedback == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature subpassMergeFeedback not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT in APIs []
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_swapchain_maintenance1")) )
	{
		if ( physicalDeviceSwapchainMaintenance1FeaturesKHR.swapchainMaintenance1 == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature swapchainMaintenance1 not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT in APIs []
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_texel_buffer_alignment")) )
	{
		if ( physicalDeviceTexelBufferAlignmentFeaturesEXT.texelBufferAlignment == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature texelBufferAlignment not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT in APIs []
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_texture_compression_astc_hdr")) )
	{
		if ( physicalDeviceTextureCompressionASTCHDRFeatures.textureCompressionASTC_HDR == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature textureCompressionASTC_HDR not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceTransformFeedbackFeaturesEXT in APIs []
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_transform_feedback")) )
	{
		if ( physicalDeviceTransformFeedbackFeaturesEXT.transformFeedback == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature transformFeedback not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT in APIs []
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_vertex_input_dynamic_state")) )
	{
		if ( physicalDeviceVertexInputDynamicStateFeaturesEXT.vertexInputDynamicState == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature vertexInputDynamicState not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT in APIs []
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_ycbcr_2plane_444_formats")) )
	{
		if ( physicalDeviceYcbcr2Plane444FormatsFeaturesEXT.ycbcr2plane444Formats == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature ycbcr2plane444Formats not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceYcbcrImageArraysFeaturesEXT in APIs []
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_ycbcr_image_arrays")) )
	{
		if ( physicalDeviceYcbcrImageArraysFeaturesEXT.ycbcrImageArrays == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature ycbcrImageArrays not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceZeroInitializeDeviceMemoryFeaturesEXT in APIs []
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_zero_initialize_device_memory")) )
	{
		if ( physicalDeviceZeroInitializeDeviceMemoryFeaturesEXT.zeroInitializeDeviceMemory == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature zeroInitializeDeviceMemory not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDevice16BitStorageFeaturesKHR in APIs []
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_16bit_storage")) )
	{
		if ( physicalDevice16BitStorageFeatures.storageBuffer16BitAccess == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature storageBuffer16BitAccess not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDevice8BitStorageFeaturesKHR in APIs []
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_8bit_storage")) )
	{
		if ( physicalDevice8BitStorageFeatures.storageBuffer8BitAccess == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature storageBuffer8BitAccess not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceAccelerationStructureFeaturesKHR in APIs []
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_acceleration_structure")) )
	{
		if ( physicalDeviceAccelerationStructureFeaturesKHR.accelerationStructure == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature accelerationStructure not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceAccelerationStructureFeaturesKHR in APIs []
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_acceleration_structure")) )
	{
		if ( physicalDeviceAccelerationStructureFeaturesKHR.descriptorBindingAccelerationStructureUpdateAfterBind == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature descriptorBindingAccelerationStructureUpdateAfterBind not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceBufferDeviceAddressFeatures in APIs []
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_acceleration_structure")) )
	{
		if ( physicalDeviceBufferDeviceAddressFeatures.bufferDeviceAddress == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature bufferDeviceAddress not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceVulkan12Features in APIs []
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_acceleration_structure")) && isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_VERSION_1_2")) )
	{
		if ( physicalDeviceVulkan12Features.descriptorIndexing == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature descriptorIndexing not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceBufferDeviceAddressFeaturesKHR in APIs []
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_buffer_device_address")) )
	{
		if ( physicalDeviceBufferDeviceAddressFeatures.bufferDeviceAddress == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature bufferDeviceAddress not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceComputeShaderDerivativesFeaturesKHR in APIs []
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_compute_shader_derivatives")) )
	{
		if ( physicalDeviceComputeShaderDerivativesFeaturesKHR.computeDerivativeGroupLinear == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature computeDerivativeGroupLinear not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceCooperativeMatrixFeaturesKHR in APIs []
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_cooperative_matrix")) )
	{
		if ( physicalDeviceCooperativeMatrixFeaturesKHR.cooperativeMatrix == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature cooperativeMatrix not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceDepthClampZeroOneFeaturesKHR in APIs []
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_depth_clamp_zero_one")) )
	{
		if ( physicalDeviceDepthClampZeroOneFeaturesKHR.depthClampZeroOne == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature depthClampZeroOne not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceDynamicRenderingFeaturesKHR in APIs [vulkan]
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_dynamic_rendering")) )
	{
		if ( physicalDeviceDynamicRenderingFeatures.dynamicRendering == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature dynamicRendering not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceDynamicRenderingLocalReadFeaturesKHR in APIs [vulkan]
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_dynamic_rendering_local_read")) )
	{
		if ( physicalDeviceDynamicRenderingLocalReadFeatures.dynamicRenderingLocalRead == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature dynamicRenderingLocalRead not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR in APIs []
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_fragment_shader_barycentric")) )
	{
		if ( physicalDeviceFragmentShaderBarycentricFeaturesKHR.fragmentShaderBarycentric == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature fragmentShaderBarycentric not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceFragmentShadingRateFeaturesKHR in APIs [vulkan, vulkansc]
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_fragment_shading_rate")) )
	{
		if ( physicalDeviceFragmentShadingRateFeaturesKHR.pipelineFragmentShadingRate == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature pipelineFragmentShadingRate not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR in APIs [vulkan, vulkansc]
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_global_priority")) )
	{
		if ( physicalDeviceGlobalPriorityQueryFeatures.globalPriorityQuery == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature globalPriorityQuery not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceImagelessFramebufferFeaturesKHR in APIs []
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_imageless_framebuffer")) )
	{
		if ( physicalDeviceImagelessFramebufferFeatures.imagelessFramebuffer == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature imagelessFramebuffer not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceIndexTypeUint8FeaturesKHR in APIs [vulkan, vulkansc]
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_index_type_uint8")) )
	{
		if ( physicalDeviceIndexTypeUint8Features.indexTypeUint8 == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature indexTypeUint8 not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceLineRasterizationFeaturesKHR in APIs [vulkan, vulkansc]
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_line_rasterization")) )
	{
		if ( ( physicalDeviceLineRasterizationFeatures.rectangularLines == VK_FALSE ) && ( physicalDeviceLineRasterizationFeatures.bresenhamLines == VK_FALSE ) && ( physicalDeviceLineRasterizationFeatures.smoothLines == VK_FALSE ) && ( physicalDeviceLineRasterizationFeatures.stippledRectangularLines == VK_FALSE ) && ( physicalDeviceLineRasterizationFeatures.stippledBresenhamLines == VK_FALSE ) && ( physicalDeviceLineRasterizationFeatures.stippledSmoothLines == VK_FALSE ) )
		{
			log << tcu::TestLog::Message << "Mandatory feature rectangularLines or bresenhamLines or smoothLines or stippledRectangularLines or stippledBresenhamLines or stippledSmoothLines not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceMaintenance4FeaturesKHR in APIs [vulkan]
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_maintenance4")) )
	{
		if ( physicalDeviceMaintenance4Features.maintenance4 == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature maintenance4 not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceMaintenance5FeaturesKHR in APIs [vulkan]
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_maintenance5")) )
	{
		if ( physicalDeviceMaintenance5Features.maintenance5 == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature maintenance5 not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceMaintenance6FeaturesKHR in APIs [vulkan]
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_maintenance6")) )
	{
		if ( physicalDeviceMaintenance6Features.maintenance6 == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature maintenance6 not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceMaintenance7FeaturesKHR in APIs []
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_maintenance7")) )
	{
		if ( physicalDeviceMaintenance7FeaturesKHR.maintenance7 == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature maintenance7 not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceMaintenance8FeaturesKHR in APIs []
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_maintenance8")) )
	{
		if ( physicalDeviceMaintenance8FeaturesKHR.maintenance8 == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature maintenance8 not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceMaintenance9FeaturesKHR in APIs []
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_maintenance9")) )
	{
		if ( physicalDeviceMaintenance9FeaturesKHR.maintenance9 == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature maintenance9 not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceMultiviewFeaturesKHR in APIs []
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_multiview")) )
	{
		if ( physicalDeviceMultiviewFeatures.multiview == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature multiview not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDevicePerformanceQueryFeaturesKHR in APIs [vulkan, vulkansc]
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_performance_query")) )
	{
		if ( physicalDevicePerformanceQueryFeaturesKHR.performanceCounterQueryPools == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature performanceCounterQueryPools not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDevicePipelineBinaryFeaturesKHR in APIs []
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_pipeline_binary")) )
	{
		if ( physicalDevicePipelineBinaryFeaturesKHR.pipelineBinaries == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature pipelineBinaries not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR in APIs []
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_pipeline_executable_properties")) )
	{
		if ( physicalDevicePipelineExecutablePropertiesFeaturesKHR.pipelineExecutableInfo == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature pipelineExecutableInfo not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDevicePresentIdFeaturesKHR in APIs []
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_present_id")) )
	{
		if ( physicalDevicePresentIdFeaturesKHR.presentId == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature presentId not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDevicePresentId2FeaturesKHR in APIs []
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_present_id2")) )
	{
		if ( physicalDevicePresentId2FeaturesKHR.presentId2 == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature presentId2 not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDevicePresentModeFifoLatestReadyFeaturesKHR in APIs []
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_present_mode_fifo_latest_ready")) )
	{
		if ( physicalDevicePresentModeFifoLatestReadyFeaturesKHR.presentModeFifoLatestReady == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature presentModeFifoLatestReady not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDevicePresentWaitFeaturesKHR in APIs []
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_present_wait")) )
	{
		if ( physicalDevicePresentWaitFeaturesKHR.presentWait == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature presentWait not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDevicePresentWait2FeaturesKHR in APIs []
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_present_wait2")) )
	{
		if ( physicalDevicePresentWait2FeaturesKHR.presentWait2 == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature presentWait2 not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceRayQueryFeaturesKHR in APIs []
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_ray_query")) )
	{
		if ( physicalDeviceRayQueryFeaturesKHR.rayQuery == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature rayQuery not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR in APIs []
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_ray_tracing_maintenance1")) )
	{
		if ( physicalDeviceRayTracingMaintenance1FeaturesKHR.rayTracingMaintenance1 == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature rayTracingMaintenance1 not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceRayTracingPipelineFeaturesKHR in APIs []
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_ray_tracing_pipeline")) )
	{
		if ( ( physicalDeviceRayTracingPipelineFeaturesKHR.rayTracingPipeline == VK_FALSE ) && ( physicalDeviceRayTracingPipelineFeaturesKHR.rayTracingPipelineTraceRaysIndirect == VK_FALSE ) )
		{
			log << tcu::TestLog::Message << "Mandatory feature rayTracingPipeline or rayTracingPipelineTraceRaysIndirect not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceRayTracingPipelineFeaturesKHR in APIs []
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_ray_tracing_pipeline")) && isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_ray_query")) )
	{
		if ( physicalDeviceRayTracingPipelineFeaturesKHR.rayTraversalPrimitiveCulling == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature rayTraversalPrimitiveCulling not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR in APIs []
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_ray_tracing_position_fetch")) )
	{
		if ( physicalDeviceRayTracingPositionFetchFeaturesKHR.rayTracingPositionFetch == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature rayTracingPositionFetch not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceRobustness2FeaturesKHR in APIs []
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_robustness2")) )
	{
		if ( ( physicalDeviceRobustness2FeaturesKHR.robustBufferAccess2 == VK_FALSE ) && ( physicalDeviceRobustness2FeaturesKHR.robustImageAccess2 == VK_FALSE ) && ( physicalDeviceRobustness2FeaturesKHR.nullDescriptor == VK_FALSE ) )
		{
			log << tcu::TestLog::Message << "Mandatory feature robustBufferAccess2 or robustImageAccess2 or nullDescriptor not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR in APIs []
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_sampler_ycbcr_conversion")) )
	{
		if ( physicalDeviceSamplerYcbcrConversionFeatures.samplerYcbcrConversion == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature samplerYcbcrConversion not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHR in APIs []
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_separate_depth_stencil_layouts")) )
	{
		if ( physicalDeviceSeparateDepthStencilLayoutsFeatures.separateDepthStencilLayouts == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature separateDepthStencilLayouts not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceShaderAtomicInt64FeaturesKHR in APIs []
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_shader_atomic_int64")) )
	{
		if ( physicalDeviceShaderAtomicInt64Features.shaderBufferInt64Atomics == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature shaderBufferInt64Atomics not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceShaderBfloat16FeaturesKHR in APIs []
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_shader_bfloat16")) )
	{
		if ( ( physicalDeviceShaderBfloat16FeaturesKHR.shaderBFloat16Type == VK_FALSE ) && ( physicalDeviceShaderBfloat16FeaturesKHR.shaderBFloat16CooperativeMatrix == VK_FALSE ) && ( physicalDeviceShaderBfloat16FeaturesKHR.shaderBFloat16DotProduct == VK_FALSE ) )
		{
			log << tcu::TestLog::Message << "Mandatory feature shaderBFloat16Type or shaderBFloat16CooperativeMatrix or shaderBFloat16DotProduct not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceShaderClockFeaturesKHR in APIs [vulkan, vulkansc]
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_shader_clock")) )
	{
		if ( physicalDeviceShaderClockFeaturesKHR.shaderSubgroupClock == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature shaderSubgroupClock not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceShaderExpectAssumeFeaturesKHR in APIs [vulkan]
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_shader_expect_assume")) )
	{
		if ( physicalDeviceShaderExpectAssumeFeatures.shaderExpectAssume == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature shaderExpectAssume not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceShaderFloat16Int8FeaturesKHR in APIs []
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_shader_float16_int8")) )
	{
		if ( ( physicalDeviceShaderFloat16Int8Features.shaderFloat16 == VK_FALSE ) && ( physicalDeviceShaderFloat16Int8Features.shaderInt8 == VK_FALSE ) )
		{
			log << tcu::TestLog::Message << "Mandatory feature shaderFloat16 or shaderInt8 not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceShaderFloatControls2FeaturesKHR in APIs [vulkan]
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_shader_float_controls2")) )
	{
		if ( physicalDeviceShaderFloatControls2Features.shaderFloatControls2 == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature shaderFloatControls2 not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceShaderIntegerDotProductFeaturesKHR in APIs [vulkan]
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_shader_integer_dot_product")) )
	{
		if ( physicalDeviceShaderIntegerDotProductFeatures.shaderIntegerDotProduct == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature shaderIntegerDotProduct not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceShaderMaximalReconvergenceFeaturesKHR in APIs []
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_shader_maximal_reconvergence")) )
	{
		if ( physicalDeviceShaderMaximalReconvergenceFeaturesKHR.shaderMaximalReconvergence == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature shaderMaximalReconvergence not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceShaderQuadControlFeaturesKHR in APIs []
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_shader_quad_control")) )
	{
		if ( physicalDeviceShaderQuadControlFeaturesKHR.shaderQuadControl == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature shaderQuadControl not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceShaderRelaxedExtendedInstructionFeaturesKHR in APIs []
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_shader_relaxed_extended_instruction")) )
	{
		if ( physicalDeviceShaderRelaxedExtendedInstructionFeaturesKHR.shaderRelaxedExtendedInstruction == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature shaderRelaxedExtendedInstruction not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR in APIs []
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_shader_subgroup_extended_types")) )
	{
		if ( physicalDeviceShaderSubgroupExtendedTypesFeatures.shaderSubgroupExtendedTypes == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature shaderSubgroupExtendedTypes not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceShaderSubgroupRotateFeaturesKHR in APIs [vulkan]
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_shader_subgroup_rotate")) )
	{
		if ( physicalDeviceShaderSubgroupRotateFeatures.shaderSubgroupRotate == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature shaderSubgroupRotate not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR in APIs []
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_shader_subgroup_uniform_control_flow")) )
	{
		if ( physicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR.shaderSubgroupUniformControlFlow == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature shaderSubgroupUniformControlFlow not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR in APIs [vulkan, vulkansc]
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_shader_terminate_invocation")) )
	{
		if ( physicalDeviceShaderTerminateInvocationFeatures.shaderTerminateInvocation == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature shaderTerminateInvocation not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceShaderUntypedPointersFeaturesKHR in APIs []
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_shader_untyped_pointers")) )
	{
		if ( physicalDeviceShaderUntypedPointersFeaturesKHR.shaderUntypedPointers == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature shaderUntypedPointers not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceSwapchainMaintenance1FeaturesKHR in APIs []
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_swapchain_maintenance1")) )
	{
		if ( physicalDeviceSwapchainMaintenance1FeaturesKHR.swapchainMaintenance1 == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature swapchainMaintenance1 not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceSynchronization2FeaturesKHR in APIs [vulkan, vulkansc]
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_synchronization2")) )
	{
		if ( physicalDeviceSynchronization2Features.synchronization2 == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature synchronization2 not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceTimelineSemaphoreFeaturesKHR in APIs []
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_timeline_semaphore")) )
	{
		if ( physicalDeviceTimelineSemaphoreFeatures.timelineSemaphore == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature timelineSemaphore not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceUnifiedImageLayoutsFeaturesKHR in APIs []
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_unified_image_layouts")) )
	{
		if ( physicalDeviceUnifiedImageLayoutsFeaturesKHR.unifiedImageLayouts == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature unifiedImageLayouts not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR in APIs []
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_uniform_buffer_standard_layout")) )
	{
		if ( physicalDeviceUniformBufferStandardLayoutFeatures.uniformBufferStandardLayout == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature uniformBufferStandardLayout not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceVariablePointerFeaturesKHR in APIs []
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_variable_pointers")) )
	{
		if ( physicalDeviceVariablePointersFeatures.variablePointersStorageBuffer == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature variablePointersStorageBuffer not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceVertexAttributeDivisorFeaturesKHR in APIs [vulkan, vulkansc]
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_vertex_attribute_divisor")) )
	{
		if ( physicalDeviceVertexAttributeDivisorFeatures.vertexAttributeInstanceRateDivisor == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature vertexAttributeInstanceRateDivisor not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceVideoDecodeVP9FeaturesKHR in APIs []
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_video_decode_vp9")) )
	{
		if ( physicalDeviceVideoDecodeVP9FeaturesKHR.videoDecodeVP9 == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature videoDecodeVP9 not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceVideoEncodeAV1FeaturesKHR in APIs []
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_video_encode_av1")) )
	{
		if ( physicalDeviceVideoEncodeAV1FeaturesKHR.videoEncodeAV1 == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature videoEncodeAV1 not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceVideoEncodeIntraRefreshFeaturesKHR in APIs []
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_video_encode_intra_refresh")) )
	{
		if ( physicalDeviceVideoEncodeIntraRefreshFeaturesKHR.videoEncodeIntraRefresh == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature videoEncodeIntraRefresh not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceVideoEncodeQuantizationMapFeaturesKHR in APIs []
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_video_encode_quantization_map")) )
	{
		if ( physicalDeviceVideoEncodeQuantizationMapFeaturesKHR.videoEncodeQuantizationMap == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature videoEncodeQuantizationMap not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceVideoMaintenance1FeaturesKHR in APIs []
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_video_maintenance1")) )
	{
		if ( physicalDeviceVideoMaintenance1FeaturesKHR.videoMaintenance1 == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature videoMaintenance1 not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceVideoMaintenance2FeaturesKHR in APIs []
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_video_maintenance2")) )
	{
		if ( physicalDeviceVideoMaintenance2FeaturesKHR.videoMaintenance2 == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature videoMaintenance2 not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceVulkanMemoryModelFeaturesKHR in APIs []
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_vulkan_memory_model")) )
	{
		if ( physicalDeviceVulkanMemoryModelFeatures.vulkanMemoryModel == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature vulkanMemoryModel not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR in APIs []
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_workgroup_memory_explicit_layout")) )
	{
		if ( physicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR.workgroupMemoryExplicitLayout == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature workgroupMemoryExplicitLayout not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR in APIs [vulkan]
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_zero_initialize_workgroup_memory")) )
	{
		if ( physicalDeviceZeroInitializeWorkgroupMemoryFeatures.shaderZeroInitializeWorkgroupMemory == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature shaderZeroInitializeWorkgroupMemory not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceCooperativeMatrix2FeaturesNV in APIs [vulkan]
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_NV_cooperative_matrix2")) )
	{
		if ( ( physicalDeviceCooperativeMatrix2FeaturesNV.cooperativeMatrixWorkgroupScope == VK_FALSE ) && ( physicalDeviceCooperativeMatrix2FeaturesNV.cooperativeMatrixFlexibleDimensions == VK_FALSE ) && ( physicalDeviceCooperativeMatrix2FeaturesNV.cooperativeMatrixReductions == VK_FALSE ) && ( physicalDeviceCooperativeMatrix2FeaturesNV.cooperativeMatrixConversions == VK_FALSE ) && ( physicalDeviceCooperativeMatrix2FeaturesNV.cooperativeMatrixPerElementOperations == VK_FALSE ) && ( physicalDeviceCooperativeMatrix2FeaturesNV.cooperativeMatrixTensorAddressing == VK_FALSE ) && ( physicalDeviceCooperativeMatrix2FeaturesNV.cooperativeMatrixBlockLoads == VK_FALSE ) )
		{
			log << tcu::TestLog::Message << "Mandatory feature cooperativeMatrixWorkgroupScope or cooperativeMatrixFlexibleDimensions or cooperativeMatrixReductions or cooperativeMatrixConversions or cooperativeMatrixPerElementOperations or cooperativeMatrixTensorAddressing or cooperativeMatrixBlockLoads not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceCooperativeVectorFeaturesNV in APIs [vulkan]
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_NV_cooperative_vector")) )
	{
		if ( physicalDeviceCooperativeVectorFeaturesNV.cooperativeVector == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature cooperativeVector not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV in APIs [vulkan]
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_NV_device_generated_commands")) )
	{
		if ( physicalDeviceDeviceGeneratedCommandsFeaturesNV.deviceGeneratedCommands == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature deviceGeneratedCommands not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV in APIs [vulkan]
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_NV_device_generated_commands_compute")) )
	{
		if ( physicalDeviceDeviceGeneratedCommandsComputeFeaturesNV.deviceGeneratedCompute == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature deviceGeneratedCompute not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceRawAccessChainsFeaturesNV in APIs []
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_NV_raw_access_chains")) )
	{
		if ( physicalDeviceRawAccessChainsFeaturesNV.shaderRawAccessChains == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature shaderRawAccessChains not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceShaderAtomicFloat16VectorFeaturesNV in APIs []
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_NV_shader_atomic_float16_vector")) )
	{
		if ( physicalDeviceShaderAtomicFloat16VectorFeaturesNV.shaderFloat16VectorAtomics == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature shaderFloat16VectorAtomics not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceMutableDescriptorTypeFeaturesVALVE in APIs []
	if ( isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_VALVE_mutable_descriptor_type")) )
	{
		if ( physicalDeviceMutableDescriptorTypeFeaturesEXT.mutableDescriptorType == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature mutableDescriptorType not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceFeatures in APIs []
	{
		if ( coreFeatures.features.robustBufferAccess == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature robustBufferAccess not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceFeatures in APIs []
	if ( physicalDeviceShaderAtomicInt64Features.shaderBufferInt64Atomics )
	{
		if ( coreFeatures.features.shaderInt64 == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature shaderInt64 not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceFeatures in APIs []
	if ( physicalDeviceVulkan12Features.shaderBufferInt64Atomics )
	{
		if ( coreFeatures.features.shaderInt64 == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature shaderInt64 not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceFeatures in APIs []
	if ( physicalDeviceShaderAtomicInt64Features.shaderSharedInt64Atomics )
	{
		if ( coreFeatures.features.shaderInt64 == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature shaderInt64 not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceFeatures in APIs []
	if ( physicalDeviceVulkan12Features.shaderSharedInt64Atomics )
	{
		if ( coreFeatures.features.shaderInt64 == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature shaderInt64 not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceMultiviewFeatures in APIs [vulkan]
	if ( context.contextSupports(vk::ApiVersion(0, 1, 1, 0)) )
	{
		if ( physicalDeviceMultiviewFeatures.multiview == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature multiview not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceFeatures in APIs []
	if ( context.contextSupports(vk::ApiVersion(0, 1, 2, 0)) && physicalDeviceVulkan12Features.descriptorIndexing )
	{
		if ( coreFeatures.features.shaderSampledImageArrayDynamicIndexing == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature shaderSampledImageArrayDynamicIndexing not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceFeatures in APIs []
	if ( context.contextSupports(vk::ApiVersion(0, 1, 2, 0)) && physicalDeviceVulkan12Features.descriptorIndexing )
	{
		if ( coreFeatures.features.shaderStorageBufferArrayDynamicIndexing == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature shaderStorageBufferArrayDynamicIndexing not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceVulkan12Features in APIs []
	if ( context.contextSupports(vk::ApiVersion(0, 1, 2, 0)) )
	{
		if ( physicalDeviceVulkan12Features.subgroupBroadcastDynamicId == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature subgroupBroadcastDynamicId not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceVulkan12Features in APIs []
	if ( context.contextSupports(vk::ApiVersion(0, 1, 2, 0)) )
	{
		if ( physicalDeviceVulkan12Features.shaderSubgroupExtendedTypes == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature shaderSubgroupExtendedTypes not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceVulkan12Features in APIs []
	if ( context.contextSupports(vk::ApiVersion(0, 1, 2, 0)) )
	{
		if ( physicalDeviceVulkan12Features.imagelessFramebuffer == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature imagelessFramebuffer not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceVulkan12Features in APIs []
	if ( context.contextSupports(vk::ApiVersion(0, 1, 2, 0)) )
	{
		if ( physicalDeviceVulkan12Features.uniformBufferStandardLayout == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature uniformBufferStandardLayout not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceVulkan12Features in APIs []
	if ( context.contextSupports(vk::ApiVersion(0, 1, 2, 0)) )
	{
		if ( physicalDeviceVulkan12Features.separateDepthStencilLayouts == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature separateDepthStencilLayouts not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceVulkan12Features in APIs []
	if ( context.contextSupports(vk::ApiVersion(0, 1, 2, 0)) )
	{
		if ( physicalDeviceVulkan12Features.hostQueryReset == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature hostQueryReset not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceVulkan12Features in APIs [vulkan]
	if ( context.contextSupports(vk::ApiVersion(0, 1, 2, 0)) )
	{
		if ( physicalDeviceVulkan12Features.timelineSemaphore == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature timelineSemaphore not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceVulkan12Features in APIs []
	if ( context.contextSupports(vk::ApiVersion(0, 1, 2, 0)) && physicalDeviceVulkan12Features.descriptorIndexing )
	{
		if ( physicalDeviceVulkan12Features.shaderUniformTexelBufferArrayDynamicIndexing == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature shaderUniformTexelBufferArrayDynamicIndexing not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceVulkan12Features in APIs []
	if ( context.contextSupports(vk::ApiVersion(0, 1, 2, 0)) && physicalDeviceVulkan12Features.descriptorIndexing )
	{
		if ( physicalDeviceVulkan12Features.shaderStorageTexelBufferArrayDynamicIndexing == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature shaderStorageTexelBufferArrayDynamicIndexing not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceVulkan12Features in APIs []
	if ( context.contextSupports(vk::ApiVersion(0, 1, 2, 0)) && physicalDeviceVulkan12Features.descriptorIndexing )
	{
		if ( physicalDeviceVulkan12Features.shaderSampledImageArrayNonUniformIndexing == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature shaderSampledImageArrayNonUniformIndexing not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceVulkan12Features in APIs []
	if ( context.contextSupports(vk::ApiVersion(0, 1, 2, 0)) && physicalDeviceVulkan12Features.descriptorIndexing )
	{
		if ( physicalDeviceVulkan12Features.shaderStorageBufferArrayNonUniformIndexing == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature shaderStorageBufferArrayNonUniformIndexing not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceVulkan12Features in APIs []
	if ( context.contextSupports(vk::ApiVersion(0, 1, 2, 0)) && physicalDeviceVulkan12Features.descriptorIndexing )
	{
		if ( physicalDeviceVulkan12Features.shaderUniformTexelBufferArrayNonUniformIndexing == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature shaderUniformTexelBufferArrayNonUniformIndexing not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceVulkan12Features in APIs []
	if ( context.contextSupports(vk::ApiVersion(0, 1, 2, 0)) && physicalDeviceVulkan12Features.descriptorIndexing )
	{
		if ( physicalDeviceVulkan12Features.descriptorBindingSampledImageUpdateAfterBind == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature descriptorBindingSampledImageUpdateAfterBind not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceVulkan12Features in APIs []
	if ( context.contextSupports(vk::ApiVersion(0, 1, 2, 0)) && physicalDeviceVulkan12Features.descriptorIndexing )
	{
		if ( physicalDeviceVulkan12Features.descriptorBindingStorageImageUpdateAfterBind == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature descriptorBindingStorageImageUpdateAfterBind not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceVulkan12Features in APIs []
	if ( context.contextSupports(vk::ApiVersion(0, 1, 2, 0)) && physicalDeviceVulkan12Features.descriptorIndexing )
	{
		if ( physicalDeviceVulkan12Features.descriptorBindingStorageBufferUpdateAfterBind == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature descriptorBindingStorageBufferUpdateAfterBind not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceVulkan12Features in APIs []
	if ( context.contextSupports(vk::ApiVersion(0, 1, 2, 0)) && physicalDeviceVulkan12Features.descriptorIndexing )
	{
		if ( physicalDeviceVulkan12Features.descriptorBindingUniformTexelBufferUpdateAfterBind == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature descriptorBindingUniformTexelBufferUpdateAfterBind not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceVulkan12Features in APIs []
	if ( context.contextSupports(vk::ApiVersion(0, 1, 2, 0)) && physicalDeviceVulkan12Features.descriptorIndexing )
	{
		if ( physicalDeviceVulkan12Features.descriptorBindingStorageTexelBufferUpdateAfterBind == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature descriptorBindingStorageTexelBufferUpdateAfterBind not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceVulkan12Features in APIs []
	if ( context.contextSupports(vk::ApiVersion(0, 1, 2, 0)) && physicalDeviceVulkan12Features.descriptorIndexing )
	{
		if ( physicalDeviceVulkan12Features.descriptorBindingUpdateUnusedWhilePending == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature descriptorBindingUpdateUnusedWhilePending not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceVulkan12Features in APIs []
	if ( context.contextSupports(vk::ApiVersion(0, 1, 2, 0)) && physicalDeviceVulkan12Features.descriptorIndexing )
	{
		if ( physicalDeviceVulkan12Features.descriptorBindingPartiallyBound == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature descriptorBindingPartiallyBound not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceVulkan12Features in APIs []
	if ( context.contextSupports(vk::ApiVersion(0, 1, 2, 0)) && physicalDeviceVulkan12Features.descriptorIndexing )
	{
		if ( physicalDeviceVulkan12Features.runtimeDescriptorArray == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature runtimeDescriptorArray not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceVulkan12Features in APIs []
	if ( context.contextSupports(vk::ApiVersion(0, 1, 2, 0)) && physicalDeviceShaderAtomicInt64Features.shaderBufferInt64Atomics )
	{
		if ( physicalDeviceVulkan12Features.shaderBufferInt64Atomics == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature shaderBufferInt64Atomics not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceVulkan12Features in APIs []
	if ( context.contextSupports(vk::ApiVersion(0, 1, 2, 0)) && isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_draw_indirect_count")) )
	{
		if ( physicalDeviceVulkan12Features.drawIndirectCount == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature drawIndirectCount not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceVulkan12Features in APIs []
	if ( context.contextSupports(vk::ApiVersion(0, 1, 2, 0)) && isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_sampler_mirror_clamp_to_edge")) )
	{
		if ( physicalDeviceVulkan12Features.samplerMirrorClampToEdge == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature samplerMirrorClampToEdge not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceVulkan12Features in APIs []
	if ( context.contextSupports(vk::ApiVersion(0, 1, 2, 0)) && isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_sampler_filter_minmax")) )
	{
		if ( physicalDeviceVulkan12Features.samplerFilterMinmax == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature samplerFilterMinmax not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceVulkan12Features in APIs []
	if ( context.contextSupports(vk::ApiVersion(0, 1, 2, 0)) && isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_shader_viewport_index_layer")) )
	{
		if ( physicalDeviceVulkan12Features.shaderOutputViewportIndex == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature shaderOutputViewportIndex not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceVulkan12Features in APIs []
	if ( context.contextSupports(vk::ApiVersion(0, 1, 2, 0)) && isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_EXT_shader_viewport_index_layer")) )
	{
		if ( physicalDeviceVulkan12Features.shaderOutputLayer == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature shaderOutputLayer not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceVulkan12Features in APIs []
	if ( context.contextSupports(vk::ApiVersion(0, 1, 2, 0)) && isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_acceleration_structure")) )
	{
		if ( physicalDeviceVulkan12Features.shaderUniformTexelBufferArrayDynamicIndexing == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature shaderUniformTexelBufferArrayDynamicIndexing not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceVulkan12Features in APIs []
	if ( context.contextSupports(vk::ApiVersion(0, 1, 2, 0)) && isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_acceleration_structure")) )
	{
		if ( physicalDeviceVulkan12Features.shaderStorageTexelBufferArrayDynamicIndexing == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature shaderStorageTexelBufferArrayDynamicIndexing not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceVulkan12Features in APIs []
	if ( context.contextSupports(vk::ApiVersion(0, 1, 2, 0)) && isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_acceleration_structure")) )
	{
		if ( physicalDeviceVulkan12Features.shaderSampledImageArrayNonUniformIndexing == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature shaderSampledImageArrayNonUniformIndexing not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceVulkan12Features in APIs []
	if ( context.contextSupports(vk::ApiVersion(0, 1, 2, 0)) && isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_acceleration_structure")) )
	{
		if ( physicalDeviceVulkan12Features.shaderStorageBufferArrayNonUniformIndexing == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature shaderStorageBufferArrayNonUniformIndexing not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceVulkan12Features in APIs []
	if ( context.contextSupports(vk::ApiVersion(0, 1, 2, 0)) && isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_acceleration_structure")) )
	{
		if ( physicalDeviceVulkan12Features.shaderUniformTexelBufferArrayNonUniformIndexing == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature shaderUniformTexelBufferArrayNonUniformIndexing not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceVulkan12Features in APIs []
	if ( context.contextSupports(vk::ApiVersion(0, 1, 2, 0)) && isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_acceleration_structure")) )
	{
		if ( physicalDeviceVulkan12Features.descriptorBindingSampledImageUpdateAfterBind == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature descriptorBindingSampledImageUpdateAfterBind not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceVulkan12Features in APIs []
	if ( context.contextSupports(vk::ApiVersion(0, 1, 2, 0)) && isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_acceleration_structure")) )
	{
		if ( physicalDeviceVulkan12Features.descriptorBindingStorageImageUpdateAfterBind == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature descriptorBindingStorageImageUpdateAfterBind not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceVulkan12Features in APIs []
	if ( context.contextSupports(vk::ApiVersion(0, 1, 2, 0)) && isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_acceleration_structure")) )
	{
		if ( physicalDeviceVulkan12Features.descriptorBindingStorageBufferUpdateAfterBind == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature descriptorBindingStorageBufferUpdateAfterBind not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceVulkan12Features in APIs []
	if ( context.contextSupports(vk::ApiVersion(0, 1, 2, 0)) && isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_acceleration_structure")) )
	{
		if ( physicalDeviceVulkan12Features.descriptorBindingUniformTexelBufferUpdateAfterBind == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature descriptorBindingUniformTexelBufferUpdateAfterBind not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceVulkan12Features in APIs []
	if ( context.contextSupports(vk::ApiVersion(0, 1, 2, 0)) && isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_acceleration_structure")) )
	{
		if ( physicalDeviceVulkan12Features.descriptorBindingStorageTexelBufferUpdateAfterBind == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature descriptorBindingStorageTexelBufferUpdateAfterBind not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceVulkan12Features in APIs []
	if ( context.contextSupports(vk::ApiVersion(0, 1, 2, 0)) && isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_acceleration_structure")) )
	{
		if ( physicalDeviceVulkan12Features.descriptorBindingUpdateUnusedWhilePending == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature descriptorBindingUpdateUnusedWhilePending not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceVulkan12Features in APIs []
	if ( context.contextSupports(vk::ApiVersion(0, 1, 2, 0)) && isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_acceleration_structure")) )
	{
		if ( physicalDeviceVulkan12Features.descriptorBindingPartiallyBound == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature descriptorBindingPartiallyBound not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceVulkan12Features in APIs []
	if ( context.contextSupports(vk::ApiVersion(0, 1, 2, 0)) && isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_acceleration_structure")) )
	{
		if ( physicalDeviceVulkan12Features.runtimeDescriptorArray == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature runtimeDescriptorArray not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceVulkan12Features in APIs []
	if ( context.contextSupports(vk::ApiVersion(0, 1, 2, 0)) && isExtensionStructSupported(deviceExtensions, RequiredExtension("VK_KHR_acceleration_structure")) )
	{
		if ( physicalDeviceVulkan12Features.bufferDeviceAddress == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature bufferDeviceAddress not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceVulkan12Features in APIs [vulkan]
	if ( context.contextSupports(vk::ApiVersion(0, 1, 3, 0)) )
	{
		if ( physicalDeviceVulkan12Features.bufferDeviceAddress == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature bufferDeviceAddress not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceVulkan12Features in APIs [vulkansc]
	// VkPhysicalDeviceVulkan12Features in APIs [vulkan]
	if ( context.contextSupports(vk::ApiVersion(0, 1, 3, 0)) )
	{
		if ( physicalDeviceVulkan12Features.vulkanMemoryModelDeviceScope == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature vulkanMemoryModelDeviceScope not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceVulkan13Features in APIs [vulkan]
	if ( context.contextSupports(vk::ApiVersion(0, 1, 3, 0)) )
	{
		if ( physicalDeviceVulkan13Features.robustImageAccess == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature robustImageAccess not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceVulkan13Features in APIs [vulkan]
	if ( context.contextSupports(vk::ApiVersion(0, 1, 3, 0)) )
	{
		if ( physicalDeviceVulkan13Features.inlineUniformBlock == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature inlineUniformBlock not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceVulkan13Features in APIs [vulkan]
	if ( context.contextSupports(vk::ApiVersion(0, 1, 3, 0)) && physicalDeviceVulkan12Features.descriptorIndexing )
	{
		if ( physicalDeviceVulkan13Features.descriptorBindingInlineUniformBlockUpdateAfterBind == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature descriptorBindingInlineUniformBlockUpdateAfterBind not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceVulkan13Features in APIs [vulkan]
	if ( context.contextSupports(vk::ApiVersion(0, 1, 3, 0)) )
	{
		if ( physicalDeviceVulkan13Features.pipelineCreationCacheControl == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature pipelineCreationCacheControl not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceVulkan13Features in APIs [vulkan]
	if ( context.contextSupports(vk::ApiVersion(0, 1, 3, 0)) )
	{
		if ( physicalDeviceVulkan13Features.privateData == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature privateData not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceVulkan13Features in APIs [vulkan]
	if ( context.contextSupports(vk::ApiVersion(0, 1, 3, 0)) )
	{
		if ( physicalDeviceVulkan13Features.shaderDemoteToHelperInvocation == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature shaderDemoteToHelperInvocation not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceVulkan13Features in APIs [vulkan]
	if ( context.contextSupports(vk::ApiVersion(0, 1, 3, 0)) )
	{
		if ( physicalDeviceVulkan13Features.shaderTerminateInvocation == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature shaderTerminateInvocation not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceVulkan13Features in APIs [vulkan]
	if ( context.contextSupports(vk::ApiVersion(0, 1, 3, 0)) )
	{
		if ( physicalDeviceVulkan13Features.subgroupSizeControl == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature subgroupSizeControl not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceVulkan13Features in APIs [vulkan]
	if ( context.contextSupports(vk::ApiVersion(0, 1, 3, 0)) )
	{
		if ( physicalDeviceVulkan13Features.computeFullSubgroups == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature computeFullSubgroups not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceVulkan13Features in APIs [vulkan]
	if ( context.contextSupports(vk::ApiVersion(0, 1, 3, 0)) )
	{
		if ( physicalDeviceVulkan13Features.synchronization2 == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature synchronization2 not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceVulkan13Features in APIs [vulkan]
	if ( context.contextSupports(vk::ApiVersion(0, 1, 3, 0)) )
	{
		if ( physicalDeviceVulkan13Features.shaderZeroInitializeWorkgroupMemory == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature shaderZeroInitializeWorkgroupMemory not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceVulkan13Features in APIs [vulkan]
	if ( context.contextSupports(vk::ApiVersion(0, 1, 3, 0)) )
	{
		if ( physicalDeviceVulkan13Features.dynamicRendering == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature dynamicRendering not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceVulkan13Features in APIs [vulkan]
	if ( context.contextSupports(vk::ApiVersion(0, 1, 3, 0)) )
	{
		if ( physicalDeviceVulkan13Features.shaderIntegerDotProduct == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature shaderIntegerDotProduct not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceVulkan13Features in APIs [vulkan]
	if ( context.contextSupports(vk::ApiVersion(0, 1, 3, 0)) )
	{
		if ( physicalDeviceVulkan13Features.maintenance4 == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature maintenance4 not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceFeatures in APIs [vulkan]
	if ( context.contextSupports(vk::ApiVersion(0, 1, 4, 0)) )
	{
		if ( coreFeatures.features.fullDrawIndexUint32 == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature fullDrawIndexUint32 not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceFeatures in APIs [vulkan]
	if ( context.contextSupports(vk::ApiVersion(0, 1, 4, 0)) )
	{
		if ( coreFeatures.features.imageCubeArray == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature imageCubeArray not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceFeatures in APIs [vulkan]
	if ( context.contextSupports(vk::ApiVersion(0, 1, 4, 0)) )
	{
		if ( coreFeatures.features.independentBlend == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature independentBlend not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceFeatures in APIs [vulkan]
	if ( context.contextSupports(vk::ApiVersion(0, 1, 4, 0)) )
	{
		if ( coreFeatures.features.sampleRateShading == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature sampleRateShading not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceFeatures in APIs [vulkan]
	if ( context.contextSupports(vk::ApiVersion(0, 1, 4, 0)) )
	{
		if ( coreFeatures.features.drawIndirectFirstInstance == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature drawIndirectFirstInstance not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceFeatures in APIs [vulkan]
	if ( context.contextSupports(vk::ApiVersion(0, 1, 4, 0)) )
	{
		if ( coreFeatures.features.depthClamp == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature depthClamp not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceFeatures in APIs [vulkan]
	if ( context.contextSupports(vk::ApiVersion(0, 1, 4, 0)) )
	{
		if ( coreFeatures.features.depthBiasClamp == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature depthBiasClamp not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceFeatures in APIs [vulkan]
	if ( context.contextSupports(vk::ApiVersion(0, 1, 4, 0)) )
	{
		if ( coreFeatures.features.largePoints == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature largePoints not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceFeatures in APIs [vulkan]
	if ( context.contextSupports(vk::ApiVersion(0, 1, 4, 0)) )
	{
		if ( coreFeatures.features.samplerAnisotropy == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature samplerAnisotropy not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceFeatures in APIs [vulkan]
	if ( context.contextSupports(vk::ApiVersion(0, 1, 4, 0)) )
	{
		if ( coreFeatures.features.fragmentStoresAndAtomics == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature fragmentStoresAndAtomics not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceFeatures in APIs [vulkan]
	if ( context.contextSupports(vk::ApiVersion(0, 1, 4, 0)) )
	{
		if ( coreFeatures.features.shaderImageGatherExtended == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature shaderImageGatherExtended not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceFeatures in APIs [vulkan]
	if ( context.contextSupports(vk::ApiVersion(0, 1, 4, 0)) )
	{
		if ( coreFeatures.features.shaderStorageImageExtendedFormats == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature shaderStorageImageExtendedFormats not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceFeatures in APIs [vulkan]
	if ( context.contextSupports(vk::ApiVersion(0, 1, 4, 0)) )
	{
		if ( coreFeatures.features.shaderUniformBufferArrayDynamicIndexing == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature shaderUniformBufferArrayDynamicIndexing not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceFeatures in APIs [vulkan]
	if ( context.contextSupports(vk::ApiVersion(0, 1, 4, 0)) )
	{
		if ( coreFeatures.features.shaderSampledImageArrayDynamicIndexing == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature shaderSampledImageArrayDynamicIndexing not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceFeatures in APIs [vulkan]
	if ( context.contextSupports(vk::ApiVersion(0, 1, 4, 0)) )
	{
		if ( coreFeatures.features.shaderStorageBufferArrayDynamicIndexing == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature shaderStorageBufferArrayDynamicIndexing not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceFeatures in APIs [vulkan]
	if ( context.contextSupports(vk::ApiVersion(0, 1, 4, 0)) )
	{
		if ( coreFeatures.features.shaderStorageImageArrayDynamicIndexing == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature shaderStorageImageArrayDynamicIndexing not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceFeatures in APIs [vulkan]
	if ( context.contextSupports(vk::ApiVersion(0, 1, 4, 0)) )
	{
		if ( coreFeatures.features.shaderInt16 == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature shaderInt16 not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceVulkan11Features in APIs [vulkan]
	if ( context.contextSupports(vk::ApiVersion(0, 1, 4, 0)) )
	{
		if ( physicalDeviceVulkan11Features.storageBuffer16BitAccess == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature storageBuffer16BitAccess not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceVulkan11Features in APIs [vulkan]
	if ( context.contextSupports(vk::ApiVersion(0, 1, 4, 0)) )
	{
		if ( physicalDeviceVulkan11Features.variablePointersStorageBuffer == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature variablePointersStorageBuffer not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceVulkan11Features in APIs [vulkan]
	if ( context.contextSupports(vk::ApiVersion(0, 1, 4, 0)) )
	{
		if ( physicalDeviceVulkan11Features.variablePointers == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature variablePointers not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceVulkan11Features in APIs [vulkan]
	if ( context.contextSupports(vk::ApiVersion(0, 1, 4, 0)) )
	{
		if ( physicalDeviceVulkan11Features.samplerYcbcrConversion == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature samplerYcbcrConversion not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceVulkan12Features in APIs [vulkan]
	if ( context.contextSupports(vk::ApiVersion(0, 1, 4, 0)) )
	{
		if ( physicalDeviceVulkan12Features.samplerMirrorClampToEdge == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature samplerMirrorClampToEdge not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceVulkan12Features in APIs [vulkan]
	if ( context.contextSupports(vk::ApiVersion(0, 1, 4, 0)) )
	{
		if ( physicalDeviceVulkan12Features.storageBuffer8BitAccess == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature storageBuffer8BitAccess not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceVulkan12Features in APIs [vulkan]
	if ( context.contextSupports(vk::ApiVersion(0, 1, 4, 0)) )
	{
		if ( physicalDeviceVulkan12Features.shaderInt8 == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature shaderInt8 not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceVulkan12Features in APIs [vulkan]
	if ( context.contextSupports(vk::ApiVersion(0, 1, 4, 0)) )
	{
		if ( physicalDeviceVulkan12Features.shaderUniformTexelBufferArrayDynamicIndexing == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature shaderUniformTexelBufferArrayDynamicIndexing not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceVulkan12Features in APIs [vulkan]
	if ( context.contextSupports(vk::ApiVersion(0, 1, 4, 0)) )
	{
		if ( physicalDeviceVulkan12Features.shaderStorageTexelBufferArrayDynamicIndexing == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature shaderStorageTexelBufferArrayDynamicIndexing not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceVulkan12Features in APIs [vulkan]
	if ( context.contextSupports(vk::ApiVersion(0, 1, 4, 0)) )
	{
		if ( physicalDeviceVulkan12Features.scalarBlockLayout == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature scalarBlockLayout not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceVulkan14Features in APIs [vulkan]
	if ( context.contextSupports(vk::ApiVersion(0, 1, 4, 0)) )
	{
		if ( physicalDeviceVulkan14Features.globalPriorityQuery == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature globalPriorityQuery not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceVulkan14Features in APIs [vulkan]
	if ( context.contextSupports(vk::ApiVersion(0, 1, 4, 0)) )
	{
		if ( physicalDeviceVulkan14Features.shaderSubgroupRotate == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature shaderSubgroupRotate not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceVulkan14Features in APIs [vulkan]
	if ( context.contextSupports(vk::ApiVersion(0, 1, 4, 0)) )
	{
		if ( physicalDeviceVulkan14Features.shaderSubgroupRotateClustered == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature shaderSubgroupRotateClustered not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceVulkan14Features in APIs [vulkan]
	if ( context.contextSupports(vk::ApiVersion(0, 1, 4, 0)) )
	{
		if ( physicalDeviceVulkan14Features.shaderFloatControls2 == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature shaderFloatControls2 not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceVulkan14Features in APIs [vulkan]
	if ( context.contextSupports(vk::ApiVersion(0, 1, 4, 0)) )
	{
		if ( physicalDeviceVulkan14Features.shaderExpectAssume == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature shaderExpectAssume not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceVulkan14Features in APIs [vulkan]
	if ( context.contextSupports(vk::ApiVersion(0, 1, 4, 0)) )
	{
		if ( physicalDeviceVulkan14Features.bresenhamLines == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature bresenhamLines not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceVulkan14Features in APIs [vulkan]
	if ( context.contextSupports(vk::ApiVersion(0, 1, 4, 0)) )
	{
		if ( physicalDeviceVulkan14Features.vertexAttributeInstanceRateDivisor == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature vertexAttributeInstanceRateDivisor not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceVulkan14Features in APIs [vulkan]
	if ( context.contextSupports(vk::ApiVersion(0, 1, 4, 0)) )
	{
		if ( physicalDeviceVulkan14Features.indexTypeUint8 == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature indexTypeUint8 not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceVulkan14Features in APIs [vulkan]
	if ( context.contextSupports(vk::ApiVersion(0, 1, 4, 0)) )
	{
		if ( physicalDeviceVulkan14Features.dynamicRenderingLocalRead == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature dynamicRenderingLocalRead not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceVulkan14Features in APIs [vulkan]
	if ( context.contextSupports(vk::ApiVersion(0, 1, 4, 0)) )
	{
		if ( physicalDeviceVulkan14Features.maintenance5 == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature maintenance5 not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceVulkan14Features in APIs [vulkan]
	if ( context.contextSupports(vk::ApiVersion(0, 1, 4, 0)) )
	{
		if ( physicalDeviceVulkan14Features.maintenance6 == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature maintenance6 not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceVulkan14Features in APIs [vulkan]
	if ( context.contextSupports(vk::ApiVersion(0, 1, 4, 0)) && physicalDeviceVulkan11Features.protectedMemory )
	{
		if ( physicalDeviceVulkan14Features.pipelineProtectedAccess == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature pipelineProtectedAccess not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceVulkan14Features in APIs [vulkan]
	if ( context.contextSupports(vk::ApiVersion(0, 1, 4, 0)) )
	{
		if ( physicalDeviceVulkan14Features.pipelineRobustness == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature pipelineRobustness not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	// VkPhysicalDeviceVulkan14Features in APIs [vulkan]
	if ( context.contextSupports(vk::ApiVersion(0, 1, 4, 0)) )
	{
		if ( physicalDeviceVulkan14Features.pushDescriptor == VK_FALSE )
		{
			log << tcu::TestLog::Message << "Mandatory feature pushDescriptor not supported" << tcu::TestLog::EndMessage;
			result = false;
		}
	}

	return result;
}

